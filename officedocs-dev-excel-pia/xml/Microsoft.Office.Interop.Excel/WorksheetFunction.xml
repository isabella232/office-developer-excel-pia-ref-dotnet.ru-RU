<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3799dd3aab76ef91457248bfb93a39319ab94831a31142a4195f749f0f13c96" /><Meta Name="ms.sourcegitcommit" Value="daf501296516d104cf396246ac0d336adfeffd0d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/06/2021" /><Meta Name="ms.locfileid" Value="54511882" /></Metadata><TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Используется в качестве контейнера для Excel, которые можно назвать из Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата выпуска — дата выпуска службы безопасности.</param>
        <param name="Arg2">Первый интерес — первая дата интереса службы безопасности.</param>
        <param name="Arg3">Урегулирование — дата урегулирования безопасности</param>
        <param name="Arg4">Rate - годовая ставка купона безопасности.</param>
        <param name="Arg5">Par — парное значение безопасности.</param>
        <param name="Arg6">Частота — количество выплат купона в год.</param>
        <param name="Arg7">База — тип базы для подсчета дня.</param>
        <summary>Возвращает начисленные проценты для безопасности, которая платит периодические проценты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице описываются значения, которые можно использовать <paramref name="Arg5" /> для .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата проблемы безопасности.</param>
        <param name="Arg2">Дата зрелости безопасности.</param>
        <param name="Arg3">Годовая ставка купона безопасности.</param>
        <param name="Arg4">Паритет безопасности. Если упустить пар, ACCRINTM использует $1000.</param>
        <param name="Arg5">Тип базы для подсчета дня.</param>
        <summary>Возвращает начисленные проценты для безопасности, которая платит проценты по сроку погашения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице описываются значения, которые можно использовать <paramref name="Arg5" /> для .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>В следующем списке содержатся сведения, которые следует знать при работе с ACCRINTM:</para>
          <list type="bullet">
            <item>
              <description>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. </description>
            </item>
            <item>
              <description>Вопрос, зрелость и основа усечены в несколько этапов. </description>
            </item>
            <item>
              <description>Если вопрос или срок погашения не являются допустимой датой, ACCRINTM создает ошибку. </description>
            </item>
            <item>
              <description>Если коэффициент ≤ 0 или ≤ 0, ACCRINTM создает ошибку. </description>
            </item>
            <item>
              <description>Если основание &lt; 0 или если база &gt; 4, ACCRINTM создает ошибку. </description>
            </item>
            <item>
              <description>Если ≥ срок погашения, ACCRINTM создает ошибку. </description>
            </item>
            <item>
              <description>ACCRINTM рассчитывается следующим образом: </description>
            </item>
          </list>
          <para>где:</para>
          <para>A = Количество начисляемых дней, засчитыванных в соответствии с ежемесячной базой. Для процентов по срокам погашения используется количество дней с даты выпуска до даты погашения.</para>
          <para>D = годовая база.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cosine нужного угла и должен быть от -1 до 1.</param>
        <summary>Возвращает арккозин или обратный косин номера. Arccosine — это угол, косин которого <paramref name="Arg1" /> . Возвращенный угол дается в радианах в диапазоне 0 (ноль) до pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если вы хотите преобразовать результат из радианов в градусы, умножьте его на 180/PI() или используйте метод Degrees.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число, равное или больше 1.</param>
        <summary>Возвращает обратный гиперболический косин номера. Число должно быть больше или равно 1. Обратный гиперболический косин — это значение, гиперболическое козин которого равно <paramref name="Arg1" /> Acosh (Cosh(number)). <paramref name="Arg1" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cotangent нужного угла.</param>
        <summary>Возвращает арккотангент номера в радианах в диапазоне 0 до Pi.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Гиперболический котанген нужного угла.</param>
        <summary>Возвращает обратный гиперболический котанген номера.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Function_num — число от 1 до 19, которое указывает, какую функцию использовать.</param>
        <param name="Arg2">Параметры — числовое значение, которое определяет, какие значения игнорировать в диапазоне оценки для функции.</param>
        <param name="Arg3">Ref1 — первый числимый аргумент для функций, которые принимают несколько числических аргументов, для которых необходимо совокупное значение.</param>
        <param name="Arg4">Ref2 — Ref30 — числовая аргументация от 2 до 30, для которых необходимо совокупное значение.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает совокупность в списке или базе данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Следующие ограничения применяются к аргументам Ref (Arg3 - Arg 30) на основе <b>Function_num</b> значения.</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Допустимые типы:Любые ссылки на ячейки Пересечения союзов Определенные имена Структурированные ссылкиИнвалид типов: Фактические массивы данных</description>
              <description>Допустимые типы:Любые ссылки на ячейки Пересечения союзов Определенные имена Структурированные ссылкиИнвалид типов: Фактические массивы данных</description>
              <description>Допустимые типы:Любые ссылки на ячейки Пересечения союзов Определенные имена Структурированные ссылкиИнвалид типов: Фактические массивы данных</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Допустимые типы:Любые ссылки ячейки Союзы Пересечения Определенные имена Структурированные ссылки Фактические массивы данных</description>
              <description>Допустимые типы:Любые ссылки ячейки Союзы Пересечения Определенные имена Структурированные ссылки Фактические массивы данных</description>
              <description>Ссылки не разрешены</description>
            </item>
          </list>
          <para>Если второй аргумент ref необходим, но не предоставлен, AGGREGATE возвращает #VALUE! ошибка.</para>
          <para>Если одна или несколько ссылок являются 3-D ссылками, AGGREGATE возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость актива.</param>
        <param name="Arg2">Дата покупки актива.</param>
        <param name="Arg3">Дата окончания первого периода.</param>
        <param name="Arg4">Значение спасти в конце жизненного года актива.</param>
        <param name="Arg5">Период.</param>
        <param name="Arg6">Скорость амортизации.</param>
        <param name="Arg7">Год, который будет использоваться.</param>
        <summary>Возвращает амортизация для каждого периода бухгалтерского учета. Эта функция предусмотрена для французской системы бухгалтерского учета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если актив приобретен в середине отчетного периода, учитывается амортизация. Метод похож на , за исключением того, что коэффициент амортизации применяется в вычислении в зависимости от времени <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> службы активов. В следующей таблице описываются значения, используемые в <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>360 дней (метод NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Actual</description>
            </item>
            <item>
              <term>3</term>
              <description>365 дней в году</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 дней в году (европейский метод)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию.</para>
          <para>Эта функция возвращает амортизация до последнего периода срока службы активов или до тех пор, пока кумулятивная стоимость амортизации не будет больше, чем стоимость активов за вычетом значения спасти.</para>
          <para>Коэффициенты амортизации:</para>
          <list type="table">
            <item>
              <term>От 3 до 4 лет</term>
              <description>1.5</description>
            </item>
            <item>
              <term>От 5 до 6 лет</term>
              <description>2</description>
            </item>
            <item>
              <term>Более 6 лет</term>
              <description>2.5</description>
            </item>
          </list>
          <para>За период, предшествующий последнему периоду, уровень амортизации будет расти до 50 процентов, а за последний период - до 100 процентов.</para>
          <para>Если срок службы активов составляет от 0 (ноль) до 1, 1 и 2, 2 и 3 или 4 и 5, #NUM! возвращается значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость актива.</param>
        <param name="Arg2">Дата покупки актива.</param>
        <param name="Arg3">Дата окончания первого периода.</param>
        <param name="Arg4">Значение спасти в конце жизненного года актива.</param>
        <param name="Arg5">Период.</param>
        <param name="Arg6">Скорость амортизации.</param>
        <param name="Arg7">Год, который будет использоваться.</param>
        <summary>Возвращает амортизация для каждого периода бухгалтерского учета. Эта функция предусмотрена для французской системы бухгалтерского учета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если актив приобретен в середине отчетного периода, учитывается амортизация. В следующей таблице описываются значения, используемые для <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>360 дней (метод NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Actual</description>
            </item>
            <item>
              <term>3</term>
              <description>365 дней в году</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 дней в году (европейский метод)</description>
            </item>
          </list>
          <para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 условий, которые вы хотите проверить, которые могут быть как <b>истинными, так</b> и <b>ложными.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает <b>верно,</b> если все его аргументы <b>верны;</b> возвращает <b>ложный,</b> если один или несколько аргументов <b>ложны.</b></summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы должны оцениваться до логических значений, таких как <b>true</b> или <b>false,</b>или аргументы должны быть массивы или ссылки, содержащие логические значения. </para>
          <para>Если аргумент массива или ссылки содержит текстовые или пустые ячейки, эти значения игнорируются. </para>
          <para>Если указанный диапазон не содержит логических значений, этот метод создает значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При его применении без квалификатора объекта это свойство возвращает объект, который представляет <see cref="T:Microsoft.Office.Interop.Excel.Application" /> Microsoft Excel приложение. При этом с помощью квалификатора объектов это свойство возвращает объект, представляю который представляет создателя <see cref="T:Microsoft.Office.Interop.Excel.Application" /> указанного объекта. Это свойство можно использовать с помощью объекта автоматизации OLE для возврата приложения этого объекта. Только для чтения.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Римское число, необходимое для преобразования.</param>
        <summary>Преобразует римское число в арабское.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст или ссылка на ячейку, содержаную текст, который необходимо изменить. Если текст не содержит буквы полной ширины, текст не меняется.</param>
        <summary>Для языков набора символов double-byte (DBCS) изменяется полнополостные (двухбайтовые) символы на символы половинной ширины (однобайт).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sine угла, который вы хотите и должно быть от -1 до 1.</param>
        <summary>Возвращает arcsine или обратный sine номера. Arcsine — это угол, под которым находится <paramref name="Arg1" /> sine. Возвращенный угол дается в радианах в диапазоне -pi/2 до pi/2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Чтобы выразить дуги в градусах, умножьте результат на 180/PI () или используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> метод.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число.</param>
        <summary>Возвращает обратный гиперболический сина номера. Обратный гиперболический синус — это значение, гиперболическое значение которого равно <paramref name="Arg1" /> asinh <paramref name="Arg1" /> (номер)).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X-координата точки.</param>
        <param name="Arg2">Y-координата точки.</param>
        <summary>Возвращает арктангент или обратный касательной указанных x- и y-координат. Arctangent — это угол от оси x до строки, содержащей начало (0, 0) и точки с координатами (x_num, y_num). Угол дается в радианах между -pi и pi, за исключением -pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Положительный результат представляет угол против часовой стрелки от оси x; отрицательный результат представляет угол по часовой стрелке. </para>
          <para>
            <b>Atan2(a,b)</b> равно <b>Atan (b/a),</b>за исключением того, что может равнять 0 в <b>Atan2</b>. </para>
          <para>Если <paramref name="Arg1" /> обоих <paramref name="Arg2" /> и 0, Atan2 возвращает значение ошибки. </para>
          <para>Чтобы выразить arctangent в градусах, умножьте результат на 180/PI () или используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> метод.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число между 1 и -1.</param>
        <summary>Возвращает обратный гиперболический тангент номера. Число должно быть от -1 до 1 (за исключением -1 и 1).</summary>
        <returns>To be added.</returns>
        <remarks><para>Обратный гиперболический тангент — это значение, гиперболическое касающееся которого — <b>Arg1,</b>поэтому <b>Atanh (Tanh(number))</b> равно <paramref name="Arg1" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 аргументов, для которых необходимо среднее значение абсолютных отклонений. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает среднее значение абсолютных отклонений точек данных от среднего значения. AveDev — это показатель вариативности набора данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>AveDev</b> зависит от единицы измерения в входных данных. </para>
          <para>Аргументами должны быть либо цифры, либо имена, массивы или ссылки, содержащие цифры. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Уравнение для среднего отклонения:</para>
          <para>Рис. 1. Уравнение для среднего отклонения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 числимые аргументы, для которых необходимо среднее значение.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает среднее (арифметическое значение) аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. Если вы хотите включить логические значения и текстовые представления чисел в ссылку в качестве части вычисления, используйте функцию AVERAGEA. </para>
          <para>Метод <b>Average</b> измеряет центральную тенденцию, которая является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной тенденции:</para>
          <list type="bullet">
            <item>
              <description>Среднее значение, которое является арифметическим значением, и вычисляется путем добавления группы чисел, а затем деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 составляет 30, разделенных на 6, то есть 5. </description>
            </item>
            <item>
              <description>Среднее число группы номеров; то есть у половины номеров есть значения, которые больше медиана, а у половины — значения, которые меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее часто происходящим номером в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 — это 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной тенденции одинаковы. Для перекоса в распределении группы чисел они могут быть разными.</para>
          <para>При усредняющих ячейках имейте в виду разницу между пустыми ячейками и ячейками, содержащими значение "ноль", особенно если вы очистили поле для проверки значений zero на вкладке Просмотр (команда "Параметры", меню Tools). Пустые ячейки не засчитываются, но ноль значений.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Одно или несколько ячеек в среднем.</param>
        <param name="Arg2">Критерии в виде числа, выражения, ссылки на ячейки или текста, определяя, какие ячейки усреднчили. Например, критерии могут быть выражены как 32, "32", &gt; "32", "яблоки" или B4.</param>
        <param name="Arg3">Фактический набор ячеек в среднем. Если опущен, используется диапазон.</param>
        <summary>Возвращает среднее (арифметическое значение) всех ячеек в диапазоне, отвечающего заданным критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ячейки в диапазоне, содержащие <b>true</b> или <b>false,</b> игнорируются. </para>
          <para>Если ячейка в диапазоне или average_range является пустой ячейкой, <b>AverageIf</b> игнорирует ее. </para>
          <para>Если ячейка в критериях пуста, <b>AverageIf</b> рассматривает ее как значение 0. </para>
          <para>Если никакие ячейки в диапазоне не соответствуют критериям, <b>AverageIf</b> создает значение ошибки. </para>
          <para>В критериях можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем. </para>
          <para>Average_range не должен быть того же размера и формы, что и диапазон. Фактические ячейки, которые являются средними, определяются с помощью верхней левой ячейки в average_range в качестве первой ячейки, а затем в том числе ячеек, которые соответствуют размеру и форме для диапазона. Например:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Метод <b>AverageIf</b> измеряет центральную тенденцию, которая является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной тенденции:</para>
          <list type="bullet">
            <item>
              <description>Среднее значение, которое является арифметическим значением, и вычисляется путем добавления группы чисел, а затем деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 составляет 30, разделенных на 6, то есть 5. </description>
            </item>
            <item>
              <description>Среднее число группы номеров; то есть у половины номеров есть значения, которые больше медиана, а у половины — значения, которые меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее часто происходящим номером в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 — это 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной тенденции одинаковы. Для перекоса в распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Один или несколько диапазонов для оценки связанных критериев.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Возвращает среднее (арифметическое значение) всех ячеек, которые соответствуют нескольким критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если ячейка в average_range является пустой ячейкой, <b>AverageIfs</b> игнорирует ее. </para>
          <para>Если ячейка в диапазоне критериев пуста, <b>AverageIfs</b> рассматривает ее как значение 0. </para>
          <para>Ячейки в диапазоне, содержащие <b>настоящую</b> оценку в качестве 1; ячейки в диапазоне, содержащие <b>ложную</b> оценку как 0 (ноль). </para>
          <para>Каждая ячейка average_range используется в среднем вычислении только в том случае, если все указанные ниже критерии соответствуют действительности для этой ячейки. </para>
          <para>Если ячейки average_range пусты или содержат текстовые значения, которые невозможно перевести в цифры, <b>averageIfs</b> создает ошибку. </para>
          <para>Если нет ячеек, которые соответствуют всем критериям, <b>averageIfs</b> создает значение ошибки. </para>
          <para>В критериях можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем. </para>
          <para>Каждый criteria_range не должен быть того же размера и формы, что и average_range. Фактические ячейки, которые являются средними, определяются с помощью верхней левой ячейки в этой criteria_range как начальнюю ячейку, а затем включая ячейки, соответствующие размеру и форме для диапазона. Например:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Функция <b>AverageIfs</b> измеряет центральную тенденцию, которая является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной тенденции:</para>
          <list type="bullet">
            <item>
              <description>Среднее значение, которое является арифметическим значением, и вычисляется путем добавления группы чисел, а затем деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 составляет 30, разделенных на 6, то есть 5. </description>
            </item>
            <item>
              <description>Среднее число группы номеров; то есть у половины номеров есть значения, которые больше медиана, а у половины — значения, которые меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее часто происходящим номером в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 — это 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной тенденции одинаковы. Для перекоса в распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер, который необходимо преобразовать в текст, или ссылку на ячейку, содержащую номер, или формулу, которая оценивает число.</param>
        <summary>Преобразует номер в тайский текст и добавляет суффикс "Бат".</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер, который необходимо преобразовать.</param>
        <param name="Arg2">Базовый Radix, в который необходимо преобразовать номер.</param>
        <param name="Arg3">Минимальная длина возвращенной строки. Если не добавлены ведущие нули.</param>
        <summary>Преобразует число в текстовое представление с заданным радиксом (базой).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции Bessel. Если n не является integer, он усечен.</param>
        <summary>Возвращает измененную функцию Bessel, эквивалентную функции Bessel, оцениваемой для чисто мнимых аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x является ненумерным, BesselI возвращает #VALUE! значение ошибки. </para>
          <para>Если значение n не числимо, BesselI создает значение ошибки. </para>
          <para>Если n &lt; 0, BesselI создает значение ошибки. </para>
          <para>N-th order modified Bessel function of the variable x is:</para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции Bessel. Если n не является integer, он усечен.</param>
        <summary>Возвращает функцию Bessel.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числумным, <b>BesselJ</b> создает значение ошибки. </para>
          <para>Если n не является числумным, <b>BesselJ</b> возвращает значение ошибки. </para>
          <para>Если n &lt; 0, <b>BesselJ</b> создает значение ошибки. </para>
          <para>N-th order Bessel function of the variable x is: </para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Функция Гамма</para>
          <para> </para>
          <para> </para>
          <para>— это функция Гамма.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции. Если n не является integer, он усечен.</param>
        <summary>Возвращает измененную функцию Bessel, эквивалентную функциям Bessel, оцениваемым для чисто мнимых аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не числова, <b>BesselK</b> создает значение ошибки. </para>
          <para>Если n не числим, <b>BesselK</b> создает значение ошибки. </para>
          <para>Если n &lt; 0, <b>BesselK</b> создает значение ошибки. </para>
          <para>N-th order modified Bessel function of the variable x is: </para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para>где Jn и Yn являются функциями J и Y Bessel соответственно.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции. Если n не является integer, он усечен.</param>
        <summary>Возвращает функцию Bessel, которая также называется функцией Weber или функцией Neumann.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x является ненумерным, <b>BesselY</b> создает значение ошибки. </para>
          <para>Если n не числен, <b>BesselY</b> создает значение ошибки. </para>
          <para>Если n &lt; 0, <b>BesselY</b> создает значение ошибки. </para>
          <para>N-th order Bessel function of the variable x is: </para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение между A и B для оценки функции.</param>
        <param name="Arg2">Параметр Alpha дистрибутива.</param>
        <param name="Arg3">Бета-параметр дистрибутива.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная является верной,</b>бета-версия. DIST возвращает накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <param name="Arg5">Необязательный нижний предел к интервалу x.</param>
        <param name="Arg6">Необязательный верхний предел к интервалу x.</param>
        <summary>Возвращает функцию бета-накопительного распространения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Бета-версия распространения обычно используется для изучения изменения в процентах чего-то в образцах, таких как доля дня, когда люди тратят на просмотр телевизора:</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент является <b></b> ненумерным, Beta_Dist возвращает #VALUE! значение ошибки.</description>
            </item>
            <item>
              <description>Если альфа≤ 0 или бета≤ 0, <b></b> Beta_Dist создает значение ошибки.</description>
            </item>
            <item>
              <description>Если x A, x B или A = B, Beta_Dist &lt; создает значение &gt; ошибки. <b></b></description>
            </item>
            <item>
              <description>Если упустить значения для A и B (нижняя и верхняя <b>границы),</b> Beta_Dist использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с бета-рассылкой.</param>
        <param name="Arg2">Параметр Alpha дистрибутива.</param>
        <param name="Arg3">Параметр Бета-версии дистрибутива.</param>
        <param name="Arg4">Необязательный нижний предел к интервалу x.</param>
        <param name="Arg5">Необязательный верхний предел к интервалу x.</param>
        <summary>Возвращает обратную часть накопительной функции рассылки для указанного бета-распространения. То есть, если вероятность = Beta_Dist (x,...), то Beta_Inv (вероятность,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Бета-рассылка может использоваться при планировании проектов для моделирования вероятного времени завершения с учетом ожидаемого времени завершения и вариативности:</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент является ненумерным, <b>Beta_Inv</b> создает значение ошибки.</description>
            </item>
            <item>
              <description>Если значение ≤ 0 или бета≤ <b>0,</b> Beta_Inv создает значение ошибки.</description>
            </item>
            <item>
              <description>Если вероятность ≤ 0 или &gt; <b>вероятность</b> 1, Beta_Inv создает значение ошибки.</description>
            </item>
            <item>
              <description>Если упустить значения для A и B (нижняя и верхняя <b>границы),</b> Beta_Inv использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para>Учитывая значение <b>вероятности,</b> Beta_Inv ищет такое значение x, которое Beta_Dist (x, альфа, бета-версия, TRUE, A, B) = вероятность. Таким образом, <b>точность Beta_Inv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> . <b>Beta_Inv</b> использует итеративный метод поиска.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение между A и B для оценки функции.</param>
        <param name="Arg2">Параметр дистрибутива.</param>
        <param name="Arg3">Параметр дистрибутива.</param>
        <param name="Arg4">Необязательный нижний предел к интервалу x.</param>
        <param name="Arg5">Необязательный верхний предел к интервалу x.</param>
        <summary>Возвращает функцию бета-накопительного распространения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> методе.</para>
          <para>Бета-версия распространения обычно используется для изучения изменения в процентах чего-то в образцах, таких как доля дня, когда люди тратят на просмотр телевизора.</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент является ненумерным, <b>betaDist</b> возвращает #VALUE! значение ошибки.</description>
            </item>
            <item>
              <description>Если значение ≤ 0 или бета≤ 0, <b>бета-версия</b> создает значение ошибки.</description>
            </item>
            <item>
              <description>Если x &lt; A, x &gt; B или A = B, <b>betaDist</b> создает значение ошибки.</description>
            </item>
            <item>
              <description>Если упустить значения для A и B, <b>betaDist</b> использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с бета-рассылкой.</param>
        <param name="Arg2">Параметр Alpha дистрибутива.</param>
        <param name="Arg3">Параметр Бета-версии дистрибутива.</param>
        <param name="Arg4">Необязательный нижний предел к интервалу x.</param>
        <param name="Arg5">Необязательный верхний предел к интервалу x.</param>
        <summary>Возвращает обратную часть накопительной функции рассылки для указанного бета-распространения. То есть, если вероятность = betaDist (x,...), то BetaInv (,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> методе.</para>
          <para>Бета-рассылка может использоваться при планировании проектов для моделирования вероятного времени завершения с учетом ожидаемого времени завершения и вариативности.</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент не является числовым, <b>betaInv</b> создает значение ошибки.</description>
            </item>
            <item>
              <description>Если значение ≤ 0 или бета≤ 0, <b>бета-версия Создает</b> значение ошибки. </description>
            </item>
            <item>
              <description>Если вероятность ≤ 0 или вероятность &gt; 1, <b>betaInv</b> создает значение ошибки. </description>
            </item>
            <item>
              <description>Если упустить значения для A и B, <b>betaInv</b> использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para>Учитывая значение вероятности, <b>BetaInv</b> ищет это значение x таким образом, что betaDist (x, alpha, beta, A, B) = вероятность. Таким образом, точность <b>BetaInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . <b>BetaInv</b> использует итеративный метод поиска. Если поиск не сходится после 100 итерации, функция создает значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Двоичный номер, который необходимо преобразовать. Число не может содержать более 10 символов (10 бит). Наиболее значительным числом является бит знака. Остальные 9 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <summary>Преобразует двоичный номер в десятичный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер не является допустимым двоичным номером или содержит более 10 символов (10 бит), bin2Dec создает значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Двоичный номер, который необходимо преобразовать. Число не может содержать более 10 символов (10 бит). Наиболее значительным числом является бит знака. Остальные 9 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Количество символов, которые нужно использовать. Если места опущены, <b>в Bin2Hex</b> используется минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует двоичный номер в hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер не является допустимым двоичным номером или содержит более 10 символов (10 бит), <b>bin2Hex</b> создает ошибку. </para>
          <para>Если число отрицательное, <b>Bin2Hex</b> игнорирует места и возвращает 10-символов гексадецимального номера. </para>
          <para>Если <b>для Bin2Hex</b> требуется больше, чем помещает символы, создается ошибка. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места не числимы, <b>bin2Hex</b> создает ошибку. </para>
          <para>Если места отрицательные, <b>bin2Hex</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Двоичный номер, который необходимо преобразовать. Число не может содержать более 10 символов (10 бит). Наиболее значительным числом является бит знака. Остальные 9 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Количество символов, которые нужно использовать. Если места опущены, <b>bin2Oct</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует двоичный номер в восьмую.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер не является допустимым двоичным номером или содержит более 10 символов (10 бит), <b>bin2Oct</b> создает ошибку. </para>
          <para>Если число отрицательное, <b>Bin2Oct</b> игнорирует места и возвращает 10-символьный восьмиугольный номер. </para>
          <para>Если <b>для bin2Oct</b> требуется большее количество символов, чем мест, создается ошибка. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>bin2Oct</b> создает ошибку. </para>
          <para>Если места отрицательные, <b>bin2Oct</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s — количество успехов в испытаниях.</param>
        <param name="Arg2">Пробы — количество независимых испытаний.</param>
        <param name="Arg3">Probability_s — вероятность успеха в каждом пробном процессе.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если кумулятивная является <b>True,</b>метод возвращает кумулятивную функцию распределения, которая является вероятностью, что есть не более number_s успехов; если false , он возвращает функцию массы вероятности, которая является вероятностью того, что number_s <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> успехов. <b></b></param>
        <summary>Возвращает вероятность отдельного биномиального распределения терминов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте метод <b>Binom_Dist</b> в проблемах с фиксированным числом тестов или проб, когда результаты любого судебного разбирательства являются только успешными или неудачными, когда испытания являются независимыми и когда вероятность успеха является постоянной на протяжении всего эксперимента. Например, метод <b>Binom_Dist</b> может рассчитать вероятность того, что двое из следующих трех родившихся младенцев являются мужчинами. </para>
          <list type="bullet">
            <item>
              <description>Number_s и испытания усечены на несколько этапов. </description>
            </item>
            <item>
              <description>Если number_s, пробы или probability_s не числумерные, метод <b></b> Binom_Dist создает ошибку. </description>
            </item>
            <item>
              <description>Если number_s 0 или number_s, метод Binom_Dist создает &lt; &gt; ошибку. <b></b> </description>
            </item>
            <item>
              <description>Если probability_s или probability_s 1, метод Binom_Dist &lt; &gt; создает ошибку. <b></b> Функция массы вероятности биномии: </description>
            </item>
          </list>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>является COMBIN(n,x).</para>
          <para>Совокупное биномное распределение:</para>
          <para>Рис. 3. Совокупное биномное распределение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество независимых испытаний.</param>
        <param name="Arg2">Вероятность успеха в каждом пробном процессе.</param>
        <param name="Arg3">Количество успехов в испытаниях.</param>
        <param name="Arg4">При условии данной функции возвращается вероятность того, что число успешных испытаний будет лежать между Arg3 и Arg4.</param>
        <summary>Возвращает вероятность пробного результата с помощью биномиального распределения.</summary>
        <returns>Двойное с плавающей точкой</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Пробы — количество проб Бернулли.</param>
        <param name="Arg2">Probability_s — вероятность успеха в каждом пробном процессе.</param>
        <param name="Arg3">Alpha — это значение критерия.</param>
        <summary>Возвращает обратную часть вероятности биномиального распределения отдельного термина.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если пробные версии, Probability_s или Альфа не числумерные, метод Binom_Inv создает ошибку. <b></b> </para>
          <para>Если пробные процессы не являются неоконченными, они усечены. </para>
          <para>Если &lt; пробная версия 0, <b>Binom_Inv</b> метод создает ошибку. </para>
          <para>Если Probability_s 0 или Probability_s 1, метод Binom_Inv создает &lt; &gt; ошибку. <b></b> </para>
          <para>Если alpha &lt; 0 или Alpha &gt; 1, Binom_Inv метод создает ошибку. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество успехов в испытаниях.</param>
        <param name="Arg2">Количество независимых испытаний.</param>
        <param name="Arg3">Вероятность успеха в каждом пробном процессе.</param>
        <param name="Arg4">Логическое значение, определя которое определяет форму функции. Если кумулятивная истина, <b>то BinomDist</b> возвращает накопительную функцию распределения, что является вероятностью, что есть number_s успехов; <b></b> если <b>false,</b>он возвращает функцию массы вероятности, которая является вероятностью того, что number_s успехов.</param>
        <summary>Возвращает вероятность отдельного биномиального распределения терминов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>BinomDist</b> в проблемах с фиксированным числом тестов или проб, когда результаты любого судебного разбирательства являются только успешными или неудачными, когда испытания являются независимыми и когда вероятность успеха является постоянной на протяжении всего эксперимента. Например, <b>BinomDist может</b> рассчитать вероятность того, что двое из следующих трех родившихся младенцев являются мужчинами. </para>
          <para>Number_s и испытания усечены на несколько этапов. </para>
          <para>Если number_s, проб или probability_s является ненумерным, <b>BinomDist</b> создает ошибку. </para>
          <para>Если number_s &lt; 0 или &gt; number_s, <b>binomDist</b> создает ошибку. </para>
          <para>Если probability_s &lt; 0 или probability_s &gt; 1, <b>BinomDist</b> создает ошибку. </para>
          <para>Функция массы вероятности биномии: </para>
          <para>Рис. 1. Функция массы вероятностей binomial</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>является COMBIN(n,x).</para>
          <para>Совокупное биномное распределение:</para>
          <para>Рис. 3. Совокупное биномное распределение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <summary>Возвращает "Bitwise And" из двух чисел.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Количество битов, которые необходимо перенести налево на Arg1.</param>
        <summary>Возвращает значение, смещенного влево shift_amount битами.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <summary>Возвращает немного или из 2 чисел.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Количество битов, которые необходимо перенести вправо на Arg1.</param>
        <summary>Возвращает значение, сдвигаемого вправо shift_amount битами.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <summary>Возвращает битумный "Exclusive Or" из двух номеров.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение, необходимое для округли.</param>
        <param name="Arg2">Значение — это несколько вариантов, к которым необходимо объехать.</param>
        <summary>Возвращает число округляемое, от нуля, до ближайшего множественного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> методе.</para>
          <para>Например, если вы хотите избежать использования копеек в ценах и ваш продукт по цене $4.42, используйте формулу Потолок (4.42,0.05) для округлить цены до ближайшего никеля.</para>
          <para>Если любой аргумент является ненумерным, <b>потолок</b> создает ошибку. </para>
          <para>Независимо от знака номера, значение округляется при отрегулировании от нуля. Если число имеет точное значение, округление не происходит. </para>
          <para>Если число и значение имеют разные знаки, <b>потолок</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, необходимое для округли.</param>
        <param name="Arg2">Несколько, к которым нужно обкрутки.</param>
        <param name="Arg3">Если дано и незеро, эта функция будет округляться от нуля.</param>
        <summary>Округлит число вверх, в ближайшую часть или к ближайшему множеству значений.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение, необходимое для округли.</param>
        <param name="Arg2">Значение — это несколько вариантов, к которым необходимо объехать.</param>
        <summary>Возвращает указанное число, округлимое до ближайшего множественного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Например, если вы хотите избежать использования копеек в ценах и ваш продукт по цене $4.42, используйте формулу Потолок (4.42,0.05) для округлить цены до ближайшего никеля.</para>
          <para>В зависимости от знака аргументов количества <b></b> и значения метод Ceiling_Precise от нуля или к нулю.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Круги к нулю.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Раунды от нуля.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Круги к нулю.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Раунды от нуля.</description>
            </item>
          </list>
          <para>Если любой аргумент является ненумерным, <b></b> Ceiling_Precise создает ошибку. </para>
          <para>Если число имеет точное значение, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, при котором необходимо оценить распределение.</param>
        <param name="Arg2">Количество степеней свободы.</param>
        <summary>Возвращает однохвостые вероятности распределения чи-квадратов.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> методах.</para>
          <para>Распределение 12 связано с тестом 12. Для сравнения наблюдаемых и ожидаемых значений используйте тест 12.</para>
          <para>Например, генетический эксперимент может выдвигать гипотезу о том, что в следующем поколении растений будет представлен определенный набор цветов. Сравнив наблюдаемые результаты с ожидаемыми, можно определить, является ли ваша исходная гипотеза допустимой.</para>
          <para>Если любой аргумент является ненумерным, <b>chiDist</b> создает ошибку. </para>
          <para>Если x отрицательный, <b>chiDist</b> создает ошибку. </para>
          <para>Если degrees_freedom не является integer, она усечена. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom &gt; 10^10, <b>chiDist</b> создает ошибку. </para>
          <para>
            <b>ChiDist</b> вычисляется как ChiDist = P (X x), где X — это &gt; случайная переменная 12.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с распределением чи-квадратов.</param>
        <param name="Arg2">Количество степеней свободы.</param>
        <summary>Возвращает обратное однохвостый вероятности распределения чи-квадратов.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> методах.</para>
          <para>Если вероятность = ChiDist (x,...), то ChiInv (вероятность,...) = x. Используйте эту функцию для сравнения наблюдаемых результатов с ожидаемыми, чтобы определить, допустима ли исходная гипотеза.</para>
          <para>Если любой аргумент не является числовым, <b>chiInv</b> создает ошибку. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>chiInv</b> создает ошибку. </para>
          <para>Если degrees_freedom не является integer, она усечена. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom ≥ 10^10, <b>chiInv</b> создает ошибку.</para>
          <para>Учитывая значение вероятности, <b>ChiInv</b> ищет это значение x таким образом, что ChiDist (x, degrees_freedom) = вероятность. Таким образом, точность <b>ChiInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> . <b>ChiInv использует</b> итеративный метод поиска. Если поиск не сошелся после 64 итерации, функция создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X . Значение, при котором необходимо оценить распределение.</param>
        <param name="Arg2">Deg_freedom — количество степеней свободы.</param>
        <param name="Arg3">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>CHISQ_DIST возвращает накопительную функцию распространения; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает распределение чи-квадратов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является ненумерным, CHISQ_DIST возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, CHISQ_DIST возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom не является неинтегрированной, она усечена. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, при котором необходимо оценить распределение.</param>
        <param name="Arg2">Количество степеней свободы.</param>
        <summary>Возвращает правохвостые вероятности распределения чи-квадратов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Распределение 12 связано с тестом 12. Для сравнения наблюдаемых и ожидаемых значений используйте тест 12.</para>
          <para>Например, генетический эксперимент может выдвигать гипотезу о том, что в следующем поколении растений будет представлен определенный набор цветов. Сравнив наблюдаемые результаты с ожидаемыми, можно определить, является ли ваша исходная гипотеза допустимой.</para>
          <para>Если любой аргумент является ненумерным, <b>ChiSq_Dist_RT</b> создает ошибку. </para>
          <para>Если x отрицательный, <b>ChiSq_Dist_RT</b> создает ошибку. </para>
          <para>Если degrees_freedom не является integer, она усечена. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom &gt; 10^10, ChiSq_Dist_RT создает ошибку. <b></b> <b>ChiSq_Dist_RT</b> вычисляется как ChiSq_Dist_RT = P (X x), где X — это &gt; случайная переменная 12.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с распределением чи-квадратов.</param>
        <param name="Arg2">Deg_freedom — количество степеней свободы.</param>
        <summary>Возвращает обратную от левого хвоста вероятность распределения чи-квадратов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, ChiSq_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; &gt; <b>вероятность</b> 1, ChiSq_Inv возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom не является неинтегрированной, она усечена. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с распределением чи-квадратов.</param>
        <param name="Arg2">Количество степеней свободы.</param>
        <summary>Возвращает обратное правохвостый вероятности распределения чи-квадратов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если вероятность = ChiSq_Dist_RT (x,...), ChiSq_Inv_RT (вероятность,...) = x. Используйте эту функцию для сравнения наблюдаемых результатов с ожидаемыми, чтобы определить, допустима ли исходная гипотеза.</para>
          <para>Если любой аргумент является ненумерным, <b>ChiSq_Inv_RT</b> создает ошибку. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, ChiSq_Inv_RT создает ошибку. <b></b> </para>
          <para>Если degrees_freedom не является integer, она усечена. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom ≥ 10^10, <b></b> ChiSq_Inv_RT создает ошибку.</para>
          <para>Учитывая значение вероятности, <b>ChiSq_Inv_RT</b> ищет это значение x таким образом, что ChiSq_Dist_RT (x, degrees_freedom) = вероятность. Таким образом, <b>точность ChiSq_Inv_RT</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> . <b>ChiSq_Inv_RT</b> использует итеративный метод поиска. Если поиск не сошелся после 64 итерации, функция создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон данных, содержащий наблюдения для проверки ожидаемых значений.</param>
        <param name="Arg2">Диапазон данных, содержащий соотношение итогов и итогов столбцов строки к общему общему.</param>
        <summary>Возвращает тест на независимость.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> возвращает значение из распределения chi-squared (s2) для статистики и соответствующих степеней свободы. Вы можете использовать тесты 12, чтобы определить, проверяются ли результаты эксперимента с помощью гипотезы.</para>
          <para>Если actual_range и expected_range имеют различное количество точек <b>данных,</b> ChiSq_Test возвращает значение #N/ошибки. </para>
          <para>В тесте 12 сначала вычисляется статистика 12 с помощью формулы: </para>
          <para>Рис. 1. Тест Формулы для x squared</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <list type="bullet">
            <item>
              <description>Aij = фактическая частота в столбце i-th row, j-th</description>
            </item>
            <item>
              <description>Eij = ожидаемая частота в столбце i-th row, j-th</description>
            </item>
            <item>
              <description>r = число или строки</description>
            </item>
            <item>
              <description>c = количество столбцов</description>
            </item>
          </list>
          <para>Низкое значение s2 является индикатором независимости. Как видно из формулы, 2 всегда является положительным или 0, а равно 0, только если Aij = Eij для каждого i,j.</para>
          <para>
            <b>ChiSq_Test</b> возвращает вероятность того, что значение статистики y2 по крайней мере до максимального значения, рассчитанного по вышеуказанной формуле, могло случайно произойти при предположении независимости. При вычислении этой вероятности <b>ChiSq_Test</b> использует распределение 12 с соответствующим количеством степеней свободы df. Если r &gt; 1 и c &gt; 1, то df = (r - 1)(c - 1). Если r = 1 и c 1, то df = c - 1 или если r 1 и &gt; c = &gt; 1, то df = r - 1. r = c= 1 не допускается и создает ошибку.</para>
          <para>Использование <b>ChiSq_Test</b> является наиболее подходящим, если Eij не слишком мал. Некоторые статистики предполагают, что каждый Eij должен быть больше или равен 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон данных, содержащий наблюдения для проверки ожидаемых значений.</param>
        <param name="Arg2">Функция ImportantThis была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> методе. Диапазон данных, содержащий соотношение итогов и итогов столбцов строки к общему общему.</param>
        <summary>Возвращает тест на независимость.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiTest</b> возвращает значение из распределения chi-squared (s2) для статистики и соответствующих степеней свободы. Вы можете использовать тесты 12, чтобы определить, проверяются ли результаты эксперимента с помощью гипотезы.</para>
          <para>Если actual_range и expected_range разное количество точек данных, <b>ChiTest</b> возвращает значение #N/ошибки. </para>
          <para>В тесте 12 сначала вычисляется статистика 12 с помощью формулы: </para>
          <para>Рис. 1. Тест Формулы для x squared</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <list type="bullet">
            <item>
              <description>Aij = фактическая частота в столбце i-th row, j-th</description>
            </item>
            <item>
              <description>Eij = ожидаемая частота в столбце i-th row, j-th</description>
            </item>
            <item>
              <description>r = число или строки</description>
            </item>
            <item>
              <description>c = количество столбцов</description>
            </item>
          </list>
          <para> </para>
          <para>Низкое значение s2 является индикатором независимости. Как видно из формулы, 2 всегда является положительным или 0, а равно 0, только если Aij = Eij для каждого i,j.</para>
          <para>
            <b>ChiTest</b> возвращает вероятность того, что значение статистики y2 по крайней мере до максимального значения, рассчитанного по вышеуказанной формуле, могло случайно произойти при предположении независимости. При вычислении этой вероятности <b>ChiTest</b> использует распределение y2 с соответствующим количеством степеней свободы df. Если r &gt; 1 и c &gt; 1, то df = (r - 1)(c - 1). Если r = 1 и c 1, то df = c - 1 или если r 1 и &gt; c = &gt; 1, то df = r - 1. r = c= 1 не допускается и создает ошибку.</para>
          <para>Использование <b>ChiTest</b> является наиболее подходящим, если Eij не слишком мал. Некоторые статистики предполагают, что каждый Eij должен быть больше или равен 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Указывает, какой аргумент значения выбран. Arg1 должен быть номером от 1 до 29 или формулой или ссылкой на ячейку, содержащую число от 1 до 29.</param>
        <param name="Arg2">От 1 до 29 аргументов значения, из которых Выберите выбирает значение или действие для выполнения на основе Arg1. Аргументами могут быть числа, ссылки на ячейки, определенные имена, формулы, функции или текст.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Используется <paramref name="Arg1" /> в качестве индекса для возврата значения из списка аргументов значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если <paramref name="Arg1" /> значение 1, <b>выберите</b> значение returns1; если оно 2, <b>Выберите</b> значение returns2; и так далее. </para>
          <para>Если значение меньше 1 или больше, чем число последнего значения в <paramref name="Arg1" /> списке, <b>Выберите</b> создает ошибку. </para>
          <para>Если <paramref name="Arg1" /> это фракция, она усечена до самого низкого уровня перед его использования. </para>
          <para>Если <paramref name="Arg1" /> массив, каждое значение оценивается при оценке <b>Выберите.</b> </para>
          <para>Аргументы значения, которые <b>нужно выбрать,</b> могут быть ссылками диапазона, а также одиночными значениями. Например, формула:</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>оценивает:</para>
          <para>=SUM (B1:B10)</para>
          <para>которое возвращает значение на основе значений в диапазоне B1:B10.</para>
          <para>Сначала <b>оценивается</b> функция Выбрать, возвращая ссылку B1:B10. Затем функция SUM оценивается с помощью B1:B10, результата функции <b>Выбрать,</b> в качестве аргумента.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любые сведения о таблицах, из которых необходимо удалить непечатные символы.</param>
        <summary>Удаляет все непечатные символы из текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>Clean</b> в тексте, импортируемом из других приложений, в которых содержатся символы, которые не могут печататься в операционной системе. Например, с помощью <b>Clean</b> можно удалить низкоуровневый компьютерный код, который часто находится в начале и конце файлов данных и не может быть напечатан.</para>
          <para>
            <b>Важно.</b>Функция <b>Clean</b> была разработана для удаления из текста первых 32 непечатных символов 7-битного кода ASCII (значения от 0 до 31). В наборе символов Юникод есть дополнительные символы без печати (значения 127, 129, 141, 143, 144 и 157). Сама по себе <b>функция Clean</b> не удаляет эти дополнительные символы nonprinting.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество элементов.</param>
        <param name="Arg2">Количество элементов в каждой комбинации.</param>
        <summary>Возвращает количество комбинаций для заданного количества элементов. Используйте <b>Combin,</b> чтобы определить общее возможное число групп для заданного количества элементов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Численные аргументы усечены на несколько этапов. </para>
          <para>Если любой аргумент является ненумерным, <b>Combin</b> создает ошибку. </para>
          <para>Если номер &lt; 0, number_chosen &lt; 0 или &lt; номер number_chosen, <b>combin</b> создает ошибку. </para>
          <para>Комбинация — это любой набор или подмножество элементов независимо от их внутреннего порядка. Комбинации отличаются от перемыканий, для которых внутренний порядок является значительным. </para>
          <para>Количество комбинаций: число = n и number_chosen = k: </para>
          <para>Рис. 1. Количество комбинаций</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Общее количество элементов.</param>
        <param name="Arg2">Количество элементов в каждой комбинации.</param>
        <summary>Возвращает количество комбинаций с повторами для заданного количества элементов.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Реальный коэффициент сложного номера.</param>
        <param name="Arg2">Мнимый коэффициент сложного числа.</param>
        <param name="Arg3">Суффикс для воображаемого компонента сложного номера. Если опущен, суффикс считается "i".</param>
        <summary>Преобразует реальные и воображаемые коэффициенты в сложное число формы x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Все функции сложных номеров принимают "i" и "j" для суффикса, но ни "I", ни "J". Использование верхнего шкафа создает ошибку. Все функции, которые принимают два или более сложных номера, требуют, чтобы все суффиксы совпадали.</para>
          <para>Если <paramref name="Arg1" /> это не числовая ошибка, <b>complex</b> создает ошибку. </para>
          <para>Если <paramref name="Arg2" /> это не числовая ошибка, <b>complex</b> создает ошибку. </para>
          <para>Если <paramref name="Arg3" /> нет ни "i", ни "j", <b>complex</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Уровень значимости, используемый для вычисления уровня доверия. Уровень доверия равен 100*(1 - альфа)%, или другими словами, альфа 0,05 указывает на уровень доверия в 95 процентов.</param>
        <param name="Arg2">Отклонение стандарта населения для диапазона данных и считается известным.</param>
        <param name="Arg3">Размер образца.</param>
        <summary>Возвращает значение, которое можно использовать для построения интервала доверия для означает население.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> методах.</para>
          <para>Интервал доверия — это диапазон значений. Ваш пример означает, x, находится в центре этого диапазона, а диапазон x ± <b>Confidence</b>. Например, если x является примерным средством времени доставки продуктов, заказаных по почте, x ± <b>Confidence</b> — это диапазон средств для населения. Для любого населения означает, μ0, в этом диапазоне, вероятность получения образца означает, что более далее от μ0, чем x, больше, чем альфа; для любого населения означает, μ0, а не в этом диапазоне, вероятность получения образца означает дальше от μ0, чем x меньше, чем альфа. Другими словами, предположим, что мы используем x, standard_dev и размер для построения двухвостых тестов на уровне значения альфа гипотезы о том, что население означает μ0. Тогда мы не отклонить эту гипотезу, если μ0 находится в доверительный интервал и отклонить эту гипотезу, если μ0 не находится в интервале доверия. Интервал доверия не позволяет сделать вывод о том, что существует вероятность 1 — альфа, что следующий пакет займет время доставки, которое находится в интервале доверия. </para>
          <para>Если какой-либо аргумент является ненумерным, <b>доверие</b> создает ошибку. </para>
          <para>Если альфа≤ 0 или ≥ 1, <b>доверие</b> создает ошибку. </para>
          <para>Если standard_dev ≤ 0, <b>доверие</b> создает ошибку. </para>
          <para>Если размер не является несколько, он усечен. </para>
          <para>Если размер &lt; 1, <b>доверие</b> создает ошибку. </para>
          <para>Если мы предполагаем, что альфа равна 0,05, нам необходимо рассчитать область под стандартной нормальной кривой, равной (1 — альфа) или 95 процентам. Это значение ± 1.96. Таким образом, интервал доверия: </para>
          <para>Рис. 1. Интервал доверия</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Уровень значимости, используемый для вычисления уровня доверия. Уровень доверия равен 100*(1 - альфа)%, или другими словами, альфа 0,05 указывает на уровень доверия в 95 процентов.</param>
        <param name="Arg2">Отклонение стандарта населения для диапазона данных и считается известным.</param>
        <param name="Arg3">Размер образца.</param>
        <summary>Возвращает значение, которое можно использовать для построения интервала доверия для означает население.</summary>
        <returns>To be added.</returns>
        <remarks><para>Интервал доверия — это диапазон значений. В центре этого диапазона находится пример x, а диапазон x ± <b>Confidence_Norm.</b> Например, если x является примерным средством времени доставки для продуктов, заказаных по почте, x ± <b>Confidence_Norm</b> является диапазоном средств для населения. Для любого населения означает, μ0, в этом диапазоне, вероятность получения образца означает, что более далее от μ0, чем x, больше, чем альфа; для любого населения означает, μ0, а не в этом диапазоне, вероятность получения образца означает дальше от μ0, чем x меньше, чем альфа. Другими словами, предположим, что x, standard_dev и размер используется для построения двухвостых тестов на уровне значения альфа гипотезы о том, что население означает μ0. Тогда мы не отклонить эту гипотезу, если μ0 находится в доверительный интервал и отклонить эту гипотезу, если μ0 не находится в интервале доверия. Интервал доверия не позволяет сделать вывод о том, что существует вероятность 1 — альфа, что следующий пакет займет время доставки, которое находится в интервале доверия.</para>
          <para>Если какой-либо аргумент является ненумерным, <b>Confidence_Norm</b> создает ошибку. </para>
          <para>Если альфа≤ 0 или ≥ 1, <b></b> Confidence_Norm создает ошибку. </para>
          <para>Если standard_dev ≤ 0, <b>Confidence_Norm</b> создает ошибку. </para>
          <para>Если размер не является несколько, он усечен. </para>
          <para>Если размер &lt; 1, <b>Confidence_Norm</b> создает ошибку. </para>
          <para>Если предполагается, что альфа равно 0,05, вычислить область под стандартной нормальной кривой, равной (1 - альфа) или 95 процентов. Это значение ± 1.96. Таким образом, интервал доверия: </para>
          <para>Рис. 1. Интервал доверия</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alpha . Уровень значимости, используемый для вычисления уровня доверия. Уровень доверия равен 100*(1 - альфа)%, или другими словами, альфа 0,05 указывает на уровень доверия в 95 процентов.</param>
        <param name="Arg2">Standard_dev . Отклонение стандарта населения для диапазона данных и считается известным.</param>
        <param name="Arg3">Размер — размер образца.</param>
        <summary>Возвращает интервал доверия для означает население, используя рассылку t Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, Confidence_T возвращает #VALUE! значение ошибки. </para>
          <para>Если альфа ≤ 0 или ≥ 1, <b></b> Confidence_T возвращает #NUM! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>Confidence_T</b> возвращает #NUM! значение ошибки. </para>
          <para>Если размер не является несколько, он усечен. </para>
          <para>Если размер равен 1, <b>Confidence_T</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Если размер равен 1, <b>Confidence_T</b> возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение в from_units для преобразования.</param>
        <param name="Arg2">Единицы для номера.</param>
        <param name="Arg3">Единицы для результата. <b>Convert</b> принимает следующие текстовые значения (в кавычках) для from_unit и to_unit, перечисленных в разделе Примечания ниже.</param>
        <summary>Преобразует число из одной системы измерения в другую. Например, <b>Convert</b> может перевести таблицу расстояний в милях в таблицу расстояний в километрах.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Gram</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Slug</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Масса фунта (avoirdupois)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (атомная массовая единица)</term>
              <description>"Ъ"</description>
            </item>
            <item>
              <term>Масса унции (avoirdupois)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Meter</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Уставная миля</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Nautical mile</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Inch</term>
              <description>"в"</description>
            </item>
            <item>
              <term>Foot</term>
              <description>"FT"</description>
            </item>
            <item>
              <term>Yard</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Angstrom</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Pica (1/72 в.)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Year</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>Day</term>
              <description>"День"</description>
            </item>
            <item>
              <term>Часы</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Минуты</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Секунды</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Паскаль</term>
              <description>"Pa" (или "p")</description>
            </item>
            <item>
              <term>Атмосфера</term>
              <description>"atm" (или "at")</description>
            </item>
            <item>
              <term>mm меркурий</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Ньютон</term>
              <description>"N"</description>
            </item>
            <item>
              <term>Dyne</term>
              <description>"dyn" (или "dy")</description>
            </item>
            <item>
              <term>Сила фунта</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Термодинамические калории</term>
              <description>"c"</description>
            </item>
            <item>
              <term>ИТ-калории</term>
              <description>"Cal"</description>
            </item>
            <item>
              <term>Вольт Электрон</term>
              <description>"eV" (или "ev")</description>
            </item>
            <item>
              <term>Час лошадиных сил</term>
              <description>"HPh" (или "hh")</description>
            </item>
            <item>
              <term>Ватт-час</term>
              <description>"Wh" (или "wh")</description>
            </item>
            <item>
              <term>Foot-pound</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" (или "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Лошадиная сила</term>
              <description>"HP" (или "h")</description>
            </item>
            <item>
              <term>Ватт</term>
              <description>"W" (или "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Tesla</term>
              <description>"T"</description>
            </item>
            <item>
              <term>ГАУСС</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Градус Цельсия</term>
              <description>"C" (или "cel")</description>
            </item>
            <item>
              <term>Степень По фаренгейту</term>
              <description>"F" (или "fah")</description>
            </item>
            <item>
              <term>Kelvin</term>
              <description>"K" (или "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Чайная ложка</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Столовая ложка</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Жидкий унция</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>Cup</term>
              <description>"Чашка"</description>
            </item>
            <item>
              <term>Пинта США</term>
              <description>"pt" (или "us_pt")</description>
            </item>
            <item>
              <term>U.K. пинта</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Quart</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>Gallon</term>
              <description>"Gal"</description>
            </item>
            <item>
              <term>Литр</term>
              <description>"l" (или "lt")</description>
            </item>
          </list>
          <para>Следующие сокращенные префиксы единиц можно предопластить к любым метрикам from_unit или to_unit.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"Ъ"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Если типы вводных данных некорректны, <b>convert</b> создает ошибку. </para>
          <para>Если единицы не существует, <b>преобразование</b> создает ошибку. </para>
          <para>Если блок не поддерживает сокращенную префикс единицу, <b>преобразование</b> создает ошибку. </para>
          <para>Если единицы находятся в разных группах, <b>преобразование</b> создает ошибку. </para>
          <para>Имена и префиксы единиц являются чувствительными к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон значений ячейки.</param>
        <param name="Arg2">Диапазон значений второй ячейки.</param>
        <summary>Возвращает коэффициент корреляции диапазонов <paramref name="Arg1" /> и <paramref name="Arg2" /> клеток.</summary>
        <returns>To be added.</returns>
        <remarks><para>Чтобы определить связь между двумя свойствами, используйте коэффициент корреляции. Например, можно изучить связь между средней температурой расположения и использованием кондиционеров.</para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если количество точек данных <paramref name="Arg1" /> разное, <paramref name="Arg2" /> <b>коррел</b> создает ошибку. </para>
          <para>Если значение s (стандартное отклонение) их значений равно нулю, коррел создает <paramref name="Arg1" /> <paramref name="Arg2" /> ошибку. <b></b> </para>
          <para>Уравнение коэффициента корреляции:</para>
          <para>Рис. 1. Уравнение для коэффициента корреляции</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются примером означает Средний (Arg1) и Средний (Arg2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число, для которого необходимо найти гиперболический косин.</param>
        <summary>Возвращает гиперболический косин номера.</summary>
        <returns>To be added.</returns>
        <remarks><para>Формула гиперболического косина: </para>
          <para>Рис. 1. Формула гиперболического косина</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен cotangent.</param>
        <summary>Возвращает cotangent угла.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен гиперболический котанген.</param>
        <summary>Возвращает гиперболический котанген номера.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 аргументов, которые могут содержать или ссылаться на различные типы данных, но учитываются только цифры.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Подсчитывают количество ячеек, содержащих цифры, и подсчитывают номера в списке аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>Count,</b> чтобы получить количество записей в поле номеров, которое находится в диапазоне или массиве чисел. </para>
          <para>Учитываются аргументы, которые являются числами, датами или текстовым представлением чисел. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, игнорируются. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Для подсчета логических значений, текстовых или ошибок используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> функцию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 аргументов, представляющих значения, которые необходимо считать.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Подсчитывают количество не пустых ячеек и значения в списке аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>CountA</b> для подсчета количества ячеек, содержащих данные в диапазоне или массиве.</para>
          <para>Значение — это любой тип сведений, включая значения ошибок и пустой текст (""). Значение не включает пустые ячейки. </para>
          <para>Если аргумент — массив или ссылка, используются только значения в этом массиве или ссылке. Пустые ячейки и текстовые значения в массиве или ссылке игнорируются. </para>
          <para>Если вам не нужно считать логические значения, текстовые значения или значения ошибок, используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> функцию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон, из которого нужно считать пустые ячейки.</param>
        <summary>Учитывает пустые ячейки в указанном диапазоне ячеек.</summary>
        <returns>To be added.</returns>
        <remarks><para>Также учитываются ячейки с формулами, возвращая "" (пустой текст). Ячейки с нулевыми значениями не учитываются.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон ячеек, из которых нужно считать ячейки.</param>
        <param name="Arg2">Критерии в виде числа, выражения, ссылки на ячейки или текста, определяя, какие ячейки будут засчитываться. Например, критерии могут быть выражены как 32, "32", &gt; "32", "яблоки" или B4.</param>
        <summary>Подсчитывают количество ячеек в диапазоне, который соответствует заданным критериям.</summary>
        <returns>Возвращает <see cref="T:System.Double" /> .</returns>
        <remarks><para>Для критериев можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Один или несколько диапазонов для оценки связанных критериев.</param>
        <param name="Arg2">Один или несколько критериев в виде числа, выражения, ссылки на ячейки или текста, определяя, какие ячейки будут засчитываться. Например, критерии могут быть выражены как 32, "32", &gt; "32", "яблоки" или B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Подсчитывают количество ячеек в диапазоне, отвечаемом нескольким критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Каждая ячейка в диапазоне считается только в том случае, если все указанные критерии соответствуют действительности для этой ячейки. </para>
          <para>Если ячейка в любом аргументе является пустой ячейкой, <b>CountIfs</b> рассматривает ее как значение 0. </para>
          <para>В критериях можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Количество выплат купона в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg4">Тип базы для подсчета дня.</param>
        <summary>Возвращает количество дней с начала купонного периода до даты урегулирования.</summary>
        <returns>To be added.</returns>
        <remarks><para>В следующей таблице содержится список значений <paramref name="Arg4" /> для .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска будет 1 января 2008 г., дата урегулирования - 1 июля 2008 г., а срок погашения - 1 января 2038 г. через 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>coupDayBs</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupDayBs</b> создает ошибку. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>coupDayBs</b> создает ошибку. </para>
          <para>Если расчет ≥, <b>coupDayBs</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Количество выплат купона в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg4">Тип базы для подсчета дня.</param>
        <summary>Возвращает количество дней в период купона, содержащий дату урегулирования.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>coupDays</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupDays</b> создает ошибку. </para>
          <para>Если основание &lt; 0 или если база &gt; 4, <b>coupDays</b> создает ошибку. </para>
          <para>Если расчет ≥, <b>coupDays</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Количество выплат купона в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg4">Тип базы для подсчета дня.</param>
        <summary>Возвращает количество дней с даты урегулирования до следующей даты купона.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>coupDaysNc</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupDaysNc</b> создает ошибку. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>coupDaysNc</b> создает ошибку. </para>
          <para>Если расчет ≥, <b>coupDaysNc</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Количество выплат купона в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg4">Тип базы для подсчета дня.</param>
        <summary>Возвращает номер, который представляет следующую дату купона после даты урегулирования.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>coupNcd</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupNcd</b> создает ошибку. </para>
          <para>Если основание &lt; 0 или если база &gt; 4, <b>coupNcd</b> создает ошибку. </para>
          <para>Если расчет ≥, <b>coupNcd</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Количество выплат купона в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg4">Тип базы для подсчета дня.</param>
        <summary>Возвращает количество купонов, уплачиваться между датой урегулирования и датой погашения, округлившись до ближайшего всего купона.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>coupNum</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupNum</b> создает ошибку. </para>
          <para>Если основание &lt; 0 или если база &gt; 4, <b>coupNum</b> создает ошибку. </para>
          <para>Если расчет ≥, <b>coupNum</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Количество выплат купона в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg4">Тип базы для подсчета дня.</param>
        <summary>Возвращает предыдущую дату купона до даты урегулирования.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>coupPcd</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupPcd</b> создает ошибку. </para>
          <para>Если основание &lt; 0 или если база &gt; 4, <b>CoupPcd</b> создает ошибку. </para>
          <para>Если расчет ≥, <b>coupPcd</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Первый диапазон целлюлозой ячейки.</param>
        <param name="Arg2">Второй диапазон целлюлозой ячейки.</param>
        <summary>Возвращает covariance, среднее значение продуктов отклонений для каждой пары точеки данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> методе и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> методе.</para>
          <para>Используйте covariance, чтобы определить связь между двумя наборами данных. Например, вы можете проверить, сопровождает ли более высокий доход более высокий уровень образования. </para>
          <para>Аргументами должны быть либо цифры, либо имена, массивы или ссылки, содержащие цифры. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если <paramref name="Arg1" /> количество <paramref name="Arg2" /> точек данных разное, <b>Covar</b> создает ошибку. </para>
          <para>Если либо <paramref name="Arg1" /> <paramref name="Arg2" /> пуст, <b>то Covar</b> создает ошибку. </para>
          <para>Covariance: </para>
          <para>Рис. 1. Уравнение для коварианса</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются пример средствами AVERAGE (array1) и AVERAGE (array2), а n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Первый диапазон целлюлозой ячейки.</param>
        <param name="Arg2">Второй диапазон целлюлозой ячейки.</param>
        <summary>Возвращает коварианс населения, среднее значение продуктов отклонений для каждой пары точеки данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>Covariance_P,</b> чтобы определить связь между двумя наборами данных. Например, вы можете проверить, сопровождает ли более высокий доход более высокий уровень образования.</para>
          <para>Аргументами должны быть либо цифры, либо имена, массивы или ссылки, содержащие цифры. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если количество точек данных разное, Covariance_P <paramref name="Arg1" /> <paramref name="Arg2" /> создает ошибку. <b></b> </para>
          <para>Если либо <paramref name="Arg1" /> <paramref name="Arg2" /> пусто, <b>Covariance_P</b> создает ошибку. </para>
          <para>Covariance: </para>
          <para>Рис. 1. Уравнение для коварианса</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются пример средствами AVERAGE (array1) и AVERAGE (array2), а n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый диапазон целлюлозой ячейки.</param>
        <param name="Arg2">Array2 — второй диапазон целлюлозой ячейки.</param>
        <summary>Возвращает пример covariance, среднее значение продуктов отклонений для каждой пары точеки данных в двух наборах данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть либо цифры, либо имена, массивы или ссылки, содержащие цифры. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если у array1 и array2 <b>разное</b> число точек данных, Covariance_S возвращает значение #N/ошибки. </para>
          <para>Если массив1 или array2 пуст или содержит только 1 <b>точку</b> данных каждый, Covariance_S возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает 32-битное целое число, указывающее на приложение, в котором объект был создан. Только для чтения <b>в integer</b> (int in C#).</summary>
        <value>To be added.</value>
        <remarks><para>Если объект был создан в Microsoft Excel, это свойство возвращает строку XCEL, эквивалентную hexadecimal number 5843454C. Свойство <b>Creator</b> предназначено для использования в Microsoft Excel Macintosh, где каждое приложение имеет код создателя из четырех символов. Например, Microsoft Excel имеет код создателя XCEL.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество проб Бернулли.</param>
        <param name="Arg2">Вероятность успеха в каждом пробном процессе.</param>
        <param name="Arg3">Значение критерия.</param>
        <summary>Возвращает наименьшее значение, для которого совокупное биномное распределение больше или равно значению критерия.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте эту функцию для приложений для обеспечения качества. Например, используйте <b>CritBinom,</b> чтобы определить наибольшее количество неисправных частей, которые могут выйти из конвейера, не отклонив весь лот.</para>
          <para>Если какой-либо аргумент является ненумерным, <b>critBinom</b> создает ошибку. </para>
          <para>Если пробные процессы не являются неоконченными, они усечены. </para>
          <para>При &lt; пробных версиях 0 <b>critBinom</b> создает ошибку. </para>
          <para>Если probability_s &lt; 0 или probability_s &gt; 1, <b>CritBinom</b> создает ошибку. </para>
          <para>Если &lt; альфа-0 или &gt; альфа-1, <b>CritBinom</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен cosecant.</param>
        <summary>Возвращает cosecant угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен гиперболический косекан.</param>
        <summary>Возвращает гиперболический cosecant угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Процентная ставка.</param>
        <param name="Arg2">Общее количество периодов оплаты.</param>
        <param name="Arg3">Настоящее значение.</param>
        <param name="Arg4">Первый период в расчете. Периоды оплаты про номера начинаются с 1.</param>
        <param name="Arg5">Последний период в расчете.</param>
        <param name="Arg6">Сроки оплаты.</param>
        <summary>Возвращает совокупные проценты по кредиту между start_period и end_period.</summary>
        <returns>To be added.</returns>
        <remarks><para>В следующих таблицах перечислены значения, используемые в <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (ноль)</term>
              <description>Оплата в конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>Оплата в начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту с годовой процентной ставкой 12 процентов, используйте 12%/12 для ставки и 4*12 для <paramref name="Arg2" /> . Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> <paramref name="Arg5" /> , и тип усечены до integers. </para>
          <para>Если коэффициент ≤, ≤ <paramref name="Arg2" /> 0 или ≤ <paramref name="Arg3" /> 0, <b>CumIPmt</b> создает ошибку. </para>
          <para>Если <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 или <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> <b>CumIPmt</b> создает ошибку. </para>
          <para>Если <paramref name="Arg6" /> число не превышает 0 или 1, <b>CumIPmt</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Процентная ставка.</param>
        <param name="Arg2">Общее количество периодов оплаты.</param>
        <param name="Arg3">Настоящее значение.</param>
        <param name="Arg4">Первый период в расчете. Периоды оплаты про номера начинаются с 1.</param>
        <param name="Arg5">Последний период в расчете.</param>
        <param name="Arg6">Последний период в расчете.</param>
        <summary>Возвращает накопительную сумму, уплаченную по кредиту между start_period и end_period.</summary>
        <returns>To be added.</returns>
        <remarks><para>В следующих таблицах перечислены значения, используемые в <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (ноль)</term>
              <description>Оплата в конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>Оплата в начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту с годовой процентной ставкой 12 процентов, используйте 12%/12 для ставки и 4*12 для <paramref name="Arg2" /> . Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> <paramref name="Arg5" /> , и тип усечены до integers. </para>
          <para>Если коэффициент ≤, ≤ <paramref name="Arg2" /> 0 или <paramref name="Arg3" /> ≤ 0, <b>CumPrinc</b> создает ошибку. </para>
          <para>Если <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 или <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> <b>CumPrinc</b> создает ошибку. </para>
          <para>Если <paramref name="Arg6" /> число не превышает 0 или 1, <b>CumPrinc</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Среднее значение значений в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись текста или значения, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date (Arg2) и end_date (Arg1) — это две даты, между которыми необходимо знать количество дней.</param>
        <param name="Arg2">start_date (Arg2) и end_date (Arg1) — это две даты, между которыми необходимо знать количество дней.</param>
        <summary>Возвращает количество дней между двумя датами.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Две даты, между которыми нужно знать количество дней. Если start_date (Arg1) происходит после end_date (Arg2), Days360 возвращает отрицательное число. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций.</param>
        <param name="Arg2">Две даты, между которыми нужно знать количество дней. Если start_date (Arg1) происходит после end_date (Arg2), Days360 возвращает отрицательное число. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций.</param>
        <param name="Arg3">Значение Boolean, которое указывает, следует ли использовать американский или европейский метод в вычислении.</param>
        <summary>Возвращает количество дней между двумя датами на основе 360-дневного года (двенадцать 30-дневных месяцев), который используется в некоторых расчетах бухгалтерского учета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте эту функцию для вычисления платежей, если система учета основана на 12 30-дневных месяцах. В следующих таблицах содержатся значения <paramref name="Arg3" /> для .</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> or omitted</term>
              <description>U.S. (NASD) метод. Если дата начала 31-го месяца, она становится равно 30-й в том же месяце. Если дата окончания — 31-е место месяца, а дата начала — раньше 30-го месяца, дата окончания будет равна 1-му в следующем месяце; в противном случае дата окончания становится равно 30-й в том же месяце.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Европейский метод. Даты начала и окончания, которые происходят 31-го месяца, становятся равными 30-му месяцу.</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — это значение в конце амортизации (иногда называемое спасательный значение актива).</param>
        <param name="Arg3">Жизнь — количество периодов, в течение которых актив амортизации (иногда называются полезным сроком службы актива).</param>
        <param name="Arg4">Период — период, за который необходимо рассчитать амортизация. Период должен использовать те же единицы, что и жизнь.</param>
        <param name="Arg5">Месяц — количество месяцев в первый год. Если месяц пропущен, предполагается, что его будет 12.</param>
        <summary>Возвращает амортизация актива за указанный период с помощью метода фиксированного снижения баланса.</summary>
        <returns>To be added.</returns>
        <remarks><para>Метод фиксированного снижения баланса вычисляет амортизация с фиксированной скоростью. DB использует следующие формулы для вычисления амортизации за период:</para>
          <para>(стоимость — общее амортизация от предыдущих периодов) *</para>
          <para>где:</para>
          <para>rate = 1 - (((salvage / cost) ^ (1 / life)), округлив до трех десятичных мест</para>
          <para>Амортизация для первого и последнего периодов является особым случаем. В первом периоде DB использует эту формулу:</para>
          <para>цена * ставка * месяц / 12</para>
          <para>В течение последнего периода DB использует эту формулу:</para>
          <para>((стоимость — полное амортизация от предыдущих периодов) * ставка * (12 - месяц)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст или ссылка на ячейку, содержаную текст, который необходимо изменить.</param>
        <summary>Преобразует буквы половинной ширины (однобайт) в строке символов в символы с полной шириной (с двойным byte). Имя функции (и символы, которые она преобразует) зависит от параметров языка.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если аргумент содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указано условие столбца.</param>
        <summary>Подсчитывают ячейки, содержащие номера в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Подсчитываю неблагодарные ячейки в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — это значение в конце амортизации (иногда называемое спасательный значение актива). Это значение может быть 0.</param>
        <param name="Arg3">Жизнь — количество периодов, в течение которых актив амортизации (иногда называются полезным сроком службы актива).</param>
        <param name="Arg4">Период — период, за который необходимо рассчитать амортизация. Период должен использовать те же единицы, что и жизнь.</param>
        <param name="Arg5">Фактор — скорость, с которой снижается баланс. Если фактор опущен, предполагается, что это 2 (метод двойного снижения баланса).</param>
        <summary>Возвращает амортизация актива за указанный период с помощью метода балансирования с двойным снижением или другого метода, который вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>все пять аргументов должны быть положительными числами.</para>
          <para>Метод двойной амортизации убывающего баланса вычисляет амортизацию с ускоренной ставкой. Амортизация максимальна за первый период и уменьшается в последующие периоды. <b>Ddb</b> использует следующую формулу для вычисления амортизации за период:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Измените фактор, если вы не хотите использовать метод двойного снижения баланса. </para>
          <para>Используйте функцию, если вы хотите перейти к методу амортизации прямой линии, если амортизация больше, чем при расчете <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> балансирования.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — десятичной целый ряд, который необходимо преобразовать. Если число отрицательное, допустимые значения места игнорируются, и <b>Dec2Bin</b> возвращает 10-символов (10-битный) двоичный номер, в котором наиболее важным битом является бит знака. Остальные 9 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>dec2Bin</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует десятичный номер в двоичный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер &lt; -512 или номер &gt; 511, <b>dec2Bin</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число не является числумным, <b>Dec2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если <b>dec2Bin</b> требует больше, чем мест символов, он возвращает #NUM! значение ошибки. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>Dec2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если количество мест нулевое или отрицательное, <b>dec2Bin</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — десятичной целый ряд, который необходимо преобразовать. Если число отрицательное, места игнорируются, и <b>Dec2Hex</b> возвращает 10-символ (40-битный) гексадецимальный номер, в котором наиболее важным битом является бит знака. Остальные 39 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>dec2Hex</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует десятичной номер в hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если &lt; номер -549 755 813 888 или &gt; номер 549 755 813 887, <b>dec2Hex</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число не числимо, <b>Dec2Hex</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если <b>dec2Hex</b> требует больше, чем места символов, он возвращает #NUM! значение ошибки. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>dec2Hex</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Dec2Hex</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — десятичной целый ряд, который необходимо преобразовать. Если число отрицательное, места игнорируются, и <b>dec2Oct</b> возвращает 10-символов (30-битный) восьмиугольный номер, в котором наиболее важным битом является бит знака. Остальные 29 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>dec2Oct</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует десятичной номер в восьмиканальный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если &lt; номер -536 870 912 или &gt; номер 536 870 911, <b>dec2Oct</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число ненумерное, <b>dec2Oct</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если <b>dec2Oct</b> требуется больше, чем места символов, он возвращает #NUM! значение ошибки. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>dec2Oct</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>dec2Oct</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер, который необходимо преобразовать.</param>
        <param name="Arg2">Базовый радикс номера, который вы преобразуете.</param>
        <summary>Преобразует текстовое представление номера в заданной базе в десятичной номер.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол — угол в радианах, который необходимо преобразовать.</param>
        <summary>Преобразует радианы в градусы.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 — первый номер.</param>
        <param name="Arg2">Number2 — второй номер. Если опущен, номер 2 считается нулем.</param>
        <summary>Проверяет, равны ли два значения. Возвращает 1, если номер1 = number2; возвращает 0 в противном случае.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте эту функцию для фильтрации набора значений. Например, подводя несколько функций <b>Delta,</b> вы рассчитываете количество одинаковых пар. Эта функция также называется функцией дельты Кронекера.</para>
          <para>Если номер 1 не числим, <b>Delta</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если номер 2 является ненумерным, <b>Delta</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... — это аргументы от 1 до 30, для которых необходимо рассчитать сумму отклонений в квадрате. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает сумму квадратов отклонений точек данных из их примерного средства.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Уравнение для суммы отклонений в квадрате: </para>
          <para>Рис. 1. Уравнение для суммы отклонений в квадрате</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Извлекает одно значение из столбца списка или базы данных, которое соответствует условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Pr — это цена безопасности за $100 номина.</param>
        <param name="Arg4">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg5">База — тип базы для подсчета дня.</param>
        <summary>Возвращает учетную ставку для безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста. </para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска будет 1 января 2008 г., дата урегулирования - 1 июля 2008 г., а срок погашения - 1 января 2038 г. через 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость и основа усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не является допустимым серийным номером даты, <b>Диск</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если pr ≤ 0 или ≤ 0, <b>диск</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>диск</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>диск</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Диск</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для вычисления метода Disc</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DSM = количество дней между расчетом и зрелостью.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Возвращает наибольшее число в столбце списка или базы данных, которое соответствует условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Возвращает наименьшее число в столбце списка или базы данных, которое соответствует условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — это число, ссылка на ячейку, содержащую номер, или формула, которая оценивает число.</param>
        <param name="Arg2">Decimals — число цифр справа от десятичной точки. Если десятичной знак отрицательный, число округлено слева от десятичной точки. Если вы не закроет десятичных знаков, предполагается, что это будет 2.</param>
        <summary>Функция, описанная в этом разделе Справка, преобразует номер в текстовый формат и применяет символ валюты. Имя функции (и символ, который она применяет) зависит от параметров языка.</summary>
        <returns>To be added.</returns>
        <remarks><para>Главное различие между форматированием ячейки, содержаной номер с командой Cells (Меню формата) <b></b> и форматированием номера непосредственно с функцией <b>Доллар,</b> состоит в том, что доллар преобразует результат в текст. Число, отформатированные с командой Cells, по-прежнему является числом. Вы можете продолжать использовать цифры, отформатированные с долларом в формулах, так как Microsoft Excel, вступив в качестве текстовых значений, в цифры при расчете. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fractional_dollar — это число, выраженное в качестве доли.</param>
        <param name="Arg2">Дробь — это часть, используемая в знаменателе фракции.</param>
        <summary>Преобразует долларовую цену, выраженную в качестве доли, в цену доллара, выраженную как десятичная. Используйте DOLLARDE для преобразования дробных долларовых номеров, таких как цены на ценные бумаги, в десятичных номерах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если фракция не является частью, она усечена. </para>
          <para>Если доля меньше 0, <b>DollarDe</b> возвращает #NUM! значение ошибки. </para>
          <para>Если доля 0, <b>DollarDe</b> возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Decimal_dollar — это десятичной номер.</param>
        <param name="Arg2">Дробь — это часть, используемая в знаменателе фракции.</param>
        <summary>Преобразует долларовую цену, выраженную в качестве десятичной, в цену доллара, выраженную в качестве доли. Используйте DOLLARFR для преобразования десятичных номеров в дробные долларовые номера, например цены на ценные бумаги.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если фракция не является частью, она усечена. </para>
          <para>Если доля меньше 0, <b>DollarFr</b> возвращает #NUM! значение ошибки. </para>
          <para>Если доля 0, <b>DollarFr</b> возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — это диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критериями является диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Умножает значения в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Оценивает стандартное отклонение населения на основе примера с помощью номеров в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — это диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Вычисляет стандартное отклонение населения на основе всего населения с помощью номеров в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Добавляет числа в столбец списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Купон — годовая ставка купона безопасности.</param>
        <param name="Arg4">Yld — годовая доходность безопасности.</param>
        <param name="Arg5">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg6">База — тип базы для подсчета дня.</param>
        <summary>Возвращает длительность Macauley для предполагаемого номина $ 100. Продолжительность определяется как средневзвешяемая величина нынешнего значения денежных потоков и используется в качестве меры реакции цены облигаций на изменение доходности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость, частота и основа усечены до уровня в несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>duration</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если купон &lt; 0 или yld &lt; 0, <b>duration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>продолжительность</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>duration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>duration</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Оценка дисперсии населения на основе примера с помощью номеров в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, которые составляет список или базу данных. База данных — это список связанных данных, в которых строки связанных сведений являются записями, а столбцы данных — полями. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как "Age" или "Yield", или номером (без кавычка), который представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указываете. Для аргумента критериев можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и по крайней мере одну ячейку ниже метки столбца, в которой указывается условие столбца.</param>
        <summary>Вычисляет дисперсию населения на основе всего населения с помощью номеров в столбце списка или базы данных, которые соответствуют условиям, которые вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как равный знак используется для указать формулу при введите текст или значение в ячейке, Microsoft Excel, что вы введите; однако это может привести к неожиданным результатам фильтрации. Чтобы указать оператора сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне критериев: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не проводится различие между символами верхнего и нижнего регистров. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</param>
        <param name="Arg2">Месяцы — количество месяцев до или после start_date. Положительное значение в течение нескольких месяцев дает будущую дату; отрицательное значение дает прошлое значение.</param>
        <summary>Возвращает серийный номер, который представляет дату, указанную за несколько месяцев до или после указанной даты (start_date). Используйте EDATE, чтобы рассчитать даты или сроки погашения, которые выпадают в тот же день месяца, что и дата выпуска.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если start_date не является допустимой датой, <b>EDate</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если месяцы не являются неоконченными, они усечены.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nominal_rate — номинальная процентная ставка.</param>
        <param name="Arg2">Npery — количество периодов соединения в год.</param>
        <summary>Возвращает эффективную годовую процентную ставку, учитывая номинальную годовую процентную ставку и количество периодов соединения в год.</summary>
        <returns>To be added.</returns>
        <remarks><para>Npery усечен до integer. </para>
          <para>Если один из аргументов не является числим, <b>Effect</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если nominal_rate ≤ 0 или npery &lt; 1, <b>Effect</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Эффект</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для вычисления метода Effect</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст, который необходимо закодировать.</param>
        <summary>URL-адрес кодирует аргумент.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</param>
        <param name="Arg2">Месяцы — количество месяцев до или после start_date. Положительное значение в течение нескольких месяцев дает будущую дату; отрицательное значение дает прошлое значение.</param>
        <summary>Возвращает серийный номер за последний день месяца, который является указанным числом месяцев до или после start_date. Используйте EOMONTH для расчета дат или сроков погашения, которые падают в последний день месяца.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если start_date не является допустимой датой, <b>EoMonth</b> возвращает #NUM! значение ошибки. </para>
          <para>Если start_date месяцев дает недействительные даты, <b>EoMonth</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit — нижняя граница для интеграции <b>Erf</b>.</param>
        <param name="Arg2">Upper_limit — верхняя граница для интеграции <b>Erf</b>. Если значение опущено, Erf интегрируется между нулями и lower_limit.</param>
        <summary>Возвращает функцию ошибки, интегрированную между lower_limit и upper_limit.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> методе.</para>
          <para>Если lower_limit является ненумерным, <b>Erf</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если lower_limit отрицательный, <b>Erf</b> возвращает #NUM! значение ошибки. </para>
          <para>Если upper_limit является ненумерным, <b>Erf</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если upper_limit отрицательный, <b>Erf</b> возвращает #NUM! значение ошибки. </para>
          <para>Рис. 1. Уравнение для вычисления метода Erf</para>
          <para> </para>
          <para> </para>
          <para>Рис. 2. Уравнение для вычисления метода Erf</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit — нижняя граница интеграции ERF.</param>
        <summary>Возвращает функцию ошибки, интегрированную между нулями и lower_limit.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если lower_limit является ненумерным, <b></b> Erf_Precise создает ошибку. Если lower_limit отрицательный, <b>Erf_Precise</b> создает ошибку.</para>
          <para>Рис. 1. Уравнение для вычисления Erf_Precise метода</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Первый аргумент.</param>
        <summary>Возвращает дополнительную функцию ERF, интегрированную между указанным параметром и бесконечностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> методе.</para>
          <para>Если эта функция недоступна и возвращает #NAME? ошибка, необходимо установить и загрузить надстройку Analysis ToolPak.</para>
          <para>Если параметр является ненумерным, <b>ErfC</b> возвращает #VALUE! значение ошибки.</para>
          <para>Если параметр отрицательный, <b>ErfC</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, необходимое для вычисления.</param>
        <summary>Возвращает функцию дополнительной ошибки, интегрированную между указанным значением и бесконечностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если указанное значение является ненумерным, <b></b> ErfC_Precise создает ошибку.</para>
          <para>Если указанное значение отрицательное, <b>ErfC_Precise</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение к округл.</param>
        <summary>Возвращает число, округлившись до ближайшего даже integer. Эту функцию можно использовать для обработки элементов, которые приходят в два. Например, ящик упаковки принимает строки одного или двух элементов. Ящик заполнен, когда количество элементов, округлилось до ближайших двух, совпадает с емкостью ящика.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не числимый, <b>даже</b> возвращает #VALUE! значение ошибки. </para>
          <para>Независимо от знака номера, значение округляется при отрегулировании от нуля. Если число является 10-м числом, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение функции.</param>
        <param name="Arg2">Lambda — это значение параметра.</param>
        <param name="Arg3">Накопительное значение — логическое значение, которое указывает, какую форму экспоненциальной функции предоставить. Если <b>кумулятивная</b>Expon_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает экспоненциальное распределение. Используйте EXPON_DIST для моделирования времени между событиями, например, сколько времени занимает автоматический кассир банка для доставки наличных средств. Например, вы можете использовать EXPON_DIST, чтобы определить вероятность того, что процесс занимает не более 1 минуты.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x или lambda не <b>числен,</b> Expon_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Expon_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если лямбда ≤ 0, <b>Expon_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности вероятности: </para>
          <para>Рис. 1. Уравнение для функции плотности вероятности</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для накопительной функции распределения:</para>
          <para>Рис. 2. Уравнение для накопительной функции распределения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение функции.</param>
        <param name="Arg2">Lambda — это значение параметра.</param>
        <param name="Arg3">Накопительное значение — логическое значение, которое указывает, какую форму экспоненциальной функции предоставить. Если <b>кумулятивный показатель является верным,</b> <b>ExponDist</b> возвращает накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает экспоненциальное распределение. Используйте <b>ExponDist,</b> чтобы смоделизировать время между событиями, например, сколько времени занимает автоматический кассир банка для доставки наличных средств. Например, вы можете использовать <b>ExponDist</b> для определения вероятности, что процесс занимает не более 1 минуты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x или lambda не числен, <b>ExponDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>ExponDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если lambda ≤ 0, <b>ExponDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности вероятности: </para>
          <para>Рис. 1. Уравнение для функции плотности вероятности</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для накопительной функции распределения:</para>
          <para>Рис. 2. Уравнение для накопительной функции распределения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение для оценки функции.</param>
        <param name="Arg2">Deg_freedom1 — числовая степень свободы.</param>
        <param name="Arg3">Deg_freedom2 — знаменательные степени свободы.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>F_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает распределение вероятностей F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, F_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, <b>F_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom1 или deg_freedom2 не является неинтегрированной, она усечена. </para>
          <para>Если deg_freedom1 &lt; 1, <b>F_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom &lt; 1, <b>F_Dist</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение для оценки функции.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свободы.</param>
        <param name="Arg3">Degrees_freedom2 — знаменательные степени свободы.</param>
        <summary>Возвращает правохвое распределение вероятности F. С помощью этой функции можно определить, имеют ли два набора данных разной степени разнообразия. Например, вы можете изучить результаты тестирования мужчин и женщин, вступая в школу, и определить, отличается ли вариативность у женщин от результатов, найденных у мужчин.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, F_Dist_RT возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, <b>F_Dist_RT</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является неинтегрированной, она усечена. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b></b> F_Dist_RT возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 или degrees_freedom2 ≥ 10^10, <b></b> F_Dist_RT возвращает #NUM! значение ошибки. </para>
          <para>
            <b>F_Dist_RT</b> вычисляется как F_DIST_RT=P (F x), где F — это случайная переменная с распределением F с degrees_freedom1 и &gt; degrees_freedom2 степенями свободы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с кумулятивным распределением F.</param>
        <param name="Arg2">Deg_freedom1 — числовая степень свободы.</param>
        <param name="Arg3">Deg_freedom2 — знаменательные степени свободы.</param>
        <summary>Возвращает обратное распределение вероятности F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, F_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или вероятность &lt; 1, F_Inv &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если deg_freedom1 или deg_freedom2 не является неинтегрированной, она усечена. </para>
          <para>Если deg_freedom1 &lt; 1 или deg_freedom2 1, F_Inv возвращает &lt; #NUM! <b></b> значение ошибки. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — это вероятность, связанная с накопительным распределением F.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свободы.</param>
        <param name="Arg3">Degrees_freedom2 — знаменательные степени свободы.</param>
        <summary>Возвращает обратное распределение вероятности F с правой хвостовой частью. Если p = F_DIST_RT (x,...), F_INV_RT (p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Распределение F можно использовать в F-тесте, который сравнивает степень вариативности в двух наборах данных. Например, можно проанализировать распределение доходов в США и Канаде, чтобы определить, имеют ли эти две страны аналогичную степень разнообразия доходов.</para>
          <para>Если какой-либо аргумент является <b></b> ненумерным, F_Inv_RT возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; &gt; <b>вероятность</b> 1, F_Inv_RT возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является неинтегрированной, она усечена. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b></b> F_Inv_RT возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 или degrees_freedom2 ≥ 10^10, <b></b> F_Inv_RT возвращает #NUM! значение ошибки.</para>
          <para>
            <b>F_Inv_RT</b> можно использовать для возврата критически важных значений из распределения F. Например, выход вычисления ANOVA часто включает данные для статистики F, вероятности F и критического значения F на уровне 0,05 значения. Чтобы вернуть критическое значение F, используйте уровень значения в качестве аргумента <b>вероятности</b>для F_Inv_RT .</para>
          <para>Учитывая значение вероятности, <b>F_Inv_RT</b> ищет такое значение x, которое F_DIST_RT (x, degrees_freedom1, degrees_freedom2) = вероятность. Таким образом, <b>точность F_Inv_RT</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> . <b>F_Inv_RT</b> использует итеративный метод поиска. Если поиск не сошелся после 64 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый массив или диапазон данных.</param>
        <param name="Arg2">Array2 — второй массив или диапазон данных.</param>
        <summary>Возвращает результат F-test. F-тест возвращает двухвостые вероятности того, что отклонения в array1 и array2 существенно не отличаются. Используйте эту функцию, чтобы определить, имеют ли два примера различные отклонения. Например, с учетом результатов тестирования в государственных и частных школах можно проверить, отличаются ли эти школы от разных уровней.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы должны быть числами, именами, массивами или ссылками, содержами цифры. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если количество точек данных в array1 или array2 меньше 2, или если отклонение массива1 или array2 <b>нулевое,</b> F_Test возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — ненегативный номер, который необходимо на факториале. Если номер не является числом, оно усечено.</param>
        <summary>Возвращает факториальный номер. Коэффициент номера равен 1 *2 3**...*</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение, для которого необходимо вернуть двойной факториал. Если номер не является числом, оно усечено.</param>
        <summary>Возвращает двойной факториал номера.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не числов, <b>factDouble</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если число отрицательное, <b>factDouble</b> возвращает #NUM! значение ошибки. </para>
          <para>Если номер even: </para>
          <para>Рис. 1. Уравнение для даже</para>
          <para> </para>
          <para> </para>
          <para>Если номер нечетный:</para>
          <para>Рис. 2. Уравнение для нечетных</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение для оценки функции.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свободы.</param>
        <param name="Arg3">Degrees_freedom2 — знаменательные степени свободы.</param>
        <summary>Возвращает распределение вероятностей F. С помощью этой функции можно определить, имеют ли два набора данных разной степени разнообразия. Например, вы можете изучить результаты тестирования мужчин и женщин, вступая в школу, и определить, отличается ли вариативность у женщин от результатов, найденных у мужчин.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методах.</para>
          <para>Если какой-либо аргумент является ненумерным, <b>FDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, <b>FDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является неинтегрированной, она усечена. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b>FDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 или degrees_freedom2 ≥ 10^10, <b>FDist</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>FDist</b> вычисляется как FDIST=P (F x), где F — это случайная переменная с распределением F с degrees_freedom1 и &gt; degrees_freedom2 степенью свободы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Допустимая строка xml.</param>
        <param name="Arg2">Строка запросов XPath.</param>
        <summary>Получите конкретные данные из возвращенного XML, как правило, из вызова <b>функции WebService.</b></summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>Параметр XPath ограничен 1024 символами.</para>
          <para>Функция <b>FILTERXML</b> возвращает результаты, которые анализются с помощью указанного пользователем локального центра данных.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Имя таблицы.</param>
        <param name="Arg2">Имя диапазона.</param>
        <param name="Arg3">Имя аргумента для уточнения поиска.</param>
        <summary>Поиск определенных сведений в таблице.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text — текст, который вы хотите найти.</param>
        <param name="Arg2">Within_text — текст, содержащий текст, который необходимо найти.</param>
        <param name="Arg3">Start_num — указывает символ, с которого необходимо начать поиск. Первый символ в within_text — это символ Номер 1. Если вы не start_num, предполагается, что это будет 1.</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /><b>и FindB</b> находят одну текстовую строку во второй строке текста и возвращают число исходной позиции первой строки текста из первого символа второй строки текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>предназначен для использования с языками с набором символов с одним byte (SBCS), в то время как FindB предназначен для использования с языками, которые используют набор символов с двойным битом <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> (DBCS). <b></b> Параметр языка по умолчанию на компьютере влияет на возвратное значение следующим образом:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> всегда подсчитываю каждый символ, будь то один-byte или double-byte, как 1, независимо от того, какой параметр языка по умолчанию.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> подсчитываю каждый двухбайтный символ в качестве 2, если вы включили редактирование языка, поддерживаюного DBCS, а затем установите его в качестве языка по умолчанию. В <b>противном случае FindB</b> считает каждый символ 1.</description>
            </item>
          </list>
          <para>Языки, поддерживают DBCS, включают японский, китайский (упрощенный), китайский (традиционный) и корейский. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> и <b>FindB</b> являются деликатными и не позволяют символам подкарды. Если вы не хотите делать конфиденциальный поиск по делу или использовать символы под диктовки, вы можете <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> использовать и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> . </para>
          <para>Если find_text "" (пустой текст), соответствует первому символу строки поиска (то есть символу с номером <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> start_num или 1). </para>
          <para>Find_text не может содержать каких-либо символов под диктовки. </para>
          <para>Если find_text не появится в within_text, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>и FindB</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если start_num не больше нуля, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>и FindB</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если start_num больше, чем длина within_text, и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> возвращает #VALUE! значение ошибки. </para>
          <para>Используйте start_num, чтобы пропустить определенное количество символов. В <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> качестве примера предположим, что вы работаете с текстовой строкой "AYF0093. YoungMensApparel". Чтобы найти номер первого "Y" в описательной части текстовой строки, start_num равно 8, чтобы не было поиска последовательной части текста. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> начинается с символа 8, находит find_text в следующем символе и возвращает номер 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> всегда возвращает количество символов с начала within_text, считая символы, которые вы пропускаете, если start_num больше 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — это вероятность, связанная с накопительным распределением F.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свободы.</param>
        <param name="Arg3">Degrees_freedom2 — это знаменательные степени свободы.</param>
        <summary>Возвращает обратное распределение вероятности F. Если p = FDIST (x,...), то FINV (p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> методах.</para>
          <para>Распределение F можно использовать в F-тесте, который сравнивает степень вариативности в двух наборах данных. Например, можно проанализировать распределение доходов в США и Канаде, чтобы определить, имеют ли эти две страны аналогичную степень разнообразия доходов.</para>
          <para>Если какой-либо аргумент не является числовым, <b>FInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>FInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является неинтегрированной, она усечена. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b>FInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 или degrees_freedom2 ≥ 10^10, <b>FInv</b> возвращает #NUM! значение ошибки.</para>
          <para>
            <b>FInv</b> можно использовать для возврата критически важных значений из распределения F. Например, выход вычисления ANOVA часто включает данные для статистики F, вероятности F и критического значения F на уровне 0,05 значения. Чтобы вернуть критическое значение F, используйте уровень значения в качестве аргумента вероятности <b>для FInv</b>.</para>
          <para>Учитывая значение вероятности, <b>FInv</b> ищет это значение x таким образом, что FDIST (x, degrees_freedom1, degrees_freedom2) = вероятность. Таким образом, точность <b>FInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> . <b>FInv</b> использует итеративный метод поиска. Если поиск не сошелся после 64 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x — числовая величина, для которой необходимо преобразование.</param>
        <summary>Возвращает преобразование Фишера на x. Это преобразование создает функцию, которая обычно распространяется, а не перекос. Используйте эту функцию для тестирования гипотез на коэффициенте корреляции.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x является ненумерным, <b>Фишер</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ -1 или x ≥ <b>1,</b> Фишер возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для преобразования Фишера:</para>
          <para>Рис. 1. Уравнение для преобразования Фишера</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y — значение, для которого необходимо выполнить обратное преобразование.</param>
        <summary>Возвращает обратное преобразование Фишера. Используйте это преобразование при анализе корреляций между диапазонами или массивами данных. Если y = FISHER(x), то FISHERINV (y) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если y не является числовым, <b>FisherInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Уравнение обратного преобразования Фишера:</para>
          <para>Рис. 1. Уравнение для обратного преобразования Фишера</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — число, необходимое для округлить и преобразовать в текст.</param>
        <param name="Arg2">Decimals — число цифр справа от десятичной точки.</param>
        <param name="Arg3">No_commas — логическое значение, которое, если <b></b> <b>верно,</b>предотвращает включить запятые в возвращенный текст.</param>
        <summary>Округляет число до указанного числа десятичных запятых, форматирует число в десятичной форме с помощью периода и запятых и возвращает результат в виде текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>Цифры Microsoft Excel не могут иметь более 15 значимых цифр, но десятичных цифр может быть не более 127. </para>
          <para>Если десятичной знак отрицательный, число округлено слева от десятичной точки. </para>
          <para>Если вы не закроет десятичных знаков, предполагается, что это будет 2. </para>
          <para>Если no_commas является <b>ложным</b> или пропущенным, возвращенный текст включает запятые, как обычно. </para>
          <para>Главное различие между форматированием ячейки, содержащей номер с командой Cells (Меню формата) и форматированием номера непосредственно с функцией FIXED, состоит в том, что <b>Fixed</b> преобразует результат в текст. Число, отформатированные с командой Cells, по-прежнему является числом.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — числовое значение, необходимое для округлить.</param>
        <param name="Arg2">Значение — это несколько вариантов, к которым необходимо объехать.</param>
        <summary>Число раундов вниз, к нулю, до ближайшего множественного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> методе.</para>
          <para>Если один из аргументов является ненумерным, <b>Floor</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если число и значение имеют различные знаки, <b>Floor</b> возвращает #NUM! значение ошибки. </para>
          <para>Независимо от знака номера значение округляется при отрегулировании от нуля. Если число имеет точное значение, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, необходимое для округли.</param>
        <param name="Arg2">Несколько, к которым нужно обкрутки.</param>
        <param name="Arg3">При незеровом номере эта функция будет округляться до нуля.</param>
        <summary>Округлит число вниз, в ближайшую часть или к ближайшему множеству значений.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — числовое значение, необходимое для округлить.</param>
        <param name="Arg2">Значение — это несколько вариантов, к которым необходимо объехать.</param>
        <summary>Округить указанное число до ближайшего множественного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>В зависимости от знака аргументов количества <b></b> и значения метод Floor_Precise от нуля или к нулю.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Раунды от нуля.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Круги к нулю.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Раунды от нуля.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Круги к нулю.</description>
            </item>
          </list>
          <para>Если любой аргумент является ненумерным, Floor_Precise <b>метод</b> создает ошибку. </para>
          <para>Если число имеет точное значение, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — точка данных, для которой необходимо предсказать значение.</param>
        <param name="Arg2">Known_y — зависимый массив или диапазон данных.</param>
        <param name="Arg3">Known_x — независимый массив или диапазон данных.</param>
        <summary>Вычисляет или прогнозирует будущее значение с учетом существующих значений. Прогнозируемое значение — это значение "y" для заданного значения "x". Известные значения — это уже имеющиеся значения "x" и "y", а новое значение прогнозируется с использованием линейной регрессии. Вы можете использовать эту функцию для прогнозирования будущих продаж, необходимого запаса товара или тенденций потребительских предпочтений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x является ненумерным, <b>Forecast</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если known_y и known_x пусты или содержат различное количество точек данных, <b>Forecast</b> возвращает значение #N/ошибки. </para>
          <para>Если отклонение known_x равно нулю, то <b>Forecast</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Уравнение <b>для Forecast</b> — это a+bx, где: </para>
          <para>Рис. 1. Уравнение для метода Forecast</para>
          <para> </para>
          <para> </para>
          <para>И:</para>
          <para>Рис. 2. Уравнение для метода Forecast</para>
          <para> </para>
          <para> </para>
          <para>и где x и y являются пример означает AVERAGE (known_x) и AVERAGE (известные y's).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_array — массив или ссылка на набор значений, для которых необходимо считать частоты. Если data_array не содержит значений, <b>частота</b> возвращает массив нулей.</param>
        <param name="Arg2">Bins_array — массив или ссылка на интервалы, в которые необходимо сгруппить значения в data_array. Если bins_array не содержит значений, <b>частота</b> возвращает количество элементов в data_array.</param>
        <summary>Вычисляет, как часто значения возникают в диапазоне значений, а затем возвращает вертикальный массив чисел. Например, используйте <b>Frequency</b> для подсчета количества тестов, которые попадают в диапазоны баллов. Поскольку <b>частота</b> возвращает массив, его необходимо вписать в качестве формулы массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Частота</b> вписалась в качестве формулы массива после выбора диапазона смежных ячеек, в которые необходимо отображать возвращаемую рассылку. </para>
          <para>Количество элементов в возвращаемом массиве на один больше, чем количество элементов в bins_array. Дополнительный элемент возвращаемого массива возвращает количество значений выше самого высокого интервала. Например, при подсчете трех диапазонов значений (интервалов), которые вписываются в три ячейки, обязательно введите <b>частоту</b> в четыре ячейки для результатов. Дополнительная ячейка возвращает количество значений в data_array, которые больше третьего интервального значения. </para>
          <para>
            <b>Частота</b> игнорирует пустые ячейки и текст. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массивов.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый массив или диапазон данных.</param>
        <param name="Arg2">Array2 — второй массив или диапазон данных.</param>
        <summary>Возвращает результат F-test. F-тест возвращает двухвостые вероятности того, что отклонения в array1 и array2 существенно не отличаются. Используйте эту функцию, чтобы определить, имеют ли два примера различные отклонения. Например, с учетом результатов тестирования в государственных и частных школах можно проверить, отличаются ли эти школы от разных уровней.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> методе.</para>
          <para>Аргументы должны быть числами, именами, массивами или ссылками, содержами цифры. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если количество точек данных в array1 или array2 меньше 2, или если отклонение массива1 или array2 нулевое, <b>FTest</b> возвращает значение #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate — процентная ставка за период.</param>
        <param name="Arg2">Nper — общее количество периодов оплаты в аннуитет.</param>
        <param name="Arg3">Pmt — оплата за каждый период; она не может измениться в течение жизни аннуитета. Как правило, pmt содержит основные и проценты, но никаких других сборов или налогов. Если pmt опущен, необходимо включить аргумент pv.</param>
        <param name="Arg4">Pv — это настоящее значение или единовременная сумма, которую стоит ряд будущих платежей прямо сейчас. Если значение PV опущено, предполагается, что значение 0 (ноль) должно включать аргумент pmt.</param>
        <param name="Arg5">Тип — номер 0 или 1 и указывает, когда должны быть платежи. Если тип опущен, предполагается, что это 0.</param>
        <summary>Возвращает будущее значение инвестиции на основе периодических, постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Более полное описание аргументов в <b>FV</b> и дополнительные сведения о функциях аннуитета см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту под 12% годовых, используйте 12%/12 для ставки и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для nper. </para>
          <para>Для всех аргументов наличные деньги, которые вы платите, например вклады в сбережения, представлены отрицательными цифрами; полученные денежные средства, например проверки дивидендов, представлены положительными цифрами.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Principal — настоящее значение.</param>
        <param name="Arg2">Расписание — массив процентных ставок, которые необходимо применить.</param>
        <summary>Возвращает будущее значение начального основного после применения ряда сложных процентных ставок. Используйте FVSCHEDULE для вычисления будущего значения инвестиций с переменной или регулируемой скоростью.</summary>
        <returns>To be added.</returns>
        <remarks><para>Значения в расписании могут быть цифрами или пустыми ячейками; любое другое значение создает #VALUE! значение ошибки <b>для FVSchedule</b>. Пустые ячейки принимаются в качестве нулей (без интереса).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, для которого необходимо рассчитать гамму.</param>
        <summary>Возвращает значение функции Гамма.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение, при котором необходимо оценить распределение.</param>
        <param name="Arg2">Alpha — параметр дистрибутива.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>Gamma_Dist</b> возвращает стандартное гамма-распределение.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>Gamma_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает гамма-распределение. Эту функцию можно использовать для изучения переменных, которые могут иметь неопределяемую рассылку. Гамма-распределение обычно используется при анализе очередей.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x, alpha или бета-версия <b></b> не числумерна, Gamma_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Gamma_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа≤ 0 или бета≤ 0, <b></b> Gamma_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности вероятности гаммы: </para>
          <para>Рис. 1. Функция плотности вероятности гаммы</para>
          <para> </para>
          <para> </para>
          <para>Стандартная функция плотности вероятности гаммы:</para>
          <para>Рис. 2. Стандартная функция плотности вероятности гаммы</para>
          <para> </para>
          <para> </para>
          <para>Когда альфа =1, <b>Gamma_Dist</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>Для положительного integer n, когда альфа =n/2, бета =2, и накопительный <b>=</b>true , <b>Gamma_Dist</b> возвращает (1 - CHIDIST(x)) с n градусами свободы. </para>
          <para>Если альфа-версия является положительной, <b>Gamma_Dist</b> также называется распределением Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с распределением гаммы.</param>
        <param name="Arg2">Alpha — параметр дистрибутива.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>Gamma_Inv</b> возвращает стандартное гамма-распределение.</param>
        <summary>Возвращает обратное распределение гамма-накопителей. Если p = GAMMA_DIST (x,...), GAMMA_INV (p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Эту функцию можно использовать для изучения переменной, распределение которой может быть перекосом.</para>
          <para>Если какой-либо аргумент является <b>текстовым, Gamma_Inv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; &gt; <b>вероятность</b> 1, Gamma_Inv возвращает #NUM! значение ошибки. </para>
          <para>Если альфа ≤ 0 или бета≤ 0, <b></b> Gamma_Inv возвращает #NUM! значение ошибки.</para>
          <para>Учитывая значение <b>вероятности,</b> Gamma_Inv ищет это значение x таким образом, что GAMMA_DIST (x, альфа, бета-версия, TRUE) = вероятность. Таким образом, <b>точность Gamma_Inv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>Gamma_Inv</b> использует итеративный метод поиска. Если поиск не сошелся после 100 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение, при котором необходимо оценить распределение.</param>
        <param name="Arg2">Alpha — параметр дистрибутива.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>gammaDist</b> возвращает стандартное гамма-распределение.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная функция верна,</b> <b>gammaDist</b> возвращает накопительную функцию распространения; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает гамма-распределение. Эту функцию можно использовать для изучения переменных, которые могут иметь неопределяемую рассылку. Гамма-распределение обычно используется при анализе очередей.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x, alpha или бета-версия не числумерна, <b>GammaDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>gammaDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа≤ 0 или бета-версия ≤ 0, <b>gammaDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности вероятности гаммы: </para>
          <para>Рис. 1. Функция плотности вероятности гаммы</para>
          <para> </para>
          <para> </para>
          <para>Стандартная функция плотности вероятности гаммы:</para>
          <para>Рис. 2. Стандартная функция плотности вероятности гаммы</para>
          <para> </para>
          <para> </para>
          <para>Когда альфа =1, <b>GammaDist</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>Для положительного integer n, когда альфа = n/2, <b></b>бета=2, и накопительный = true, <b>GammaDist</b> возвращает (1 - CHIDIST(x)) с n градусами свободы. </para>
          <para>Когда альфа -это положительная группа, <b>gammaDist</b> также называется распределением Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с распределением гаммы.</param>
        <param name="Arg2">Alpha — параметр дистрибутива.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>GammaInv</b> возвращает стандартное гамма-распределение.</param>
        <summary>Возвращает обратное распределение гамма-накопителей. Если p = GAMMADIST (x,...), то GAMMAINV (p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> методе.</para>
          <para>Эту функцию можно использовать для изучения переменной, распределение которой может быть перекосом.</para>
          <para>Если какой-либо аргумент является текстовым, <b>GammaInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>GammaInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа ≤ 0 или бета≤ 0, <b>GammaInv</b> возвращает #NUM! значение ошибки.</para>
          <para>Учитывая значение вероятности, <b>GammaInv</b> ищет такое значение x, как GAMMADIST (x, alpha, beta, TRUE) = вероятность. Таким образом, точность <b>GammaInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>GammaInv использует</b> итеративный метод поиска. Если поиск не сошелся после 64 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение, для которого необходимо рассчитать GAMMALN.</param>
        <summary>Возвращает естественный логарифм функции гамма-Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> методе.</para>
          <para>Если x является ненумерным, <b>GammaLn</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ 0, <b>GammaLn</b> возвращает #NUM! значение ошибки. </para>
          <para>Номер e, поднятый до power GAMMALN(i), где я является integer, возвращает тот же результат, что и (i - 1)!. </para>
          <para>
            <b>GammaLn</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода GammaLn</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение, для которого необходимо рассчитать GAMMALN.</param>
        <summary>Возвращает естественный логарифм функции гамма-Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x является ненумерным, <b>GammaLn_Precise</b> метод создает ошибку. </para>
          <para>Если x ≤ 0, <b>GammaLn_Precise</b> метод создает ошибку. </para>
          <para>Номер e, поднятый до power GAMMALN(i), где я является integer, возвращает тот же результат, что и (i - 1)!. </para>
          <para>GAMMALN рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода GammaLn_Precise</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, для которого нужно распределение.</param>
        <summary>Возвращает на 0,5 меньше обычного совокупного распределения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 29 значений. Если любое значение не является integer, оно усечено.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает самый распространенный раздвив из двух или более integers. Наиболее распространенным разделителем является самый большой integer, который разделяет и number1, и number2 без остатка.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является ненумерным, <b>Gcd</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если какой-либо аргумент меньше нуля, <b>Gcd</b> возвращает #NUM! значение ошибки. </para>
          <para>Одно делит любое значение на одно и то же. </para>
          <para>Простое число имеет только себя и одно в качестве даже дивизоров.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых необходимо рассчитать многую. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает геометрическое количество массива или диапазона положительных данных. Например, можно использовать GEOMEAN для вычисления среднего темпа роста, учитываемой совополнными процентами с переменными ставками.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если точка данных ≤ 0, <b>GeoMean</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для геометрического означает: </para>
          <para>Рис. 1. Уравнение для геометрического означает</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение, необходимое для проверки с шагом.</param>
        <param name="Arg2">Шаг — пороговое значение. Если упустить значение для шага, <b>GeStep</b> использует ноль.</param>
        <summary>Возвращает 1, если номер ≥ шаг; возвращает 0 (ноль) в противном случае. Используйте эту функцию для фильтрации набора значений. Например, подводя несколько функций <b>GeStep,</b> вы рассчитываете количество значений, превышающих пороговое значение.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является ненумерным, <b>GeStep</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — набор y-значений, которые вы уже знаете в отношениях y = b*m^x.</param>
        <param name="Arg2">Known_x — необязательный набор x-значений, которые вы уже знаете в отношениях y = b*m^x.</param>
        <param name="Arg3">New_x — новые x-значения, для которых необходимо, чтобы <b>Рост</b> возвращал соответствующие значения y.</param>
        <param name="Arg4">Const — логическое значение, указывав, следует ли принудить констант b к равному 1.</param>
        <summary>Вычисляет прогнозируемый экспоненциальный рост с помощью существующих данных. <b>Рост</b> возвращает значения y для ряда новых x-значений, которые вы указываете с помощью существующих x-значений и y-значений. Вы также можете использовать функцию <b>таблицы Роста,</b> чтобы соответствовать экспоненциальной кривой существующим x-значениям и значениям y.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив known_y находится в одном столбце, то каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y находится в одной строке, то каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Если любое из чисел known_y или отрицательных, <b>Рост</b> возвращает #NUM! значение ошибки. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой формы, если они имеют равные размеры. Если используется несколько переменных, known_y должен быть вектором (то есть диапазоном с высотой одного ряда или шириной одного столбца). </para>
          <para>Если known_x опущен, предполагается, что массив {1,2,3,...} размером с known_y. </para>
          <para>New_x должна включать столбец (или строку) для каждой независимой переменной, как known_x это делает. Если known_y находится в одном столбце, known_x и new_x должны иметь одинаковое количество столбцов. Если known_y находится в одной строке, known_x и new_x должны иметь одинаковое количество строк. </para>
          <para>Если new_x опущен, предполагается, что он будет таким же, как known_x. </para>
          <para>Если обе known_x и new_x опущены, предполагается, что массив {1,2,3,...} размером с known_y. </para>
          <para>Если const является <b>верным</b> или пропущенным, b вычисляется нормально. </para>
          <para>Если значение const <b>является</b>ложным, значение b равно 1, а значения m корректируются таким образом, чтобы y = m^x. </para>
          <para>Формулы, возвращающие массивы, должны быть введены в качестве формул массивов после выбора правильного количества ячеек. </para>
          <para>При вводе константы массива для аргумента known_x, используйте запятые для отдельных значений в одной строке и запятых для отдельных строк.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых необходимо рассчитать многую. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает гармонию набора данных. Гармоничным означает взаимность арифметического средства взаимности.</summary>
        <returns>To be added.</returns>
        <remarks><para>Гармоническое означает всегда меньше, чем геометрическое, которое всегда меньше арифметического. </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если точка данных ≤ 0, <b>HarMean</b> возвращает #NUM! значение ошибки. Уравнение для гармоникного означает: </para>
          <para>Рис. 1. Уравнение для гармоник</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — hexadecimal number, который необходимо преобразовать. Номер не может содержать более 10 символов. Наиболее значительным числом является бит знака (40-й бит справа). Остальные 9 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>hex2Bin</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует гексадецимальное число в двоичное.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Hex2Bin</b> игнорирует места и возвращает двоичный номер из 10 символов. </para>
          <para>Если число отрицательное, оно не может быть меньше FFFFFFFE00, а если число положительное, оно не может быть больше 1FF. </para>
          <para>Если номер не является допустимым гексадецимальным номером, <b>Hex2Bin</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>hex2Bin</b> требуется больше, чем места символов, он возвращает #NUM! значение ошибки. Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>Hex2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Hex2Bin</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — hexadecimal number, который необходимо преобразовать. Номер не может содержать более 10 символов (40 бит). Наиболее значительным числом является бит знака. Остальные 39 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <summary>Преобразует гексадецимальное число в десятичной.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер не является допустимым hexadecimal, <b>Hex2Dec</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — hexadecimal number, который необходимо преобразовать. Номер не может содержать более 10 символов. Наиболее значительным числом является бит знака. Остальные 39 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>hex2Oct</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует гексадецимальное число в окталь.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Hex2Oct</b> игнорирует места и возвращает 10-символьный восьмиугольный номер. </para>
          <para>Если число отрицательное, оно не может быть меньше FFE00000000, а если число положительное, оно не может быть больше 1FFFFFFF. </para>
          <para>Если номер не является допустимым гексадецимальным номером, <b>hex2Oct</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>hex2Oct</b> требуется больше, чем места символов, он возвращает #NUM! значение ошибки. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>Hex2Oct</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Hex2Oct</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение, найденное в первом ряду таблицы. Lookup_value может быть значением, ссылкой или строкой текста.</param>
        <param name="Arg2">Table_array — таблица сведений, в которой будут искаться данные. Используйте ссылку на диапазон или имя диапазона.</param>
        <param name="Arg3">Row_index_num — номер строки в table_array, из которого будет возвращено совпадающие значения. Значение row_index_num 1 возвращает первое значение строки в table_array, row_index_num 2 возвращает значение второй строки в table_array и так далее. Если row_index_num меньше 1, <b>HLookup</b> возвращает #VALUE! значение ошибки; если row_index_num больше количества строк на table_array, <b>HLookup</b> возвращает #REF! значение ошибки.</param>
        <param name="Arg4">Range_lookup — логическое значение, которое указывает, хотите ли вы, чтобы <b>HLookup</b> нашел точное совпадение или приблизительное совпадение. Если <b>верно или</b> пропущено, возвращается примерный совпадение. Другими словами, если точное совпадение не найдено, возвращается следующее самое большое значение, которое меньше lookup_value. Если <b>false,</b> <b>HLookup</b> найдет точное совпадение. Если не найден, возвращается значение #N/A.</param>
        <summary>Поиск значения в верхнем ряду таблицы или массива значений, а затем возвращает значение в том же столбце из строки, которая указана в таблице или массиве. Используйте HLookup, когда значения сравнения находятся в строке в верхней части таблицы данных, и вы хотите посмотреть вниз указанное количество строк. Используйте, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> когда значения сравнения находятся в столбце слева от данных, которые вы хотите найти.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если <b>HLookup</b> не может найти lookup_value, а range_lookup является <b>range_lookup,</b>он использует самое большое значение, которое меньше lookup_value. </para>
          <para>Если lookup_value меньше наименьшего значения в первом ряду table_array, <b>HLookup</b> возвращает значение #N/ошибки. </para>
          <para>Если range_lookup false и lookup_value является текстом, в lookup_value можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sample_s — количество успехов в примере.</param>
        <param name="Arg2">Number_sample — размер образца.</param>
        <param name="Arg3">Population_s — количество успехов в населении.</param>
        <param name="Arg4">Number_population — размер населения.</param>
        <param name="Arg5">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>HypGeom_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>false,</b>он возвращает функцию массы вероятности.</param>
        <summary>Возвращает гипергеометрическое распределение. <b>HypGeom_Dist</b> возвращает вероятность заданного количества успешных выборок, учитывая размер выборки, успехи населения и численность населения. Используйте <b>HypGeom_Dist</b> для проблем с конечным населением, где каждое наблюдение либо успешно, либо неудачно, и где каждый подмножество заданного размера выбирается с одинаковой вероятностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>Все аргументы усечены на несколько этапов. </para>
          <para>Если какой-либо аргумент является <b></b> ненумерным, HypGeom_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если sample_s или sample_s больше, чем меньше number_sample или population_s, HypGeom_Dist возвращает &lt; #NUM! <b></b> значение ошибки. </para>
          <para>Если sample_s меньше 0 или (number_sample - number_population + <b>population_s),</b> HypGeom_Dist возвращает #NUM! значение ошибки. </para>
          <para>Если number_sample ≤ 0 или number_sample &gt; number_population, <b>HypGeom_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если population_s ≤ 0 или &gt; population_s number_population, <b>HypGeom_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_population ≤ 0, <b>HypGeom_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для гипергеометрического распределения: </para>
          <para>Рис. 1. Уравнение для гипергеометрического распределения</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> используется в выборке без замены конечного населения.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sample_s — количество успехов в примере.</param>
        <param name="Arg2">Number_sample — размер образца.</param>
        <param name="Arg3">Population_s — количество успехов в населении.</param>
        <param name="Arg4">Number_population — размер населения.</param>
        <summary>Возвращает гипергеометрическое распределение. <b>HypGeomDist</b> возвращает вероятность заданного количества успешных выборок, учитывая размер выборки, успехи населения и численность населения. Используйте <b>HypGeomDist</b> для проблем с конечным населением, где каждое наблюдение является либо успехом, либо сбоем, и где каждый подмножество заданного размера выбирается с одинаковой вероятностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если какой-либо аргумент является ненумерным, <b>HypGeomDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если sample_s или sample_s больше, чем меньше number_sample или &lt; population_s, <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если sample_s меньше 0 или (number_sample - number_population + population_s), <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_sample ≤ 0 или number_sample &gt; number_population, HYPGEOMDIST возвращает #NUM! значение ошибки. </para>
          <para>Если population_s ≤ 0 или &gt; population_s number_population, <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_population ≤ 0, <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для гипергеометрического распределения: </para>
          <para>Рис. 1. Уравнение для гипергеометрического распределения</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist</b> используется в выборке без замены конечной популяции.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — аргумент, проверяемый на наличие ошибки.</param>
        <param name="Arg2">Value_if_error — значение, возвращаемого, если формула оценивает ошибку. Оцениваются следующие типы ошибок: #N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?или #NULL!.</param>
        <summary>Возвращает значение, указать, если формула оценивает ошибку; в противном случае возвращает результат формулы. Используйте <b>функцию IfError</b> для ловушки и обработки ошибок в формуле.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если значение или value_if_error является пустой ячейкой, <b>IfError</b> рассматривает ее как пустое значение строки (""). </para>
          <para>Если значение является формулой массива, <b>IfError</b> возвращает массив результатов для каждой ячейки в диапазоне, указанном в значении. Второй пример см. ниже.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">значение: любое значение, выражение или ссылка.</param>
        <param name="Arg2">value_if_na: любое значение, выражение или ссылка.</param>
        <summary>Возвращает значение, указать, если выражение #N/A, в противном случае возвращает результат выражения.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложное число, для которого необходимо абсолютное значение.</param>
        <summary>Возвращает абсолютное значение (modulus) сложного номера в текстовом формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Абсолютное значение сложного номера: </para>
          <para>Рис. 1. Уравнение для абсолютного значения сложного числа</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложное число, для которого нужен воображаемый коэффициент.</param>
        <summary>Возвращает мнимый коэффициент сложного числа в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого необходимо аргумент theta.</param>
        <summary>Возвращает аргумент (theta), угол, выраженный в радианах, таким образом:</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>
            <b>ImArgument</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода ImArgument</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>и</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого необходимо конъюгат.</param>
        <summary>Возвращает сложный конъюгат сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Спрягать сложный номер: </para>
          <para>Рис. 1. Уравнение для спрягания сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого нужен косин.</param>
        <summary>Возвращает код сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Если inumber является логическим значением, <b>ImCos</b> возвращает #VALUE! значение ошибки. </para>
          <para>Cosine сложного номера: </para>
          <para>Рис. 1. Cosine сложного номера</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический косин.</param>
        <summary>Возвращает гиперболический косин сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен cotangent.</param>
        <summary>Возвращает cotangent сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен cosecant.</param>
        <summary>Возвращает cosecant сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический косекант.</param>
        <summary>Возвращает гиперболический cosecant сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 — сложный числитель или дивиденд.</param>
        <param name="Arg2">Inumber2 — сложный знаменатель или дивизор.</param>
        <summary>Возвращает коэффициент двух сложных номеров в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Коэффициент двух сложных чисел: </para>
          <para>Рис. 1. Коэффициент двух сложных чисел</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложное число, для которого необходимо экспоненциальное.</param>
        <summary>Возвращает экспоненцию сложного номера в текстовом формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Экспоненциальный показатель сложного числа: </para>
          <para>Рис. 1. Экспоненциальное число сложных</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого нужен естественный логарифм.</param>
        <summary>Возвращает естественный логарифм сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Естественный логарифм сложного номера: </para>
          <para>Рис. 1. Естественный логарифм сложного номера</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого нужен общий логарифм.</param>
        <summary>Возвращает общий логарифм (базовый 10) сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Общий логарифм сложного числа можно рассчитать из естественного логарифма следующим образом: </para>
          <para>Рис. 1. Уравнение для общего логарифма сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого необходимо логарифм base-2.</param>
        <summary>Возвращает логарифм базы-2 сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Логарифм базы-2 сложного номера можно рассчитать из естественного логарифма следующим образом: </para>
          <para>Рис. 1. Уравнение для логарифма базы-2 сложного номера</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложное число, необходимое для повышения мощности.</param>
        <param name="Arg2">Номер — мощность, к которой необходимо повысить сложный номер.</param>
        <summary>Возвращает сложное число в текстовом формате x + yi или x + yj, поднятом в power.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Если число не является числумным, <b>ImPower</b> возвращает #VALUE! значение ошибки. </para>
          <para>Число может быть многословным, дробным или отрицательным. </para>
          <para>Сложный номер, поднятый до мощности, рассчитывается следующим образом: </para>
          <para>Рис. 1. Сложный номер уравнения, поднятый до мощности</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 4. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1, inumber2,... - от 1 до 29 сложных номеров для умножения.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает продукт от 2 до 29 сложных номеров в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Продукт из двух сложных чисел:</para>
          <para>Рис. 1. Продукт из двух сложных номеров</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложное число, для которого нужен реальный коэффициент.</param>
        <summary>Возвращает реальный коэффициент сложного номера в текстовом формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический косекант.</param>
        <summary>Возвращает гиперболический cosecant сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический секант.</param>
        <summary>Возвращает секатор сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого необходимо иметь sine.</param>
        <summary>Возвращает синюширование сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Sine of a complex number is: </para>
          <para>Рис. 1. Sine сложного номера</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический сина.</param>
        <summary>Возвращает гиперболический сина сложный номер.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложный номер, для которого нужно квадратное корневое.</param>
        <summary>Возвращает квадратный корень сложного номера в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. Квадратный корневой корень сложного номера: </para>
          <para>Рис. 1. Квадратный корневой корень сложного номера</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 4. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 — это сложное число, из которого вычитается inumber2.</param>
        <param name="Arg2">Inumber2 — это сложное число, необходимое для вычитания из inumber1.</param>
        <summary>Возвращает разницу двух сложных номеров в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число.</para>
          <para>Разница в двух сложных номерах:</para>
          <para>Рис. 1. Разница в двух сложных номерах</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1,inumber2,... - от 1 до 29 сложных номеров для добавления.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает сумму двух или более сложных номеров в формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Сумма из двух сложных номеров:</para>
          <para>Рис. 1. Сумма из двух сложных номеров</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен тангент.</param>
        <summary>Возвращает тангент сложного номера.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array или Reference — это диапазон ячеек или константа массива. Для ссылок это ссылка на один или несколько диапазонов ячейки.</param>
        <param name="Arg2">Row_num — выбирает строку в массиве, из которой можно вернуть значение. Если row_num не будет, column_num требуется. Для ссылок число строки, из которой можно вернуть ссылку</param>
        <param name="Arg3">Column_num — выбирает столбец в массиве, из которого можно вернуть значение. Если column_num не будет, row_num требуется. Для справки, номер столбца, из которого нужно вернуть ссылку.</param>
        <param name="Arg4">Area_num — используется только при возвращении ссылок. Выбирает диапазон ссылок, из которого можно вернуть пересечение row_num и column_num. Первая область, выбранная или вступив, имеет номер 1, вторая — 2 и так далее. Если area_num опущен, <b>индекс</b> использует область 1.</param>
        <summary>Возвращает значение или ссылку на значение из таблицы или диапазона. Существует две формы функции <b>Index:</b> форма массива и эталонная форма.</summary>
        <returns>To be added.</returns>
        <remarks><para>Форма массива</para>
          <para>Возвращает значение элемента в таблице или массиве, выбранном индексами номеров строки и столбцов.</para>
          <para>Используйте форму массива, если первый аргумент <b>index</b> — это константа массива.</para>
          <para>Если используются row_num и column_num, <b>индекс</b> возвращает значение в ячейке на пересечении row_num и column_num. </para>
          <para>Если вы row_num или column_num 0 (ноль), <b>Index</b> возвращает массив значений для всего столбца или строки соответственно. Чтобы использовать значения, возвращаемые в качестве массива, введите функцию <b>Index</b> в качестве формулы массива в горизонтальном диапазоне ячеек для строки и в вертикальном диапазоне ячеек для столбца. Чтобы ввести формулу массива, нажмите кнопку CTRL+SHIFT+ENTER. </para>
          <para>Row_num и column_num должны указать на ячейку в массиве; в <b>противном</b> случае Индекс возвращает #REF! значение ошибки. </para>
          <para>Форма ссылок</para>
          <para>Возвращает ссылку ячейки на пересечении определенной строки и столбца. Если эталон состоит из неадиацентных выборов, можно выбрать выбор, который нужно посмотреть. Если каждая область в ссылке содержит только одну строку или столбец, аргумент row_num или column_num, соответственно, необязателен. Например, для ссылки на одну строку используйте INDEX(reference,,column_num). </para>
          <para>После ссылки и area_num выбрали определенный диапазон, row_num и column_num выберите определенную ячейку: row_num 1 — первая строка в диапазоне, column_num 1 — первый столбец и так далее. Ссылка, возвращаемая <b>Индексом,</b> является пересечением row_num и column_num. </para>
          <para>Если вы row_num или column_num 0 (ноль), <b>Index</b> возвращает ссылку для всего столбца или строки соответственно.</para>
          <para>Row_num, column_num и area_num должны указать на ячейку в пределах ссылки; в <b>противном</b> случае Индекс возвращает #REF! значение ошибки. Если row_num и column_num, <b>индекс</b> возвращает область в ссылку, указанную area_num. </para>
          <para>Результат функции <b>Index</b> является эталонным и интерпретируется как таковой другими формулами. В зависимости от формулы возвращаемая стоимость INDEX может использоваться в качестве ссылки или в качестве значения. Например, формула CELL ("ширина",INDEX(A1:B2,1,2)) эквивалентна CELL ("ширина", B1). Функция CELL использует возвращаемую величину INDEX в качестве ссылки на ячейку. С другой стороны, такая формула, как 2*INDEX (A1:B2,1,2), переводит возвращаемую величину <b>Индекса</b> в число в ячейке B1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — зависимый набор наблюдений или данных.</param>
        <param name="Arg2">Known_x — независимый набор наблюдений или данных.</param>
        <summary>Вычисляет точку, в которой линия будет пересекаться с осей y с помощью существующих x-значений и y-значений. Точка перехвата основана на наиболее подходящих регрессивных строках, выстроенной через известные x-значения и известные значения y. Используйте <b>функцию Intercept,</b> когда необходимо определить значение зависимой переменной, если независимая переменная — 0 (ноль). Например, с помощью функции <b>Intercept</b> можно предсказать электрическое сопротивление металла при 0°C, когда ваши точки данных были взяты при комнатной температуре и выше.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если known_y и known_x содержат различное количество точек данных или не содержат точек данных, <b>Intercept</b> возвращает значение #N/Ошибки. </para>
          <para>Уравнение для перехвата регрессионной строки:</para>
          <para>Рис. 1. Уравнение для перехвата регрессионной строки</para>
          <para> </para>
          <para> </para>
          <para>где наклон, b, вычисляется как:</para>
          <para>Рис. 2. Уравнение для наклона</para>
          <para> </para>
          <para> </para>
          <para>и где x и y являются пример означает AVERAGE (known_x) и AVERAGE (known_y's).</para>
          <para>Алгоритм перехвата и функций, используемый в основном алгоритме, отличается от используемого в <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> функции алгоритма. Разница между этими алгоритмами может привести к различным результатам, когда данные неудались и коллинеар. Например, если точки данных аргумента known_y являются 0, а точки данных аргумента known_x аргумента 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Перехват</b> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> возвращение #DIV/0! ошибка. The <b>Intercept</b> and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> algorithm is designed to look for one and only one answer, and in this case there can be more than one answer. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> возвращает значение 0. Алгоритм предназначен для возврата разумных результатов для данных collinear, и в этом случае можно найти по крайней <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> мере один ответ.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Инвестиции — это сумма, вложенная в безопасность.</param>
        <param name="Arg4">Погашение — сумма, полученная в срок погашения.</param>
        <param name="Arg5">База — тип базы для подсчета дня.</param>
        <summary>Возвращает процентную ставку для полностью вложенной безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость и основа усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>IntRate</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если инвестиции ≤ 0 или ≤ 0, <b>IntRate</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>IntRate</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>IntRate</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>IntRate</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода IntRate</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DIM = количество дней от урегулирования до срока погашения.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate — процентная ставка за период.</param>
        <param name="Arg2">Per — период, для которого необходимо найти интерес и должен находиться в диапазоне от 1 до nper.</param>
        <param name="Arg3">Nper — общее количество периодов оплаты в аннуитет.</param>
        <param name="Arg4">Pv — это настоящее значение или единовременная сумма, которую стоит ряд будущих платежей прямо сейчас.</param>
        <param name="Arg5">Fv — будущее значение или баланс наличных средств, который необходимо достичь после последнего платежа. Если fv опущен, предполагается, что значение 0 (будущее значение кредита, например, 0).</param>
        <param name="Arg6">Тип — номер 0 или 1 и указывает, когда должны быть платежи. Если тип опущен, предполагается, что это 0.</param>
        <summary>Возвращает выплату процентов за заданный период для инвестиций на основе периодических, постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту под 12% годовых, используйте 12%/12 для ставки и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для nper. </para>
          <para>Для всех аргументов наличные деньги, которые вы платите, например вклады в сбережения, представлены отрицательными цифрами; полученные денежные средства, например проверки дивидендов, представлены положительными цифрами.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значения — массив или ссылка на ячейки, содержащие номера, для которых необходимо рассчитать внутреннюю скорость возврата.</param>
        <param name="Arg2">Угадай, номер, который, как вы думаете, близок к результату IRR.</param>
        <summary>Возвращает внутреннюю скорость возврата для ряда денежных потоков, представленных числами в значениях. Эти денежные потоки не должны быть чёткими, как для аннуитета. Однако денежные потоки должны происходить регулярно, например, ежемесячно или ежегодно. Внутренняя ставка прибыли — это процентная ставка, полученная для инвестиций, состоящих из платежей (отрицательных значений) и доходов (положительных значений), которые происходят в регулярные периоды.</summary>
        <returns>To be added.</returns>
        <remarks><para>Значения должны содержать по крайней мере одно положительное значение и одно отрицательное значение для вычисления внутренней скорости возврата. </para>
          <para>IRR использует порядок значений для интерпретации порядка денежных потоков. Обязательно введите значения оплаты и дохода в нужной последовательности. </para>
          <para>Если массив или справочный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются.</para>
          <para>Microsoft Excel использует итеративный метод для вычисления <b>Irr</b>. Начиная с угадать, <b>Irr</b> циклы через вычисление, пока результат не будет точным в пределах 0.00001 процентов. Если <b>Irr</b> не может найти результат, который работает после 20 попыток, #NUM! возвращается значение ошибки. </para>
          <para>В большинстве случаев не требуется угадать для вычисления <b>Irr.</b> Если угадать не будет, предполагается, что она будет 0,1 (10 процентов). </para>
          <para>Если <b>Irr</b> дает #NUM! значение ошибки или если результат не близок к ожидаемому, попробуйте еще раз угадать другое значение.</para>
          <para>
            <b>Irr</b> тесно связан с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> чистой функцией настоящего значения. Процентная ставка, исчисляемая <b>Irr,</b> соответствует чистому настоящему значению 0 (ноль). В следующей формуле показано, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> как и <b>связаны Irr:</b></para>
          <para>NPV(IRR(B1:B6), B1:B6) равно 3.60E-08 [В точности вычисления <b>Irr,</b> значение 3.60E-08 фактически 0 (ноль).]</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, ссылается ли это значение на любое значение ошибки, кроме #N/A.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и <b></b> возвращает значение true или <b>false</b> в зависимости от того, ссылается ли это значение на любое значение ошибки (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, или #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, является ли это значение 100%.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ссылка на ячейку, которая необходимо протестировать. Ссылкой может быть ссылка на ячейку, формула или имя, которое ссылается на ячейку.</param>
        <summary>Проверяет, является ли ссылка на ячейку, содержащую формулу, и возвращает <b>TRUE</b> или <b>FALSE.</b></summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли это значение к логическому значению.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, ссылается ли это значение на значение ошибки #N/A (значение не доступно).</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли это значение к любому элементу, который не является текстом. (Обратите внимание, что эта функция возвращает <b>значение true,</b> если значение относится к пустой ячейке.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, ссылается ли это значение на номер.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер . Значение, закругляемого.</param>
        <param name="Arg2">Значение . Необязательный кратный, к которому нужно округлить число. Если значение опущено, его значение по умолчанию — 1.</param>
        <summary>Возвращает номер, округлимый до ближайшего числа или ближайшего множественного значения.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от нечетного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Код даты, используемый Excel для расчета даты и времени.</param>
        <param name="Arg2">Этот аргумент не доступен в функции.</param>
        <summary>Возвращает недельный номер ISO за данную дату.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>Возвращает порядковую номер календарной недели [ISO8601] в год для данной даты. IsO 8601 определяет календарную неделю как интервал времени в семь календарных дней, начиная с понедельника, и первую календарную неделю года как календарную, которая включает первый четверг этого года.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка для инвестиций.</param>
        <param name="Arg2">Per — период, для которого вы хотите найти интерес, и должен быть между 1 и nper.</param>
        <param name="Arg3">Nper — общее количество периодов оплаты для инвестиций.</param>
        <param name="Arg4">Pv — настоящее значение инвестиций. Для кредита pv — это сумма кредита.</param>
        <summary>Вычисляет проценты, уплаченные в течение определенного периода инвестиции. Эта функция предоставляется для совместимости с Lotus 1-2-3.</summary>
        <returns>To be added.</returns>
        <remarks><para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту с годовой процентной ставкой 12 процентов, используйте 12%/12 для ставки и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для nper. </para>
          <para>Для всех аргументов наличные деньги, которые вы платите, такие как вклады в сбережения или другие снятия, представлены отрицательными номерами; полученные денежные средства, такие как проверки дивидендов и другие депозиты, представлены положительными цифрами. </para>
          <para>Дополнительные сведения о финансовых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> этой функции.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — значение, необходимое для тестирования. Значение может быть пустым (пустой ячейкой), ошибкой, логическим, текстовым, номерным или эталонным значением или именем, ссылаясь на любое из них, которое необходимо проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, ссылается ли это значение на текст.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значения функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER ("19") значение "19" не преобразуется из текстового значения, и функция возвращает значение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>. </para>
          <para>Функции IS полезны в формулах для тестирования результатов вычисления. В сочетании с функцией IF они предоставляют метод для размещения ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых нужно рассчитать куртоз. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает куртоз набора данных. Kurtosis характеризует относительную пиковую или плоскость распределения по сравнению с обычным распределением. Положительный куртоз указывает на относительно пиковое распространение. Отрицательный куртоз указывает на относительно плоское распределение.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если количество точек данных меньше четырех, или если стандартное отклонение образца равно <b>нулю,</b> Курт возвращает #DIV/0! значение ошибки. </para>
          <para>Куртоз определяется как: </para>
          <para>Рис. 1. Уравнение Куртоз</para>
          <para> </para>
          <para> </para>
          <para>где s является стандартным отклонением образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон данных, для которых необходимо определить наибольшее значение k-th.</param>
        <param name="Arg2">K — положение (из самого большого) в массиве или диапазоне данных ячейки для возврата.</param>
        <summary>Возвращает самое большое значение k-th в наборе данных. Эту функцию можно использовать для выбора значения в зависимости от его относительного положения. Например, с помощью <b>Large</b> можно вернуть наивысший, занявший второе или третье место балл.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Большой</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k ≤ 0 или если k больше количества точек данных, <b>Большой</b> возвращает #NUM! значение ошибки.</para>
          <para>Если n — это число точек данных в диапазоне, то large (array,1) возвращает наибольшее значение, а LARGE (array,n) возвращает наименьшее значение.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2,... - 1 to 29 values for which you want the least common multiple. Если значение не является integer, оно усечено.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наименьшее количество распространенных нескольких из них. Наименьшим распространенным числом является наименьшее положительное число, которое является несколькими из всех аргументов числа 1, number2 и так далее. Используйте LCM для добавления фракций с различными знаменателями.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является ненумерным, <b>Lcm</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если какой-либо аргумент меньше нуля, <b>Lcm</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — набор y-значений, которые вы уже знаете в отношениях y = mx + b.</param>
        <param name="Arg2">Known_x — необязательный набор X-значений, которые вы уже знаете в отношениях y = mx + b.</param>
        <param name="Arg3">Const — логическое значение, указывав, следует ли принудить констант b к равному 0.</param>
        <param name="Arg4">Stats — логическое значение, указывав, следует ли возвращать дополнительные статистические данные о регрессии.</param>
        <summary>Вычисляет статистику для строки с помощью метода "наименьшие квадраты" для вычисления прямой линии, которая наилучшим образом соответствует вашим данным, и возвращает массив, описывая строку. Поскольку эта функция возвращает массив значений, она должна быть введена в качестве формулы массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>Уравнение для строки:</para>
          <para>y = mx + b или</para>
          <para>y = m1x1 + m2x2 + ... + b (если существует несколько диапазонов x-значений)</para>
          <para>где зависимым значением y является функция независимых x-значений. Значения m — это коэффициенты, соответствующие каждому x-значению, а b — это постоянное значение. Обратите внимание, что векторами могут быть y, x и m. Массив, <b>возвращаемый LinEst,</b> — {mn,mn-1,...,m1,b}. <b>Кроме того, LinEst</b> может возвращать дополнительные статистические данные о регрессии.</para>
          <para>Если массив known_y находится в одном столбце, то каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y находится в одной строке, то каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой формы, если они имеют равные размеры. Если используется несколько переменных, known_y должен быть вектором (то есть диапазоном с высотой одного ряда или шириной одного столбца). </para>
          <para>Если known_x опущен, предполагается, что массив {1,2,3,...} размером с known_y. </para>
          <para>Если const является <b>верным</b> или пропущенным, b вычисляется нормально. </para>
          <para>Если значение const <b>является</b>ложным, значение b равно 0, а значения m скорректированы с учетом y = mx. </para>
          <para>Если статистика является <b>truuue,</b> <b>LinEst</b> возвращает дополнительную статистику регрессии, поэтому возвращаемая массивка {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey; F,df;ssreg,ssresid}. </para>
          <para>Если статистика является <b>ложной</b> или пропущенной, <b>LinEst</b> возвращает только коэффициенты m и постоянный b. </para>
          <para>Дополнительные статистические данные о регрессии следуют следующим образом.</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Стандартные значения ошибок для коэффициентов m1,m2,...,mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>Стандартное значение ошибки для постоянного b (seb = #N/A, когда const является <b>ложным).</b></description>
            </item>
            <item>
              <term>r2</term>
              <description>Коэффициент определения. Сравнивает предполагаемые и фактические значения y и колеблется в значении от 0 до 1. Если значение 1, в примере имеется идеальная корреляция— нет разницы между предполагаемым значением y и фактическим значением y. С другой стороны, если коэффициент определения равняется 0, уравнение регрессии не помогает предсказать значение y. </description>
            </item>
            <item>
              <term>sey</term>
              <description>Стандартная ошибка для оценки y.</description>
            </item>
            <item>
              <term>F</term>
              <description>Статистика F или значение F-observed. Используйте статистику F, чтобы определить, случайно ли наблюдается связь между зависимыми и независимыми переменными.</description>
            </item>
            <item>
              <term>df</term>
              <description>Степени свободы. Используйте степени свободы, чтобы помочь вам найти значения F-critical в статистической таблице. Сравните значения, которые вы найдете в таблице, со статистикой F, возвращаемой <b>LinEst,</b> чтобы определить уровень доверия к модели. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>Регрессивная сумма квадратов.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>Остаточная сумма квадратов.</description>
            </item>
          </list>
          <para>На следующей иллюстрации показан порядок возврата дополнительной статистики регрессии.</para>
          <para>Рис. 1. Таблица</para>
          <para> </para>
          <para> </para>
          <para>Вы можете описать любую прямую линию с уклоном и перехватом y: </para>
          <para>Наклон (m):</para>
          <para>
Чтобы найти склон строки, часто написанной как m, возьмите две точки на строке (x1,y1) и (x2,y2); наклон равен (y2 - y1)/(x2 - x1).</para>
          <para>Y-intercept (b):</para>
          <para>
Перехват строки, часто написанной как b, — это значение y в точке, где линия пересекает y-axis.</para>
          <para>Уравнение прямой линии — y = mx + b. После того, как вы узнаете значения m и b, вы можете вычислить любую точку в строке, подключив значение y или x в это уравнение. Вы также можете использовать <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> функцию.</para>
          <para>Если у вас есть только одна независимая x-переменная, вы можете получить значения наклона и перехвата непосредственно с помощью следующих формул: </para>
          <para>Наклон:</para>
          <para>
=INDEX (LINEST(known_y,known_x's),1)</para>
          <para>Y-intercept:</para>
          <para>
=INDEX (LINEST(known_y,known_x),2)</para>
          <para>Точность строки, вычисляемой <b>LineEst,</b> зависит от степени рассеяния в данных. Чем линейнее данные, тем точнее <b>модель LineEst.</b> <b>LineEst</b> использует метод наименьших квадратов для определения наиболее подходящих для данных. Если у вас есть только одна независимая x-переменная, расчеты для m и b основаны на следующих формулах: </para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются примерами средств, например x = AVERAGE (известные х) и y = AVERAGE (known_y).</para>
          <para>Функции <b>LineEst</b> с линией и кривой могут вычислять лучшую прямую линию или экспоненциальное кривой, которая <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> соответствует вашим данным. Однако необходимо определить, какой из двух результатов наилучшим образом соответствует вашим данным. Вы можете рассчитать TREND (known_y,known_x) для прямой линии или GROWTH (known_y, known_x) для экспоненциальной кривой. Эти функции, без аргумента new_x, возвращают массив y-значений, предсказано вдоль этой строки или кривой в фактических точках данных. Затем можно сравнить прогнозируемые значения с фактическими значениями. Может потребоваться наметить их обоих для визуального сравнения. </para>
          <para>В анализе регрессии Microsoft Excel для каждой точки вычисляется квадратное различие между значением y, оцениваемой для этой точки, и фактическим значением y. Сумма этих различий в квадрате называется остаточной суммой квадратов ssresid. Microsoft Excel затем вычисляет общую сумму квадратов, sstotal. Если const = <b>true</b>или опущен, общая сумма квадратов — это сумма квадратных различий между фактическими значениями y и средним значением y-values. Если const = <b>false,</b>общая сумма квадратов — это сумма квадратов фактических значений y (без вычитания среднего значения y из каждого отдельного значения y-value). Затем регрессивную сумму квадратов, ssreg, можно найти из: ssreg = sstotal - ssresid. Чем меньше остаточная сумма квадратов по сравнению с общей суммой квадратов, тем больше значение коэффициента определения r2, что является показателем того, насколько хорошо уравнение, выявимое в результате анализа регрессии, объясняет связь между переменными. r2 равно ssreg/sstotal. </para>
          <para>В некоторых случаях один или несколько столбцов X (предположим, что Y и X находятся в столбцах) могут не иметь дополнительного прогностического значения в присутствии других столбцов X. Другими словами, устранение одного или более столбцов X может привести к одинаково точным предсказаниям значений Y. В этом случае эти избыточные столбцы X должны быть пропущены из регрессионной модели. Это явление называется "collinearity", так как любой избыточный столбец X может быть выражен как сумма кратных столбцов X, не избыточных. <b>LinEst</b> проверяет collinearity и удаляет лишние столбцы X из регрессионной модели при их идентификации. Удалены столбцы X можно распознать в <b>выходе LinEst</b> как имеющие 0 коэффициентов, а также 0 se's. Если один или несколько столбцов удаляются как избыточные, то df затрагивается, так как df зависит от количества столбцов X, фактически используемых для прогностических целей. Если значение df изменено из-за удаления избыточных столбцов X, это также влияет на значения sey и F. Collinearity должна быть относительно редкой на практике. Однако более вероятно, что некоторые столбцы X содержат только 0 и 1 в качестве индикаторов того, является ли субъект в эксперименте членом определенной группы или не является. Если const = <b>true</b> или omitted, <b>LinEst</b> эффективно вставляет дополнительный столбец X всех 1 для моделирования перехвата. Если у вас есть столбец с 1 для каждого субъекта, если мужчина или 0, если нет, и у вас также есть столбец с 1 для каждого субъекта, если женский или 0, если нет, этот последний столбец является избыточным, так как записи в нем можно получить из вычитания записи в столбце "мужской индикатор" из записи в дополнительный столбец всех 1 <b>добавлены LineEst</b>. </para>
          <para>df вычисляется следующим образом, когда столбцы X не удаляются из модели из-за collinearity: если имеются столбцы k из known_x и const <b>=</b> true или опущены, то df = n — k — 1. Если const = <b>false,</b>то df = n - k. В обоих случаях каждый столбец X, удаленый из-за collinearity, увеличивает df на 1. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массивов. При вводе константы массива, например known_x в качестве аргумента, используйте запятые для отдельных значений в одной строке и запятых для отдельных строк. Символы separator могут быть разными в зависимости от вашего параметра locale в региональных и языковых параметрах в панели управления. </para>
          <para>Обратите внимание, что значения y, предсказаны уравнением регрессии, могут быть не допустимыми, если они находятся за пределами диапазона значений y, используемых для определения уравнения. Алгоритм, используемый в <b>функции LinEst,</b> отличается от используемого в функции и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> функции <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> алгоритма. Разница между этими алгоритмами может привести к различным результатам, когда данные неудались и коллинеар. Например, если точки данных аргумента known_y являются 0, а точки данных аргумента known_x аргумента 1: </para>
          <para>
            <b>LineEst</b> возвращает значение 0. Алгоритм <b>LinEst</b> предназначен для возврата разумных результатов для данных collinear, и в этом случае можно найти по крайней мере один ответ. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> верни #DIV/0! ошибка. Алгоритм и алгоритм предназначены для поиска одного и только одного ответа, и в этом случае может <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> быть несколько ответов.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — положительное реальное число, для которого нужен естественный логарифм.</param>
        <summary>Возвращает естественный логарифм номера. Естественные логарифмы основаны на постоянной e (2.71828182845904).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b> — это обратная сторона функции EXP.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — положительное реальное число, для которого нужен логарифм.</param>
        <param name="Arg2">База — основа логарифма. Если база опущена, предполагается, что ее будет 10.</param>
        <summary>Возвращает логарифм номера в указанную базу.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — положительное реальное число, для которого нужен логарифм base-10.</param>
        <summary>Возвращает логарифм базы-10 числа.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — набор y-значений, которые вы уже знаете в отношениях y = b*m^x.</param>
        <param name="Arg2">Known_x — необязательный набор x-значений, которые вы уже знаете в отношениях y = b*m^x.</param>
        <param name="Arg3">Const — логическое значение, указывав, следует ли принудить констант b к равному 1.</param>
        <param name="Arg4">Stats — логическое значение, указывав, следует ли возвращать дополнительные статистические данные о регрессии.</param>
        <summary>В анализе регрессии вычисляется экспоненциальное кривой, которое соответствует вашим данным, и возвращает массив значений, описывая кривую. Поскольку эта функция возвращает массив значений, она должна быть введена в качестве формулы массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>Уравнение для кривой:</para>
          <para>y = b*m^x или</para>
          <para>y =*(b (m1^x1)*(m2^x2)*_) (если имеется несколько x-значений)</para>
          <para>где зависимым значением y является функция независимых x-значений. M-значения — это базы, соответствующие каждому экспоненту x-value, а b — это постоянное значение. Обратите внимание, что векторами могут быть y, x и m. Массив, <b>возвращаемый LogEst,</b> — {mn,mn-1,...,m1,b}.</para>
          <para>Если массив known_y находится в одном столбце, то каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y находится в одной строке, то каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой формы, если они имеют равные размеры. Если используется несколько переменных, known_y должна быть диапазон ячеек с высотой одного ряда или шириной одного столбца (который также известен как вектор). </para>
          <para>Если known_x опущен, предполагается, что массив {1,2,3,...} размером с known_y. </para>
          <para>Если const является <b>верным</b> или пропущенным, b вычисляется нормально.</para>
          <para>Если значение const <b>является</b>ложным, значение b равно 1, а значения m устанавливаются на значение y = m^x.</para>
          <para>Если статистика <b></b>является верной, <b>LogEst</b> возвращает дополнительную статистику регрессии, поэтому возвращаемая массивка {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey; F,df;ssreg,ssresid}. </para>
          <para>Если статистика является <b>ложной</b> или пропущенной, <b>LogEst</b> возвращает только коэффициенты m и постоянный b. </para>
          <para>Дополнительные сведения о дополнительной статистике регрессии см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> .</para>
          <para>Чем больше участок данных похож на экспоненциальный, тем лучше вычисляемая строка будет соответствовать вашим данным. Например, LogEst возвращает массив значений, описывая связь между значениями, но вписывается в прямую линию <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> к вашим <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> данным; <b>LogEst соответствует</b> экспоненциальной кривой. Дополнительные сведения см. в статье <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Если у вас есть только одна независимая x-переменная, вы можете получить значения y-intercept (b) непосредственно с помощью следующей формулы: </para>
          <para>Y-intercept (b):</para>
          <para>
INDEX (LOGEST(known_y,known_x),2)</para>
          <para>Вы можете использовать уравнение y = b*m^x для прогнозирования будущих значений y, но Microsoft Excel предоставляет функцию для этого <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> для вас. Дополнительные сведения см. в статье <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массивов. </para>
          <para>При вводе константы массива, например known_x в качестве аргумента, используйте запятые для отдельных значений в одной строке и запятых для отдельных строк. Символы separator могут быть разными в зависимости от вашего параметра locale в региональных и языковых параметрах в панели управления. </para>
          <para>Следует отметить, что значения y, предсказаны уравнением регрессии, могут быть не допустимыми, если они находятся за пределами диапазона значений y, используемых для определения уравнения.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — это вероятность, связанная с логнормальным распределением.</param>
        <param name="Arg2">Mean — означает ln(x).</param>
        <param name="Arg3">Standard_dev — стандартное отклонение ln(x).</param>
        <summary>Используйте логнормальное распределение для анализа logarithmically преобразованных данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> методе.</para>
          <para>Если какой-либо аргумент не является числовым, <b>LogInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; = 0 или вероятность &gt; = 1, <b>LogInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если standard_dev &lt; = 0, <b>LogInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Обратная функция lognormal распределения: </para>
          <para>Рис. 1. Обратная функция логнормального распространения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение для оценки функции.</param>
        <param name="Arg2">Mean - the mean of ln(x).</param>
        <param name="Arg3">Standard_dev — стандартное отклонение ln(x).</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>LogNorm_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает логнормальное распределение x, где ln(x) обычно распределяется со standard_dev. Используйте эту функцию для анализа данных, которые были logarithmically преобразованы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, LogNorm_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ 0 или standard_dev ≤ 0, <b></b> LogNorm_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции накопительного распределения журналов: </para>
          <para>Рис. 1. Уравнение для совокупного распределения журналов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с логнормальным распределением.</param>
        <param name="Arg2">Mean - the mean of ln(x).</param>
        <param name="Arg3">Standard_dev — стандартное отклонение ln(x).</param>
        <summary>Возвращает обратную часть функции совокупного распределения журналов. Используйте логнормальное распределение для анализа logarithmically преобразованных данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, LogNorm_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность = 0 или вероятность &lt; = 1, LogNorm_Inv &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если standard_dev &lt; = 0, <b>LogNorm_Inv</b> возвращает #NUM! значение ошибки. </para>
          <para>Обратная функция lognormal распределения: </para>
          <para>Рис. 1. Обратная функция логнормального распространения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение для оценки функции.</param>
        <param name="Arg2">Mean — означает ln(x).</param>
        <param name="Arg3">Standard_dev — стандартное отклонение ln(x).</param>
        <summary>Возвращает совокупное распределение логнормального х, где ln(x) обычно распределяется со standard_dev. Используйте эту функцию для анализа данных, которые были logarithmically преобразованы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если какой-либо аргумент является ненумерным, <b>LogNormDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ 0 или standard_dev ≤ 0, <b>LogNormDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции накопительного распределения журналов: </para>
          <para>Рис. 1. Уравнение для совокупного распределения журналов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение, которое <b>lookup</b> ищет в первом векторе. Lookup_value может быть числом, текстом, логическим значением или именем или ссылкой, которая ссылается на значение.</param>
        <param name="Arg2">Lookup_vector Или Array — в форме Vector диапазон, содержащий только одну строку или один столбец. Значения в lookup_vector могут быть текстовыми, цифрами или логическими значениями. В форме массива набор ячеек, содержащий текст, цифры или логические значения, которые необходимо сравнить с lookup_value.</param>
        <param name="Arg3">Result_vector — используется только с помощью формы Vector. Диапазон, содержащий только одну строку или столбец. Он должен быть того же размера, что и lookup_vector.</param>
        <summary>Возвращает значение из диапазона одной строки или столбца или массива. Функция LOOKUP имеет две формы синтаксиса: форму вектора и форму массива.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Посмотрите в диапазоне один ряд или один столбец (известный как вектор) для значения и верните значение из одной позиции во втором диапазоне одной строки или одного столбца.</term>
              <description>Векторная форма</description>
              <description>Используйте форму вектора, когда у вас есть большой список значений, чтобы посмотреть вверх или когда значения могут изменяться с течением времени.</description>
            </item>
            <item>
              <term>Посмотрите в первом ряду или столбце массива указанное значение и верните значение из того же положения в последнем ряду или столбце массива.</term>
              <description>Форма массива</description>
              <description>Используйте форму массива, если у вас есть небольшой список значений и значения остаются неизменными с течением времени.</description>
            </item>
          </list>
          <para>
            <b>Примечание.</b>Вы также можете использовать функцию <b>Lookup</b> в качестве альтернативы функции IF для сложных тестов или тестов для более чем семи условий. Примеры см. в форме массива.</para>
          <para>Векторная форма</para>
          <para>Вектор — это диапазон только одной строки или столбца. Векторная форма <b>Lookup</b> выглядит в диапазоне один ряд или один столбец (известный как вектор) для значения и возвращает значение из того же положения во втором диапазоне одной строки или одного столбца. Используйте эту форму функции <b>Lookup,</b> когда необходимо указать диапазон, содержащий значения, которые необходимо соответствовать. Другая форма <b>Lookup</b> автоматически выглядит в первом столбце или строке.</para>
          <para>
            <b>Важно:</b>значения в lookup_vector должны быть помещены в порядке возрастания: ...,-2, -1, 0, 1, <b></b>2, ..., A-Z, false , <b>true;</b> в <b>противном случае Lookup</b> может не дать правильное значение. Текст uppercase и lowercase эквивалентны.</para>
          <para>Если LOOKUP не может найти lookup_value, оно соответствует наибольшему значению в lookup_vector, которое меньше или равно lookup_value. </para>
          <para>Если lookup_value меньше, чем наименьшее значение в lookup_vector, <b>lookup</b> #N значение ошибки.</para>
          <para>Форма массива</para>
          <para>Форма массива <b>Lookup</b> выглядит в первом ряду или столбце массива для указанного значения и возвращает значение из той же позиции в последнем ряду или столбце массива. Используйте эту форму <b>Lookup,</b> когда значения, которые необходимо соответствовать, находятся в первом ряду или столбце массива. Используйте другую форму <b>Lookup,</b> когда нужно указать расположение столбца или строки.</para>
          <para>
            <b>Совет.</b>В общем, лучше использовать функцию или функцию вместо формы <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> <b>массива Lookup</b>. Эта форма <b>Lookup предоставляется</b> для совместимости с другими программами таблиц.</para>
          <para>Если <b>lookup</b> не может найти lookup_value, он использует самое большое значение в массиве, которое меньше или равно lookup_value.</para>
          <para>Если lookup_value меньше наименьшего значения в первом ряду или столбце (в зависимости от размеров массива), <b>lookup</b> возвращает значение #N/ошибки.</para>
          <para>Форма массива <b>Lookup</b> очень похожа на функции <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> функции. Разница в том, что поиск lookup_value в первом ряду, поиск в первом столбце и поиск в lookup в соответствии с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> размерами массива. <b></b></para>
          <para>Если массив охватывает область, которая шире, чем высокая (больше столбцов, чем строк), <b>поиск</b> поиска lookup_value в первом ряду.</para>
          <para>Если массив квадратный или больше ширины (больше строк, чем столбцов), <b>поиск</b> поиска в первом столбце.</para>
          <para>С <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> помощью и , вы можете <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> индексировать вниз или поперек, но <b>Lookup</b> всегда выбирает последнее значение в строке или столбце.</para>
          <para>
            <b>Важно:</b>значения массива должны быть помещены в порядке восходящей: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true;</b> в <b>противном случае Lookup</b> может не дать правильное значение. Текст uppercase и lowercase эквивалентны.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение, используемого для поиска нужного значения в таблице.</param>
        <param name="Arg2">Lookup_array — это сопо-ный диапазон ячеек, содержащий возможные значения. Lookup_array должен быть массив или ссылка массива.</param>
        <param name="Arg3">Match_type — число -1, 0 или 1. Match_type указывает, Microsoft Excel совпадает lookup_value со значениями в lookup_array.</param>
        <summary>Возвращает относительное положение элемента в массиве, которое соответствует указанному значению в указанном порядке. Используйте <b>Match</b> вместо одной из функций, когда требуется расположение элемента в диапазоне, а <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> не самого элемента.</summary>
        <returns>To be added.</returns>
        <remarks><para>Lookup_value это значение, необходимое для lookup_array. Например, при найме номера в телефонной книге имя человека используется в качестве значения смотра, но телефонный номер — это необходимое значение.</para>
          <para>Lookup_value может быть значением (номер, текст или логическое значение) или ссылкой ячейки на число, текст или логическое значение.</para>
          <para>Если match_type значение 1, <b>match</b> находит самое большое значение, которое меньше или равно lookup_value. Lookup_array должны быть размещены в порядке возрастания: ...-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>.</para>
          <para>Если match_type 0, <b>match</b> находит первое значение, которое точно равно lookup_value. Lookup_array может быть в любом порядке.</para>
          <para>Если match_type —1, <b>match</b> находит наименьшее значение, которое больше или равно lookup_value. Lookup_array должны быть размещены в порядке убывания: <b>true,</b> <b>false,</b>Z-A, ... 2, 1, 0, -1, -2, ..., и так далее. Если match_type опущен, предполагается, что это будет 1.</para>
          <para>
            <b>Match</b> возвращает положение совпадаемого значения в lookup_array, а не само значение. Например, MATCH ("b", {"a", "b","c"},0) возвращает 2, относительное положение "b" в массиве {"a", "b","c"}. </para>
          <para>
            <b>Match</b> не различает буквы верхнего и нижнего регистра при совпадении текстовых значений. </para>
          <para>Если <b>match</b> не удалось найти совпадение, он возвращает значение #N/ошибки. </para>
          <para>Если match_type 0 и lookup_value является текстом, в lookup_value можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 номеров, для которых необходимо найти максимальное значение.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает самое большое значение в наборе значений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, используются только номера в этом массиве или ссылке. Пустые ячейки, логические значения или текст в массиве или ссылке игнорируются. </para>
          <para>Если аргументы не содержат цифр, <b>Max</b> возвращает 0 (ноль). </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если в качестве части вычисления необходимо включить логические значения и текстовые представления чисел в ссылку, используйте <see cref="MAXA" /> функцию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — числовая массивка с равным количеством строк и столбцов.</param>
        <summary>Возвращает матричный детерминант массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>Массив может быть предоставлен в качестве диапазона ячейки, например A1:C3; как константа массива, например {1,2,3;4,5,6;7,8,9}; или как имя для любого из них. <b>MDeterm</b> возвращает #VALUE! ошибка, когда: </para>
          <para>Все ячейки массива пусты или содержат текст. </para>
          <para>Массив не имеет равного количества строк и столбцов. </para>
          <para>Размер массива превышает 73 столбца на 73 строки. </para>
          <para>Детерминант матрицы — это число, полученное из значений массива. Для трехрядного массива трех столбцов A1:C3 детерминант определяется как: </para>
          <code>MDETERM(A1:C3)</code>
          <para>равно </para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Матричные детерминанты обычно используются для решения систем математических уравнений с несколькими переменными. </para>
          <para>
            <b>MDeterm</b> вычисляется с точностью около 16 цифр, что может привести к небольшой числовой ошибке, когда вычисление не завершено. Например, детерминант сингулярной матрицы может отличаться от нуля на 1E-16.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Купон — годовая ставка купона безопасности.</param>
        <param name="Arg4">Yld — годовая доходность безопасности.</param>
        <param name="Arg5">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg6">База — тип базы для подсчета дня.</param>
        <summary>Возвращает измененную продолжительность Macauley для безопасности с предполагаемым значением номина $ 100.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость, частота и основа усечены до уровня в несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>MDuration</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если yld &lt; 0 или купон &lt; 0, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Измененная продолжительность определяется следующим образом: </para>
          <para>Рис. 1. Уравнение для измененной продолжительности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 номеров, для которых необходимо медиано.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает медиану заданных номеров. Медиана — это число в середине набора чисел.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если в наборе имеется 10 чисел, <b>медиан</b> вычисляет среднее значение этих двух чисел в центре. В примере см. вторую формулу.</para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки.</para>
          <para>
            <b>Примечание.</b> <b>Функция Median</b> измеряет центральную тенденцию, которая является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной тенденции:</para>
          <list type="bullet">
            <item>
              <description>Среднее значение, которое является арифметическим значением, и вычисляется путем добавления группы чисел, а затем деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 составляет 30, разделенных на 6, то есть 5. </description>
            </item>
            <item>
              <description>Среднее число группы номеров; то есть у половины номеров есть значения, которые больше медиана, а у половины — значения, которые меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее часто происходящим номером в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 — это 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной тенденции одинаковы. Для перекоса в распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 номеров, для которых необходимо найти минимальное значение.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наименьшее число в наборе значений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, используются только номера в этом массиве или ссылке. Пустые ячейки, логические значения или текст в массиве или ссылке игнорируются. </para>
          <para>Если аргументы не содержат цифр, <b>Min</b> возвращает 0. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если в качестве части вычисления необходимо включить логические значения и текстовые представления чисел в ссылку, используйте функцию MINA.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — числовая массивка с равным количеством строк и столбцов.</param>
        <summary>Возвращает обратную матрицу для матрицы, хранимой в массиве.</summary>
        <returns>To be added.</returns>
        <remarks><para>Размер массива не должен превышать 52 столбца на 52 строки. Если это так, функция возвращает #VALUE! ошибка. </para>
          <para>Массив может быть предоставлен в качестве диапазона ячейки, например A1:C3; как константа массива, например {1,2,3;4,5,6;7,8,9}; или в качестве имени для любого из них. </para>
          <para>Если какие-либо ячейки массива пусты или содержат текст, <b>MInverse</b> возвращает #VALUE! значение ошибки. </para>
          <para>
            <b>MInverse</b> также возвращает #VALUE! значение ошибки, если массив не имеет равного количества строк и столбцов. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массивов. </para>
          <para>Обратные матрицы, такие как детерминанты, обычно используются для решения систем математических уравнений с несколькими переменными. Продуктом матрицы и ее обратной является матрица удостоверений — квадратный массив, в котором диагональные значения равны 1, а все остальные значения равны 0. </para>
          <para>В качестве примера вычисления двухрядной матрицы из двух столбцов предположим, что диапазон A1:B2 содержит буквы a, b, c и d, которые представляют все четыре номера. В следующей таблице показана обратная сторона матрицы A1:B2. </para>
          <list type="table">
            <item>
              <term>Строка 1</term>
              <description>*d/(d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>Строка 2</term>
              <description>c/(b *c-a* d)</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> вычисляется с точностью около 16 цифр, что может привести к небольшой числовой ошибке, если отмена не завершена. </para>
          <para>Некоторые квадратные матрицы невозможно перевернуть и вернут #NUM! значение ошибки <b>с MInverse</b>. Детерминант для неотвратимой матрицы — 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значения — массив или ссылка на ячейки, содержащие числа. Эти цифры представляют собой ряд платежей (отрицательных значений) и доходов (положительных значений), происходящих в регулярные периоды.</param>
        <param name="Arg2">Finance_rate — процентная ставка, которая вы платите за деньги, используемые в денежных потоках.</param>
        <param name="Arg3">Reinvest_rate — процентная ставка, получаемая при повторном влиять их на денежные потоки.</param>
        <summary>Возвращает измененную внутреннюю скорость возврата для ряда периодических денежных потоков. В МИРЕР рассматриваются как затраты на инвестиции, так и проценты, полученные при реинвестиций денежных средств.</summary>
        <returns>To be added.</returns>
        <remarks><para>Значения должны содержать по крайней мере одно положительное значение и одно отрицательное значение для вычисления измененной внутренней скорости возврата. В <b>противном случае MIrr</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>
            <b>MIrr</b> использует порядок значений для интерпретации порядка денежных потоков. Обязательно введите свои значения оплаты и дохода в нужной последовательности и с правильными знаками (положительные значения для полученных денежных средств, отрицательные значения для уплаченных наличных). </para>
          <para>Если n — это количество денежных потоков в значениях, frate — это finance_rate, а rrate — reinvest_rate, то формула <b>MIrr:</b> </para>
          <para>Рис. 1. Формула метода MIrr</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, array2 — массивы, которые необходимо умножить.</param>
        <param name="Arg2">Array1, array2 — массивы, которые необходимо умножить.</param>
        <summary>Возвращает матричный продукт из двух массивов. В результате массив с таким же количеством строк, что и array1, и тем же числом столбцов, что и array2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Число столбцов в array1 должно быть таким же, как и число строк в array2, и оба массива должны содержать только числа. </para>
          <para>Array1 и array2 можно использовать в качестве диапазонов клеток, констант массива или ссылок. </para>
          <para>
            <b>MMult</b> возвращает #VALUE! ошибка, когда: </para>
          <para>Все ячейки пусты или содержат текст. </para>
          <para>Количество столбцов в array1 отличается от количества строк в array2. </para>
          <para>Размер массива равно или больше, чем в общей сложности 5461 ячейке. </para>
          <para>Массив матричного продукта из двух массивов b и c: </para>
          <para>Figure1. Массив продуктов Matrix из двух массивов b и c</para>
          <para> </para>
          <para> </para>
          <para>где я — номер строки, а j — столбец.</para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массивов.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых необходимо рассчитать режим. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наиболее часто происходящие или повторяющиеся значения в массиве или диапазоне данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Эта функция была заменена на одну или несколько новых функций, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методах.</para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если набор данных не содержит дублирующих точек данных, <b>mode</b> возвращает значение #N/A ошибки.</para>
          <para>
            <b>Примечание.</b> <b>Функция Mode</b> измеряет центральную тенденцию, которая является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной тенденции:</para>
          <list type="bullet">
            <item>
              <description>Среднее значение, которое является арифметическим значением, и вычисляется путем добавления группы чисел, а затем деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 составляет 30, разделенных на 6, то есть 5. </description>
            </item>
            <item>
              <description>Среднее число группы номеров; то есть у половины номеров есть значения, которые больше медиана, а у половины — значения, которые меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4. </description>
            </item>
            <item>
              <description>Режим, который является наиболее часто происходящим номером в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 — это 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной тенденции одинаковы. Для перекоса в распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 — первый аргумент номера, для которого необходимо рассчитать режим.</param>
        <param name="Arg2">Number2 - Number30 . Количество аргументов от 2 до 30, для которых необходимо рассчитать режим. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает вертикальный массив наиболее часто происходящих или повторяющихся значений в массиве или диапазоне данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если набор данных не содержит дублирующих точек <b>данных,</b> Mode_Mult возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых необходимо рассчитать режим. Вы также можете использовать один массив или ссылку на массив, а не аргументы, разделенные запятой (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наиболее часто происходящие или повторяющиеся значения в массиве или диапазоне данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если набор данных не содержит дублирующих точек <b>данных,</b> Mode_Sngl возвращает значение #N/ошибки.</para>
          <para>
            <b>Примечание.</b>Функция <b>Mode_Sngl</b> измеряет центральную тенденцию, которая является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной тенденции:</para>
          <list type="bullet">
            <item>
              <description>Среднее значение арифметического значения и вычисляется путем добавления группы чисел, а затем деления на число этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 составляет 30, разделенных на 6, то есть 5. </description>
            </item>
            <item>
              <description>Среднее число группы чисел; то есть у половины номеров есть значения, которые больше медиана, а у половины — значения, которые меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4. </description>
            </item>
            <item>
              <description>Mode The most frequently occurring number in a group of numbers. Например, режим 2, 3, 3, 5, 7 и 10 — это 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной тенденции одинаковы. Для перекоса в распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение к округл.</param>
        <param name="Arg2">Несколько — это несколько номеров, на которые необходимо округлить.</param>
        <summary>Возвращает число округлилось в нужное несколько.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound</b> округляется от нуля, если остальная часть номера деления на несколько больше или равна половине значения нескольких.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1,number2, ... - от 1 до 29 значений, для которых необходимо многомерное.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает отношение коэффициента суммы значений к продукту факториалов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является ненумерным, <b>MultiNomial</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если какой-либо аргумент меньше нуля, <b>MultiNomial</b> возвращает #NUM! значение ошибки. </para>
          <para>Многомерный: </para>
          <para>Рис. 1. Уравнение для метода multiNomial</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Integer, указывав размер матрицы единицы, которую необходимо вернуть.</param>
        <summary>Возвращает матрицу единиц для указанного измерения.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_f — количество сбоев.</param>
        <param name="Arg2">Number_s — пороговое число успехов.</param>
        <param name="Arg3">Probability_s — вероятность успеха.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>NegBinom_Dist <b>возвращает</b> накопительную функцию распространения; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает отрицательное биномное распределение. <b>NegBinom_Dist</b> возвращает вероятность number_f перед number_s-го успеха, когда постоянная вероятность успеха probability_s. Эта функция аналогична биномийной рассылке, за исключением того, что количество успехов фиксировано, а количество пробных испытаний переменное. Как и в биномиале, предполагается, что испытания являются независимыми.</summary>
        <returns>To be added.</returns>
        <remarks><para>Например, необходимо найти 10 человек с отличными рефлексами, и вы знаете, что вероятность того, что кандидат имеет эти квалификации, составляет 0,3. <b>NegBinom_Dist</b> вычисляет вероятность того, что перед поиском всех 10 квалифицированных кандидатов вы будете опрашивать определенное количество неквалифицированных кандидатов: </para>
          <para>Number_f и number_s усечены на несколько этапов. </para>
          <para>Если какой-либо аргумент является <b></b> ненумерным, NegBinom_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если probability_s 0 или вероятность &lt; 1, NegBinom_Dist &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если number_f &lt; 0 или number_s &lt; 1, <b></b> NegBinom_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для отрицательного биномиального распределения: </para>
          <para>Рис. 1. Уравнение для отрицательного биномного распределения</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x — number_f, r — number_s, а p — probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_f — количество сбоев.</param>
        <param name="Arg2">Number_s — пороговое число успехов.</param>
        <param name="Arg3">Probability_s — вероятность успеха.</param>
        <summary>Возвращает отрицательное биномное распределение. NegBinomDist возвращает вероятность number_f перед number_s-го успеха, когда постоянная вероятность успеха probability_s. Эта функция аналогична биномийной рассылке, за исключением того, что количество успехов фиксировано, а количество пробных испытаний переменное. Как и в биномиале, предполагается, что испытания являются независимыми.</summary>
        <returns>To be added.</returns>
        <remarks><para>Эта функция была заменена на одну или несколько новых функций, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Например, необходимо найти 10 человек с отличными рефлексами, и вы знаете, что вероятность того, что кандидат имеет эти квалификации, составляет 0,3. <b>NegBinomDist</b> вычисляет вероятность того, что вы будете опрашивать определенное количество неквалифицированных кандидатов, прежде чем найти все 10 квалифицированных кандидатов. </para>
          <para>Number_f и number_s усечены на несколько этапов. </para>
          <para>Если какой-либо аргумент является ненумерным, <b>NegBinomDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если probability_s &lt; 0 или вероятность &gt; 1, <b>NegBinomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_f &lt; 0 или number_s &lt; 1, <b>NegBinomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для отрицательного биномиального распределения: </para>
          <para>Рис. 1. Уравнение для отрицательного биномного распределения</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x — number_f, r — number_s, а p — probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала.</param>
        <param name="Arg2">End_date — дата, представляюная даты окончания.</param>
        <param name="Arg3">Праздники — необязательный диапазон из одной или более дат, исключаемой из рабочего календаря, таких как государственные и федеральные праздники и плавучие праздники. Список может быть диапазоном ячеек, которые содержат даты, или константой массива серийных номеров, которые представляют даты.</param>
        <summary>Возвращает количество целых рабочих дней между start_date и end_date. Рабочие дни исключают выходные дни и любые даты, выявленные в праздники. Используйте <b>NetworkDays</b> для вычисления преимуществ сотрудников, которые начисляются в зависимости от количества дней, отработаных в течение определенного срока.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если какой-либо аргумент не является допустимой датой, <b>NetworkDays</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала, для которой будет вычисляться разница. Этот start_date может быть более ранним или более поздним, чем end_date.</param>
        <param name="Arg2">End_date — дата окончания вычисления разницы. Этот start_date может быть более ранним или более поздним, чем end_date.</param>
        <param name="Arg3">Weekend — указывает дни недели, которые являются выходными днями и не включаются в число целых рабочих дней между start_date и end_date. Weekend — это номер или строка выходных, которая указывает время выходных.</param>
        <param name="Arg4">Праздники — необязательный набор из одной или более дат, которые должны быть исключены из календаря рабочего дня. Праздники — это набор ячеек, содержащих даты, или константа массива последовательных значений, которые представляют эти даты. Упорядочение дат или серийных значений в праздники может быть произвольным.</param>
        <summary>Возвращает количество целых рабочих дней между двумя датами с помощью параметров, чтобы указать, какие и сколько дней являются выходными днями. Выходные дни и дни, указанные в качестве праздников, не считаются рабочими днями.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если start_date более позднее end_date, возвращается значение будет отрицательным, а величиной будет число целых рабочих дней. </para>
          <para>Если start_date для текущего базового значения даты находится вне <b>диапазона,</b> NetworkDays_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если end_date находится вне диапазона для текущего базового <b>значения</b> даты, NetworkDays_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если строка выходные имеет недействительную длину или содержит недействительные <b>символы,</b> NetworkDays_Intl возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Effect_rate — эффективная процентная ставка.</param>
        <param name="Arg2">Npery — количество периодов соединения в год.</param>
        <summary>Возвращает номинальную годовую процентную ставку, учитывая эффективную ставку и количество периодов соединения в год.</summary>
        <returns>To be added.</returns>
        <remarks><para>Npery усечен до integer. </para>
          <para>Если один из аргументов не является числимым, <b>Номинальный</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если effect_rate ≤ 0 или npery &lt; 1, <b>Номинальный</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Номинальный</b> связан с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> тем, как показано в следующем уравнении: </para>
          <para>Рис. 1. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X . Значение, для которого нужно распространение.</param>
        <param name="Arg2">Mean — арифметическое означает распределение.</param>
        <param name="Arg3">Standard_dev — стандартное отклонение дистрибутива.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>Norm_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>false,</b>он возвращает функцию массы вероятности.</param>
        <summary>Возвращает нормальное распределение для указанного стандартного и стандартного отклонения. Эта функция имеет широкий спектр приложений в статистике, в том числе тестирование гипотез.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если standard_dev или <b>Norm_Dist,</b> Norm_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>Norm_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если означает = 0, standard_dev = 1, а накопительный <b>=</b>true <b>,</b> Norm_Dist возвращает стандартное нормальное распределение, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . </para>
          <para>Уравнение для нормальной функции плотности (кумулятивное = <b>ложное)</b>является: </para>
          <para>Рис. 1. Уравнение для нормальной функции плотности</para>
          <para> </para>
          <para> </para>
          <para>При <b>кумулятивном</b>= true формула является неотъемлемой частью от отрицательной бесконечности до x данной формулы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, соответствующая нормальному распределению.</param>
        <param name="Arg2">Mean — арифметическое означает распределение.</param>
        <param name="Arg3">Standard_dev — стандартное отклонение дистрибутива.</param>
        <summary>Возвращает обратное нормальное кумулятивное распределение для указанного стандартного и стандартного отклонения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> числим, Norm_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность = 0 или вероятность &lt; = 1, Norm_Inv &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>Norm_Inv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если означает = 0 и standard_dev = <b></b> 1, Norm_Inv использует стандартное нормальное распределение (см. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> ).</para>
          <para>Учитывая значение <b>вероятности,</b> Norm_Inv ищет это значение x таким образом, что NORM_DIST (x, означает, standard_dev, TRUE) = вероятность. Таким образом, <b>точность Norm_Inv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z . Значение, для которого нужно распространение.</param>
        <param name="Arg2">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>Norm_S_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>false,</b>он возвращает функцию массы вероятности.</param>
        <summary>Возвращает стандартную нормальную накопительную функцию распределения. В дистрибутиве имеется значение 0 (ноль) и стандартное отклонение одного. Используйте эту функцию на месте таблицы стандартных нормальных областей кривой.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если z не числим, <b>Norm_S_Dist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Уравнение для стандартной нормальной функции плотности: </para>
          <para>Рис. 1. Уравнение для стандартной нормальной функции плотности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, соответствующая нормальному распределению.</param>
        <summary>Возвращает обратную часть обычного кумулятивного распределения. В дистрибутиве имеется значение 0 (ноль) и стандартное отклонение одного.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если вероятность не числовая, <b></b> Norm_S_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или вероятность &lt; &gt; 1, Norm_S_Inv возвращает #NUM! <b></b> значение ошибки.</para>
          <para>Учитывая значение вероятности, <b>Norm_S_Inv</b> ищет это значение z таким образом, что NORM_S_DIST (z) = вероятность. Таким образом, <b>точность Norm_S_Inv</b>зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . <b>Norm_S_Inv</b> использует итеративный метод поиска. Если поиск не сошелся после 100 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение, для которого нужно распределение.</param>
        <param name="Arg2">Mean — арифметическое средство распределения.</param>
        <param name="Arg3">Standard_dev — стандартное отклонение дистрибутива.</param>
        <param name="Arg4">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная сумма соответствует действительности,</b> <b>NormDist</b> возвращает накопительную функцию рассылки; если <b>false,</b>он возвращает функцию массы вероятности.</param>
        <summary>Возвращает нормальное распределение для указанного стандартного и стандартного отклонения. Эта функция имеет очень широкий спектр приложений в статистике, в том числе тестирование гипотез.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если standard_dev или standard_dev, <b>NormDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>NormDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если означает = 0, standard_dev = 1, и накопительный = <b>true,</b> <b>NormDist</b> возвращает стандартное нормальное распределение, <b>NormDist</b>. </para>
          <para>Уравнение для нормальной функции плотности (кумулятивное = <b>ложное)</b>является: </para>
          <para>Рис. 1. Уравнение для нормальной функции плотности</para>
          <para> </para>
          <para> </para>
          <para>При <b>кумулятивном</b>= true формула является неотъемлемой частью от отрицательной бесконечности до x данной формулы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — это вероятность, соответствующая нормальному распределению.</param>
        <param name="Arg2">Mean — арифметическое средство распределения.</param>
        <param name="Arg3">Standard_dev — стандартное отклонение дистрибутива.</param>
        <summary>Возвращает обратное нормальное кумулятивное распределение для указанного стандартного и стандартного отклонения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> методе.</para>
          <para>Если какой-либо аргумент не является числовым, <b>NormInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>NormInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>NormInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если означает = 0 и standard_dev = 1, <b>NormInv</b> использует стандартное нормальное распределение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> (см. ). </para>
          <para>Учитывая значение вероятности, <b>NormInv</b> ищет это значение x таким, что NORMDIST (x, означает, standard_dev, TRUE) = вероятность. Таким образом, точность <b>NormInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>NormInv</b> использует итеративный метод поиска. Если поиск не сошелся после 100 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z — значение, для которого нужно распределение.</param>
        <summary>Возвращает стандартную нормальную накопительную функцию распределения. В дистрибутиве имеется значение 0 (ноль) и стандартное отклонение одного. Используйте эту функцию на месте таблицы стандартных нормальных областей кривой.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> методе.</para>
          <para>Если z является ненумерным, <b>NormSDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Уравнение для стандартной нормальной функции плотности: </para>
          <para>Рис. 1. Уравнение для стандартной нормальной функции плотности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — это вероятность, соответствующая нормальному распределению.</param>
        <summary>Возвращает обратную часть обычного кумулятивного распределения. В дистрибутиве имеется значение нуля и стандартное отклонение одного.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> методе.</para>
          <para>Если вероятность является ненумерной, <b>NormSInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность = 0 или вероятность &lt; = &gt; 1, <b>NormSInv</b> возвращает #NUM! значение ошибки.</para>
          <para>Учитывая значение вероятности, <b>NormSInv</b> ищет это значение z таким, что NORMSDIST (z) = вероятность. Таким образом, точность <b>NormSInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate — процентная ставка за период.</param>
        <param name="Arg2">Pmt — оплата за каждый период; она не может измениться в течение жизни аннуитета. Как правило, pmt содержит основные и проценты, но никаких других сборов или налогов.</param>
        <param name="Arg3">Pv — это настоящее значение или единовременная сумма, которую стоит ряд будущих платежей прямо сейчас.</param>
        <param name="Arg4">Fv — будущее значение или баланс наличных средств, который необходимо достичь после последнего платежа. Если fv опущен, предполагается, что значение 0 (будущее значение кредита, например, 0).</param>
        <param name="Arg5">Тип — номер 0 или 1 и указывает, когда должны быть платежи.</param>
        <summary>Возвращает количество периодов для инвестиций на основе периодических, постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate — ставка скидки в течение одного периода.</param>
        <param name="Arg2">Value1, value2, ... - от 1 до 29 аргументов, представляющих платежи и доходы.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет чистое настоящее значение инвестиции, используя учетную ставку и ряд будущих платежей (отрицательные значения) и доход (положительные значения).</summary>
        <returns>To be added.</returns>
        <remarks><para>Value1, value2, ... должно быть одинаково размеяно во времени и происходить в конце каждого периода. </para>
          <para>
            <b>Npv</b> использует порядок значения1, value2, ... для интерпретации порядка денежных потоков. Обязательно введите значения оплаты и дохода в правильной последовательности. </para>
          <para>Учитываются аргументы, которые являются числами, пустыми ячейками, логическими значениями или текстовыми представлениями чисел; игнорируются аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются.</para>
          <para>Инвестиция <b>Npv</b> начинается за период до даты денежного потока value1 и заканчивается последним денежным потоком в списке. Расчет <b>Npv</b> основан на будущих денежных потоках. Если первый денежный поток возникает в начале первого периода, первое значение должно быть добавлено к результату <b>Npv,</b> не включено в аргументы значения. Дополнительные сведения см. в примерах ниже. </para>
          <para>Если n — это количество денежных потоков в списке значений, формула <b>Npv:</b> </para>
          <para>Рис. 1. Формула метода Npv</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv</b> похож на <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> функцию (настоящее значение). Основное различие между PV и <b>Npv</b> заключается в том, что денежные потоки начинаются либо в конце, либо <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> в начале периода. В отличие от переменных значений денежного потока <b>Npv,</b> потоки наличных средств должны быть постоянными <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> на протяжении всей инвестиции. Сведения о аннуитетах и финансовых функциях <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> см. в . </para>
          <para>
            <b>Npv</b> также связан с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> функцией (внутренняя скорость возврата). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> это скорость, для которой <b>Npv</b> равен нулю: NPV(IRR(...), ...) = 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Строка, представляющая число, необходимое для преобразования.</param>
        <param name="Arg2">Символ, используемый в качестве десятичных сепараторов в строке.</param>
        <param name="Arg3">Символ, используемый в качестве группового сепаратора в строке.</param>
        <summary>Преобразование текста в число в независимом от локальной области порядке.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — восьмиугольный номер, который необходимо преобразовать. Число может содержать не более 10 символов. Наиболее значительным числом является бит знака. Остальные 29 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>oct2Bin</b> использует минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует восьмиугольный номер в двоичный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Oct2Bin</b> игнорирует места и возвращает двоичный номер из 10 символов. </para>
          <para>Если число отрицательное, оно не может быть меньше 7777777000, а если число положительное, оно не может быть больше 777. </para>
          <para>Если номер не является допустимым восьмистоловым номером, <b>Oct2Bin</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>oct2Bin</b> требует больше, чем места символов, он возвращает #NUM! значение ошибки. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>Oct2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Oct2Bin</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — восьмиугольный номер, который необходимо преобразовать. Число может содержать не более 10 октальных символов (30 бит). Наиболее значительным числом является бит знака. Остальные 29 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <summary>Преобразует восьмимерный номер в десятичной.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер не является допустимым восьмидюймовым номером, <b>Oct2Dec</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — восьмиугольный номер, который необходимо преобразовать. Число может содержать не более 10 октальных символов (30 бит). Наиболее значительным числом является бит знака. Остальные 29 битов — это биты величины. Отрицательные числа представляются с помощью нотации с двумя дополнениями.</param>
        <param name="Arg2">Места — количество символов, которые нужно использовать. Если места опущены, <b>в Oct2Hex</b> используется минимальное количество символов, необходимых. Места полезны для заполнения возвращаемой величины с ведущими 0 (нулями).</param>
        <summary>Преобразует восьмидюймовый номер в hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Oct2Hex</b> игнорирует места и возвращает 10-символов гексадецимального номера. </para>
          <para>Если номер не является допустимым восьмидверным номером, <b>Oct2Hex</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>oct2Hex</b> требует больше, чем места символов, он возвращает #NUM! значение ошибки. </para>
          <para>Если места не являются неинтегрированной, она усечена. </para>
          <para>Если места ненумерные, <b>Oct2Hex</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Oct2Hex</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — значение к округл.</param>
        <summary>Возвращает число, округлившись до ближайшего нечетного числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число ненумерное, <b>Нечет</b> возвращает #VALUE! значение ошибки. </para>
          <para>Независимо от знака номера, значение округляется при отрегулировании от нуля. Если число является нечетным числом, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата проблемы безопасности.</param>
        <param name="Arg4">First_coupon — дата первого купона безопасности.</param>
        <param name="Arg5">Rate — процентная ставка безопасности.</param>
        <param name="Arg6">Yld — годовая доходность безопасности.</param>
        <param name="Arg7">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg8">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg9">База — тип базы для подсчета дня.</param>
        <summary>Возвращает цену за $100 номина безопасность с нечетным (коротким или длинным) первым периодом.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчеты, зрелость, выпуск, first_coupon и основа усечены в несколько этапов. </para>
          <para>Если расчет, зрелость, проблема или first_coupon не являются допустимой датой, <b>OddFPrice</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка &lt; 0 или yld &lt; 0, <b>OddFPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>OddFPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Условие следующей даты должно быть удовлетворено; в <b>противном случае OddFPrice</b> возвращает #NUM! значение ошибки: </para>
          <para>вопрос &gt; first_coupon &gt; погашения &gt;</para>
          <para> </para>
          <para>
            <b>OddFPrice</b> рассчитывается следующим образом: Нечетный короткий первый купон:</para>
          <para>Рис. 1. Нечетный короткий первый купон</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>A = количество дней с начала купонного периода до даты урегулирования (начисляемого дня).</para>
          <para>DSC = количество дней от урегулирования до следующей даты купона.</para>
          <para>DFC = количество дней с начала нечетного первого купона до даты первого купона.</para>
          <para>E = количество дней в период купона.</para>
          <para>N = количество купонов, уплачиваться между датой урегулирования и датой погашения. (Если это число содержит фракцию, она повышается до следующего целого номера.)</para>
          <para>Нечетный длинный первый купон:</para>
          <para>Рис. 2. Нечетный длинный первый купон</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Ai = количество дней с начала ith или последнего квази-купонного периода в нечетный период.</para>
          <para>DCi = количество дней с датой (или датой выпуска) до первого квази-купона (i = 1) или числа дней в квази-купоне (i = 2,..., i = NC).</para>
          <para>DSC = количество дней от урегулирования до следующей даты купона.</para>
          <para>E = количество дней в период купона.</para>
          <para>N = количество купонов, которые будут выплачиваться между первой датой реального купона и датой погашения. (Если это число содержит фракцию, она повышается до следующего целого номера.)</para>
          <para>NC = количество периодов квази-купона, которые соответствуют нечетным периодам. (Если это число содержит фракцию, она повышается до следующего целого номера.)</para>
          <para>NLi = нормальная длина в дни полного ith или последнего квази-купонного периода в течение нечетного периода.</para>
          <para>Nq = число целых периодов квази-купона между датой урегулирования и первым купоном.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата проблемы безопасности.</param>
        <param name="Arg4">First_coupon — дата первого купона безопасности.</param>
        <param name="Arg5">Rate — процентная ставка безопасности.</param>
        <param name="Arg6">Pr — цена безопасности.</param>
        <param name="Arg7">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg8">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg9">База — тип базы для подсчета дня.</param>
        <summary>Возвращает доходность безопасности с нечетным (коротким или длинным) первым периодом.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчеты, зрелость, выпуск, first_coupon и основа усечены в несколько этапов. </para>
          <para>Если расчет, срок погашения, выпуск или first_coupon не являются допустимой датой, <b>OddFYield</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка 0 или &lt; если pr ≤ 0, <b>OddFYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>OddFYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Условие следующей даты должно быть удовлетворено; в <b>противном случае OddFYield</b> возвращает #NUM! значение ошибки: </para>
          <para>вопрос &gt; first_coupon &gt; погашения &gt;</para>
          <para>Excel использует итеративный метод для вычисления <b>OddFYield</b>. Эта функция использует метод Newton на основе формулы, используемой для <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> функции. Доходность меняется через 100 итераций до тех пор, пока оценочная цена с заданным доходом не будет близка к цене. См. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> формулу, которую <b>использует OddFYield.</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Last_interest — дата последнего купона безопасности.</param>
        <param name="Arg4">Rate — процентная ставка безопасности.</param>
        <param name="Arg5">Yld — годовая доходность безопасности.</param>
        <param name="Arg6">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg7">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg8">База — тип базы для подсчета дня.</param>
        <summary>Возвращает цену за $100 номина безопасность с нечетным (коротким или длинным) последним периодом купона.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость, last_interest и основа усечены в несколько этапов. </para>
          <para>Если расчет, срок погашения или last_interest не является допустимой датой, <b>OddLPrice</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка &lt; 0 или yld &lt; 0, <b>OddLPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>OddLPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Условие следующей даты должно быть удовлетворено; в <b>противном случае OddLPrice</b> возвращает #NUM! значение ошибки: </para>
          <para>расчет &gt; зрелости &gt; last_interest</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Last_interest — дата последнего купона безопасности.</param>
        <param name="Arg4">Rate — процентная ставка безопасности.</param>
        <param name="Arg5">Pr — цена безопасности.</param>
        <param name="Arg6">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg7">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg8">База — тип базы для подсчета дня.</param>
        <summary>Возвращает доходность безопасности с нечетным (коротким или длинным) последним периодом.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость, last_interest и основа усечены в несколько этапов. </para>
          <para>Если расчет, срок погашения или last_interest не является допустимой датой, <b>OddLYield</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка 0 или &lt; pr ≤ 0, <b>OddLYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>OddLYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Условие следующей даты должно быть удовлетворено; в <b>противном случае OddLYield</b> возвращает #NUM! значение ошибки: </para>
          <para>расчет &gt; зрелости &gt; last_interest </para>
          <para>
            <b>OddLYield</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода OddLYield</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Ai = количество начисляемого дня для ith или последнего квази-купонного периода в течение нечетного периода, считая вперед с последней даты процентов перед погашением.</para>
          <para>DCi = количество дней, засчитывалось в ith или последний период квази-купона, как делимитированный по длине фактического периода купона.</para>
          <para>NC = количество периодов квази-купона, которые подходят в нечетный период; если это число содержит фракцию, она будет поднята до следующего целого номера.</para>
          <para>NLi = нормальная длина в дни ith, или последний, квази-купонный период в течение нечетного периода купона.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1,logical2,... - от 1 до 30 условий, которые вы хотите проверить, которые могут быть <b>или</b> true или <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает <b>верно,</b> если какой-либо аргумент <b>является верным;</b> возвращает <b>ложный,</b> если все аргументы являются <b>ложными.</b></summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы должны оцениваться до логических значений, таких как <b>true</b> или <b>false,</b>или в массивах или ссылках, содержащих логические значения. </para>
          <para>Если аргумент массива или ссылки содержит текстовые или пустые ячейки, эти значения игнорируются. </para>
          <para>Если указанный диапазон не содержит логических значений, <b>или</b> возвращает #VALUE! значение ошибки. </para>
          <para>Вы можете использовать <b>формулу Или</b> массив, чтобы узнать, возникает ли значение в массиве. Чтобы ввести формулу массива, нажмите кнопку CTRL+SHIFT+ENTER.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает родительский объект для указанного объекта. Только для чтения.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Процентная ставка за период.</param>
        <param name="Arg2">Настоящее значение инвестиций.</param>
        <param name="Arg3">Желаемое будущее значение инвестиций.</param>
        <summary>Возвращает количество периодов, необходимых для инвестиций для достижения указанного значения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — набор независимых значений.</param>
        <param name="Arg2">Array2 — это набор зависимых значений.</param>
        <summary>Возвращает коэффициент корреляции моментов продукта Pearson r, индекс без измерения, который колеблется от -1.0 до 1.0 включительно и отражает степень линейной связи между двумя наборами данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть номера или имена, константы массива или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если array1 и array2 пусты или имеют другое количество точек данных, <b>Pearson</b> возвращает значение #N/A ошибки. </para>
          <para>Формула коэффициента корреляции моментов продукта Pearson r: </para>
          <para>Рис. 1. Коэффициент корреляции моментов продукта Pearson</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются пример означает AVERAGE (array1) и AVERAGE (array2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных, определяя относительное положение.</param>
        <param name="Arg2">K — процентильное значение в диапазоне 0.1 включительно.</param>
        <summary>Возвращает процентил значений k-th в диапазоне. Эту функцию можно использовать для установления порогового значения принятия. Например, вы можете проверить кандидатов, которые набрали больше 90 процентила.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> методе и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> методе. </para>
          <para>Если массив пуст, <b>Percentile</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k является ненумерным, <b>Percentile</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если k &lt; 0 или k &gt; 1, <b>Percentile</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k не является нескольким из 1/(n - 1), <b>процентил</b> интерполирует, чтобы определить значение в k-th percentile.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array . Массив или диапазон данных, определяя относительное положение.</param>
        <param name="Arg2">K . Процентильное значение в диапазоне 0.1, эксклюзивное.</param>
        <summary>Возвращает процентиль значений k-th в диапазоне, где k находится в диапазоне 0.1, эксклюзивный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>Percentile_Exc</b> возвращает #NUM! значение ошибки </para>
          <para>Если k является ненумерным, <b>Percentile_Exc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если k ≤ 0 или ≥ 1, Percentile_Exc <b></b> возвращает #NUM! значение ошибки. </para>
          <para>Если k не является нескольким из 1/(n - <b>1),</b> Percentile_Exc интерполирует, чтобы определить значение в процентиле k-th. </para>
          <para>
            <b>Percentile_Exc</b> интерполирует, когда значение указанного процентила находится между двумя значениями в массиве. Если он не может интерполировать процентил, указанный k, Excel возвращается #NUM! ошибка.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array . Массив или диапазон данных, определяя относительное положение.</param>
        <param name="Arg2">K . Процентильное значение в диапазоне 0.1 включительно.</param>
        <summary>Возвращает процентил значений k-th в диапазоне. Эту функцию можно использовать для установления порогового значения принятия. Например, можно изучить кандидатов, которые набрали больше 90 процентила.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Percentile_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k является ненумерным, <b>Percentile_Inc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если k — 0 или &lt; k &gt; 1, Percentile_Inc возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если k не является несколько 1/(n <b></b> - 1), Percentile_Inc интерполирует, чтобы определить значение в процентиле k-th.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных с числными значениями, которые определяют относительное положение.</param>
        <param name="Arg2">X — это значение, для которого необходимо знать ранж.</param>
        <param name="Arg3">Значение — необязательное значение, определяее количество значительных цифр для возвращенного процентного значения. Если не будет пропущено, <b>PercentRank использует</b> три цифры (0.xxx).</param>
        <summary>Возвращает ранг значения в наборе данных в процентах от набора данных. Эта функция может использоваться для оценки относительного значения в наборе данных. Например, вы можете использовать <b>PercentRank</b> для оценки оценки способности среди всех баллов для теста.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> методах.</para>
          <para>Если массив пуст, <b>PercentRank</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значение &lt; 1, <b>PercentRank</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x не соответствует одному из значений массива, <b>PercentRank</b> интерполирует, чтобы вернуть правильный процентный ранг.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array . Массив или диапазон данных с числовых значений, определяемого относительным положением.</param>
        <param name="Arg2">X — значение, для которого необходимо знать ранж.</param>
        <param name="Arg3">Значение — значение, определяее число значимых цифр для возвращенного процентного значения. Если не будет пропущено, <b>PercentRank_Exc</b> использует три цифры (0.xxx).</param>
        <summary>Возвращает ранг значения в наборе данных в процентах (0.1, эксклюзив) набора данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>PercentRank_Exc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значение &lt; 1, <b>PercentRank_Exc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x не соответствует одному из <b></b> значений массива, PercentRank_Exc интерполирует для возврата правильного процентного ранга.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array . Массив или диапазон данных с числовых значений, определяемого относительным положением.</param>
        <param name="Arg2">X — значение, для которого необходимо знать ранж.</param>
        <param name="Arg3">Значение — необязательное значение, определяее количество значительных цифр для возвращенного процентного значения. Если не будет пропущено, <b>PercentRank_Inc</b> использует три цифры (0.xxx).</param>
        <summary>Возвращает ранг значения в наборе данных в процентах (0,1 включительно) набора данных. Эта функция может использоваться для оценки относительного значения в наборе данных. Например, вы можете использовать <b>PercentRank_Inc</b> для оценки оценки способности среди всех баллов для теста.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>PercentRank_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значение &lt; 1, <b>PercentRank_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x не соответствует одному из <b></b> значений массива, PercentRank_Inc интерполирует, чтобы вернуть правильный процентный ранг.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — это целый ряд, который описывает количество объектов.</param>
        <param name="Arg2">Number_chosen — это целый ряд, который описывает количество объектов в каждой перемывке.</param>
        <summary>Возвращает количество перемыкаций для заданного количества объектов, которые можно выбрать из объектов номеров. Перестановка — это любой набор или подмножество объектов или событий, в которых внутренний порядок имеет важное значение. Перемыкания отличаются от комбинаций, для которых внутренний порядок не является значительным. Используйте эту функцию для расчетов вероятностей в стиле лотереи.</summary>
        <returns>To be added.</returns>
        <remarks><para>Оба аргумента усечены на несколько этапов. </para>
          <para>Если номер или number_chosen ненумерные, <b>Permut</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если номер ≤ 0 или number_chosen &lt; 0, <b>Permut</b> возвращает #NUM! значение ошибки. </para>
          <para>Если номер &lt; number_chosen, <b>Permut</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для количества перемыкаций: </para>
          <para>Рис. 1. Уравнение для количества перемыкаций</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Общее количество объектов.</param>
        <param name="Arg2">Количество объектов в каждой перемыве.</param>
        <summary>Возвращает количество перемыканий для заданного количества объектов (с повторами), которые можно выбрать из общего числа объектов.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер, для которого нужна плотность стандартного нормального распространения.</param>
        <summary>Возвращает значение функции плотности для стандартного нормального распределения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Справка — текстовая строка или ссылка на одну ячейку или диапазон ячеек, содержащих текстовую строку фуриганы.</param>
        <summary>Извлекает фонетические (фуригана) символы из строки текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если ссылка — это диапазон ячеек, возвращается текстовая строка фуриганы в верхнем левом углу диапазона. </para>
          <para>Если эталон — это диапазон неадекционных ячеек, #N/A возвращается значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает число 3.14159265358979, математическое постоянное pi, точное до 15 цифр.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка по кредиту.</param>
        <param name="Arg2">Nper — общее количество платежей по кредиту.</param>
        <param name="Arg3">Pv — это настоящее значение или общая сумма, на которую сейчас стоит серия будущих платежей; также известен как основной.</param>
        <param name="Arg4">Fv — будущее значение или баланс наличных средств, который необходимо достичь после последнего платежа. Если fv опущен, предполагается, что значение 0 (ноль), то есть будущее значение кредита — 0.</param>
        <param name="Arg5">Тип — число 0 (ноль) или 1 и указывает, когда должны быть платежи.</param>
        <summary>Рассчитывает платеж по кредиту на основе постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Более полное описание аргументов в <b>Pmt</b>см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> этой функции.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Платеж, возвращаемый <b>pmt,</b> включает основные и проценты, но не налоги, резервные платежи или сборы, иногда связанные с кредитами. </para>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту с годовой процентной ставкой 12 процентов, используйте 12%/12 для ставки и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12 процентов для ставки и 4 для nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — количество событий.</param>
        <param name="Arg2">Mean — ожидаемое численное значение.</param>
        <param name="Arg3">Накопительное значение — логическое значение, определя которое определяет форму возвращаемого распределения вероятностей. Если кумулятивная является TRUE, POISSON возвращает совокупную вероятность Poisson, что число случайных событий, происходящих, будет от нуля до x включительно; если FALSE, он возвращает функцию массы вероятностей Poisson, что количество происходящих событий будет точно x.</param>
        <summary>Возвращает распределение Poisson. Распространенным приложением распределения Poisson является прогнозирование количества событий за определенное время, например количество автомобилей, прибывающих на платную площадь за 1 минуту.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x не является integer, он усечен. </para>
          <para>Если x или mean не числимы, <b>Poisson</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Poisson</b> возвращает #NUM! значение ошибки. </para>
          <para>Если означает ≤ 0, <b>Poisson</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Poisson</b> рассчитывается следующим образом. </para>
          <para>Для накопительного = <b>false</b>:</para>
          <para>Рис. 1. Calcuation, когда накопительный является ложным</para>
          <para> </para>
          <para> </para>
          <para>Для накопительного = <b>true:</b></para>
          <para>Рис. 2. Calcuation, когда кумулятивная является верной</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X . Количество событий.</param>
        <param name="Arg2">Mean — ожидаемое числовое значение.</param>
        <param name="Arg3">Накопительное значение — логическое значение, определя которое определяет форму возвращаемого распределения вероятностей. Если кумулятивный является <b>верным,</b> <b>Poisson_Dist</b> возвращает совокупную вероятность Poisson, что число случайных событий, происходящих, будет между 0 (ноль) и x включительно; если <b>false,</b>он возвращает функцию массы вероятности Poisson, что количество происходящих событий будет точно x.</param>
        <summary>Возвращает распределение Poisson. Распространенным приложением распределения Poisson является прогнозирование количества событий за определенное время, например количество автомобилей, прибывающих на платную площадь за одну минуту.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является integer, он усечен. </para>
          <para>Если x или mean не <b></b> числимы, Poisson_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Poisson_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если означает ≤ 0, <b>Poisson_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Poisson_Dist</b> рассчитывается следующим образом. </para>
          <para>Для накопительного = <b>false</b>:</para>
          <para>Рис. 1. Calcuation, когда накопительный является ложным</para>
          <para> </para>
          <para> </para>
          <para>Для накопительного = <b>true:</b></para>
          <para>Рис. 2. Calcuation, когда кумулятивная является верной</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — базовый номер. Это может быть любое реальное число.</param>
        <param name="Arg2">Power — показатель, к которому будет поднят базовый номер.</param>
        <summary>Возвращает результат номера, поднятого в power.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate — процентная ставка за период.</param>
        <param name="Arg2">Per — период и должен быть в диапазоне от 1 до nper.</param>
        <param name="Arg3">Nper — общее количество периодов оплаты в аннуитет.</param>
        <param name="Arg4">Pv — настоящее значение — общая сумма, которую сейчас стоит серия будущих платежей.</param>
        <param name="Arg5">Fv — будущее значение или баланс наличных средств, который необходимо достичь после последнего платежа. Если fv опущен, предполагается, что значение 0 (ноль), то есть будущее значение кредита — 0.</param>
        <param name="Arg6">Тип — номер 0 или 1 и указывает, когда должны быть платежи.</param>
        <summary>Возвращает платеж по основному за заданный период для инвестиций на основе периодических, постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Более полное описание аргументов в <b>Ppmt</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> см. в .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту под 12% годовых, используйте 12%/12 для ставки и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Rate — годовая ставка купона безопасности.</param>
        <param name="Arg4">Yld — годовая доходность безопасности.</param>
        <param name="Arg5">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg6">Частота — количество купонных платежей в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартала частота = 4.</param>
        <param name="Arg7">База — тип базы для подсчета дня.</param>
        <summary>Возвращает цену за $100 номина безопасности, которая платит периодические проценты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость, частота и основа усечены до уровня в несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>Цена</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если yld &lt; 0 или если ставка &lt; 0, <b>цена</b> возвращает #NUM! значение ошибки. </para>
          <para>Если выкуп ≤ 0, <b>Цена</b> возвращает #NUM! значение ошибки. </para>
          <para>Если частота не превышает 1, 2 или <b></b> 4, цена возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>цена</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>Цена</b> возвращает #NUM! значение ошибки. <b>Цена</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Метод Equation for Price</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>DSC = количество дней от урегулирования до следующей даты купона.</para>
          <para>E = количество дней в период купона, в который падает дата расчета.</para>
          <para>N = количество купонов, которые будут выплачиваться между датой урегулирования и датой погашения.</para>
          <para>= количество дней с начала купонного периода до даты урегулирования.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Дисконт — это учетная ставка безопасности.</param>
        <param name="Arg4">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg5">База — тип базы для подсчета дня.</param>
        <summary>Возвращает цену за $100 номина с дисконтной безопасностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость и основа усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>PriceDisc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если скидка ≤ 0 или ≤ 0, <b>PriceDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>PriceDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>PriceDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>PriceDisc</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода PriceDisc</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DSM = количество дней от урегулирования до срока погашения.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата выпуска безопасности, выраженная как серийный номер даты.</param>
        <param name="Arg4">Rate — процентная ставка безопасности на дату выпуска.</param>
        <param name="Arg5">Yld — годовая доходность безопасности.</param>
        <param name="Arg6">База — тип базы для подсчета дня.</param>
        <summary>Возвращает цену за $100 номина безопасность, которая платит проценты по сроку погашения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчеты, сроки погашения, выпуск и основа усечены в несколько этапов. </para>
          <para>Если урегулирование, срок погашения или проблема не являются допустимой датой, <b>PriceMat</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка &lt; 0 или yld &lt; 0, <b>PriceMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>PriceMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>PriceMat</b> возвращает #NUM! значение ошибки. <b>PriceMat</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода PriceMat</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DSM = количество дней от урегулирования до срока погашения.</para>
          <para>DIM = количество дней от выпуска до зрелости.</para>
          <para>= количество дней от проблемы до урегулирования.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X_range — диапазон численых значений x, с которыми связаны вероятности.</param>
        <param name="Arg2">Prob_range — набор вероятностей, связанных со значениями в x_range.</param>
        <param name="Arg3">Lower_limit — нижняя граница значения, для которого нужна вероятность.</param>
        <param name="Arg4">Upper_limit — необязательный верхний предел значения, для которого нужна вероятность.</param>
        <summary>Возвращает вероятность того, что значения в диапазоне находятся между двумя ограничениями. Если upper_limit не поставляется, возвращается вероятность того, что значения в x_range равны lower_limit.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если любое значение в prob_range ≤ 0 или любое значение в prob_range &gt; 1, <b>Prob</b> возвращает #NUM! значение ошибки. </para>
          <para>Если сумма значений в prob_range ¹ 1, <b>Prob</b> возвращает #NUM! значение ошибки. </para>
          <para>Если upper_limit опущен, <b>Prob</b> возвращает вероятность того, что она равна lower_limit. </para>
          <para>Если x_range и prob_range содержат различное количество точек данных, <b>Prob</b> возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 номеров, которые нужно умножить.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Умножает все числа, данные в качестве аргументов, и возвращает продукт.</summary>
        <returns>To be added.</returns>
        <remarks><para>Учитываются аргументы, которые являются числами, логическими значениями или текстовыми представлениями чисел; аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст, заключенный в кавычках, формулу, возвращаемую текст, или ссылку на ячейку, содержащую текст, который необходимо частично капитализировать.</param>
        <summary>Закапитализует первую букву в текстовой строке и любые другие буквы в тексте, которые следуют за любыми символами, кроме буквы. Преобразует все остальные буквы в нижние буквы.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate — процентная ставка за период. Например, если вы получите автокредит под 10%-ную годовую процентную ставку и делаете ежемесячные платежи, то процентная ставка в месяц составляет 10%/12 или 0,83%. В формулу в качестве ставки введите 10%/12 или 0,83%, или 0,0083.</param>
        <param name="Arg2">Nper — общее количество периодов оплаты в аннуитет. Например, если вы получаете четырехлетний автокредит и делаете ежемесячные платежи, ваш кредит имеет периоды 4*12 (или 48). В формулу nper введите 48.</param>
        <param name="Arg3">Pmt — оплата, вносяая каждый период и не может изменяться в течение срока действия аннуитета. Как правило, pmt включает основные и проценты, но не другие сборы или налоги. Например, ежемесячные платежи по автокредиту в размере $10 000 с четырехлетием под 12 процентов — $263,33. В формулу в качестве pmt введите -263.33. Если pmt опущен, необходимо включить аргумент fv.</param>
        <param name="Arg4">Fv — будущее значение или баланс наличных средств, который необходимо достичь после последнего платежа. Если fv опущен, предполагается, что значение 0 (будущее значение кредита, например, 0). Например, если вы хотите сэкономить $50 000 для оплаты специального проекта через 18 лет, то $50 000 — это будущее значение. Затем можно сделать консервативное предположение по процентной ставке и определить, сколько нужно экономить каждый месяц. Если fv опущен, необходимо включить аргумент pmt.</param>
        <param name="Arg5">Тип — номер 0 или 1 и указывает, когда должны быть платежи.</param>
        <summary>Возвращает настоящее значение инвестиции. Настоящее значение — это общая сумма, на которую сейчас стоит серия будущих платежей. Например, когда вы занимаете деньги, сумма кредита является настоящим значением для кредитора.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания скорости и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту под 12% годовых, используйте 12%/12 для ставки и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для ставки и 4 для nper. </para>
          <para>К аннуитетам применяются следующие функции: </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Аннуитет — это серия постоянных денежных платежей, сделанных в течение непрерывного периода. Например, автокредит или ипотека — это аннуитет. Дополнительные сведения см. в описании для каждой функции аннуитета. </para>
          <para>В функциях аннуитета денежные средства, которые вы платите, например вклад в сбережения, представляются отрицательным числом; полученные денежные средства, такие как проверка дивидендов, представляются положительным числом. Например, вклад в размере $1000 в банк будет представлен аргументом -1000, если вы вкладчик, и аргументом 1000, если вы банк. </para>
          <para>Microsoft Excel решает для одного финансового аргумента с точки зрения других. Если ставка не 0, то: </para>
          <para>Рис. 1. Уравнение, когда ставка не равна 0</para>
          <para> </para>
          <para> </para>
          <para>Если ставка 0, то:</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон клеток числовых значений, для которых необходимо значение квартиля.</param>
        <param name="Arg2">Quart — указывает, какое значение необходимо вернуть.</param>
        <summary>Возвращает квартиль набора данных. Квартили часто используются в данных о продажах и опросах для разделения популяций на группы. Например, можно использовать <b>quartile,</b> чтобы найти 25 процентов доходов населения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> методах.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Минимальное значение</description>
            </item>
            <item>
              <term>1</term>
              <description>Первый квартиль (25-й процентиль)</description>
            </item>
            <item>
              <term>2</term>
              <description>Медианое значение (50 процентил)</description>
            </item>
            <item>
              <term>3</term>
              <description>Третий квартиль (75-й процентиль)</description>
            </item>
            <item>
              <term>4 </term>
              <description>Максимальное значение</description>
            </item>
          </list>
          <para>Если массив пуст, <b>quartile</b> возвращает #NUM! значение ошибки. </para>
          <para>Если кварт не является integer, он усечен. </para>
          <para>Если кварт &lt; 0 или кварт &gt; 4, <b>quartile</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, и возвращаем то же значение, что и quartile, если кварт равен <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (ноль), 2 и 4 соответственно. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array . Диапазон числовых значений массива или ячейки, для которых необходимо значение квартиля.</param>
        <param name="Arg2">Quart — значение, необходимое для возврата.</param>
        <summary>Возвращает квартиль набора данных, основанный на значениях процентиля от 0.1, эксклюзивный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Quartile_Exc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если кварт не является integer, он усечен. </para>
          <para>Если кварт ≤ 0 или ≥ 4, Quartile_Exc <b></b> возвращает #NUM! значение ошибки. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, и возвращаем то же значение, что и Quartile_Exc, если кварт равен <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (ноль), 2 и 4 соответственно. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон клеток числовых значений, для которых необходимо значение квартиля.</param>
        <param name="Arg2">Quart — значение, необходимое для возврата.</param>
        <summary>Возвращает квартиль набора данных на основе значений процентиля от 0.1 включительно. Квартили часто используются в данных о продажах и опросах для разделения популяций на группы. Например, вы можете использовать QUARTILE_INC, чтобы найти 25 процентов доходов населения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Quartile_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если кварт не является integer, он усечен. </para>
          <para>Если кварта 0 или кварта &lt; 4, Quartile_Inc &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, и возвращаем то же значение, что и Quartile_Inc, если кварт равен <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (ноль), 2 и 4 соответственно. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Числитель — дивиденд.</param>
        <param name="Arg2">Знаменатель — это дивизор.</param>
        <summary>Возвращает 10-ю часть деления. Используйте эту функцию, когда необходимо отменить оставшуюся часть раздела.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если один из аргументов является ненумерным, <b>quotient</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол — угол в градусах, которые необходимо преобразовать.</param>
        <summary>Преобразует градусы в радианы.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bottom — возвращается наименьшее число ranDBETWEEN.</param>
        <param name="Arg2">Топ - возвращается самый большой integer RANDBETWEEN.</param>
        <summary>Возвращает случайный номер в нескольких числах, которые вы указываете. Каждый раз при расчете таблицы возвращается новое случайное число.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — номер, ранж которого вы хотите найти.</param>
        <param name="Arg2">Ref — массив или ссылка на список номеров. Ненумерные значения в ref игнорируются.</param>
        <param name="Arg3">Order — это число, указывав, как ранжизировать номер.</param>
        <summary>Возвращает ранг номера в списке чисел. Ранж числа — это его размер по сравнению с другими значениями в списке. (Если отсортировать список, ранжом номера будет его позиция.)</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> методах.</para>
          <para>Если порядок 0 (ноль) или пропущен, Microsoft Excel число рангов, как если бы ref был список отсортировали в порядке убываний. </para>
          <para>Если порядок не является значением nonzero, Microsoft Excel ранжировать номер, как если бы ref был список сортироваться в порядке восходящей.</para>
          <para>
            <b>Ранж</b> дает дубликаты номеров того же ранга. Однако наличие дублирующих номеров влияет на ряды последующих номеров. Например, если число 10 отображается дважды и имеет ранг 5, то 11 будет иметь ранг 7 (ни один номер не будет иметь ранга 6).</para>
          <para>Для некоторых целей может потребоваться использовать определение ранга, которое учитывает связи. В предыдущем примере нужно было бы пересмотреть ранг 5.5 для числа 10. Это можно сделать, добавив следующий фактор коррекции к значению, возвращенном <b>Rank</b>. Этот фактор коррекции подходит как для случая, когда ранж вычисляется в порядке убывания (порядок = 0 или опущен) или в порядке восходящей (порядок = значение nonzero).</para>
          <para>Коэффициент коррекции для привязанных ранж=[COUNT(ref) + 1 — RANK (номер, ref, 0) — RANK (номер, ref, 1)]/2.</para>
          <para>В следующем примере RANK (A2,A1:A5,1) равен 3. Коэффициент коррекции ( 5 + 1 — 2 — 3)/2 = 0,5, а пересмотренный ранг, учитывая связи, составляет 3 + 0,5 = 3,5. Если число происходит только один раз в ref, то коэффициент коррекции будет 0, так как <b>ранж</b> не должен быть скорректирован для галстука.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер . Число, чье ранж вы хотите найти.</param>
        <param name="Arg2">Ref — массив или ссылка на список номеров. Не числимые значения в ссылке игнорируются.</param>
        <param name="Arg3">Order — номер, который указывает, как ранжирует номер. Если порядок 0 (ноль) или опущен, Microsoft Excel ранжировать номер так, как если бы эталоном был список, отсортировали в порядке убываний. Если порядок не имеет нулевого значения, Microsoft Excel ранжировать номер, как если бы эталон был списком, отсортжённым в порядке восходящей.</param>
        <summary>Возвращает ранг номера в списке чисел; то есть его размер относительно других значений в списке. Если несколько значений имеет один и тот же ранг, возвращается среднее ранж.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер . Число, чье ранж вы хотите найти.</param>
        <param name="Arg2">Ref — массив или ссылка на список номеров. Не числимые значения в ссылке игнорируются.</param>
        <param name="Arg3">Order — номер, который указывает, как ранжирует номер.</param>
        <summary>Возвращает ранг номера в списке чисел. Ранж числа — это его размер по сравнению с другими значениями в списке. (Если отсортировать список, ранжом номера будет его позиция.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Если порядок 0 (ноль) или опущен, Microsoft Excel ранжировать номер так, как если бы эталоном был список, отсортировали в порядке убываний. </para>
          <para>Если порядок не имеет нулевого значения, Microsoft Excel ранжировать номер так, как если бы эталон был списком, отсортным в порядке восходящего значения.</para>
          <para>
            <b>Rank_Eq</b> дает дубликаты номеров того же ранга. Однако наличие дублирующих номеров влияет на ряды последующих номеров. Например, если число 10 отображается дважды и имеет ранг 5, то 11 будет иметь ранг 7 (ни один номер не будет иметь ранга 6).</para>
          <para>Для некоторых целей может потребоваться использовать определение ранга, которое учитывает связи. В предыдущем примере необходимо пересмотреть ранг 5.5 для номера 10. Для этого добавьте следующий фактор коррекции к значению, возвращаемом <b>Rank_Eq.</b> Этот фактор коррекции подходит как для случая, когда ранж вычисляется в порядке убывания (порядок = 0 или опущен) или в порядке восходящей (порядок = значение nonzero).</para>
          <para>Коэффициент коррекции для связанных рангов=[COUNT(ref) + 1 — RANK_EQ (номер, ref, 0) — RANK_EQ (номер, ref, 1)]/2.В следующем примере RANK_EQ(A2,A1:A5,1) равно 3. Коэффициент коррекции ( 5 + 1 — 2 — 3)/2 = 0,5, а пересмотренный ранг, учитывая связи, составляет 3 + 0,5 = 3,5. Если число происходит только один <b>раз</b> в ref, то коэффициент коррекции будет 0, так как Rank_Eq не придется настраивать на галстук.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nper — общее количество периодов оплаты в аннуитет.</param>
        <param name="Arg2">Pmt — оплата, вносяая каждый период и не может изменяться в течение срока действия аннуитета. Как правило, pmt включает основные и проценты, но не другие сборы или налоги. Если pmt опущен, необходимо включить аргумент fv.</param>
        <param name="Arg3">Pv — настоящее значение — общая сумма, которую сейчас стоит серия будущих платежей.</param>
        <param name="Arg4">Fv — будущее значение или баланс наличных средств, который необходимо достичь после последнего платежа. Если fv опущен, предполагается, что значение 0 (будущее значение кредита, например, 0).</param>
        <param name="Arg5">Тип — номер 0 или 1 и указывает, когда должны быть платежи.</param>
        <param name="Arg6">Угадайте — угадайте, какой будет ставка.</param>
        <summary>Возвращает процентную ставку за период аннуитета. RATE вычисляется с помощью итерации и может иметь ноль или несколько решений. Если последовательные результаты RATE не сходятся в пределах 0,00000001 после 20 итерации, RATE возвращает #NUM! значение ошибки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Полное описание аргументов nper, pmt, pv, fv и типа <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> см. в .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1</term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Если не угадать, предполагается, что она составляет 10 процентов. </para>
          <para>Если <b>rate</b> не сходится, попробуйте угадать различные значения. <b>Скорость</b> обычно сходится, если угадать между 0 и 1.</para>
          <para>Убедитесь, что вы последовательны в том, какие единицы используются для указания угадайки и nper. Если вы делаете ежемесячные платежи по четырехлетнему кредиту под 12% годовых, используйте 12%/12 для угадать и 4*12 для nper. Если вы делаете ежегодные платежи по одному кредиту, используйте 12% для угадать и 4 для nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Инвестиции — это сумма, вложенная в безопасность.</param>
        <param name="Arg4">Дисконт — это учетная ставка безопасности.</param>
        <param name="Arg5">База — тип базы для подсчета дня.</param>
        <summary>Возвращает сумму, полученную при погашении для полностью вложенной безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость и основа усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>полученный</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если инвестиции ≤ 0 или если скидка ≤ 0, <b>полученный</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>полученный</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, полученный возвращает #NUM! значение ошибки. <b>Полученный</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для полученного метода</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DIM = количество дней от выпуска до зрелости.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст, в котором необходимо заменить некоторые символы.</param>
        <param name="Arg2">Положение символа в <paramref name="Arg1" /> том, что вы хотите заменить <paramref name="Arg4" /> с .</param>
        <param name="Arg3">Количество символов, <paramref name="Arg1" /> в которых необходимо <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> заменить <paramref name="Arg4" /> метод.</param>
        <param name="Arg4">Текст, который заменит символы <paramref name="Arg1" /> в .</param>
        <summary>Заменяет часть текстовой строки в зависимости от количества символов, которые вы указываете, другой строкой текста.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Old_text — текст, в котором необходимо заменить некоторые символы.</param>
        <param name="Arg2">Start_num — положение персонажа в old_text, которое необходимо заменить new_text.</param>
        <param name="Arg3">Num_chars — количество символов в old_text, которые необходимо заменить на new_text.</param>
        <param name="Arg4">New_text — текст, который заменит символы в old_text.</param>
        <summary>REPLACEB заменяет часть текстовой строки в зависимости от количества указыванных вами bytes на другую текстовую строку.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>предназначен для использования с языками, которые используют набор символов с одним byte (SBCS), в то время как ReplaceB предназначен для использования с языками, которые используют двойной набор символов <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> (DBCS). <b></b> Параметр языка по умолчанию на компьютере влияет на возвратное значение следующим образом:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> всегда подсчитываю каждый символ, будь то один-byte или double-byte, как 1, независимо от того, какой параметр языка по умолчанию. </para>
          <para>
            <b>ReplaceB</b> подсчитываю каждый двухбайтный символ в качестве 2, если вы включили редактирование языка, который поддерживает DBCS, а затем установите его в качестве языка по умолчанию. В противном <b>случае ReplaceB</b> считает каждый символ 1. </para>
          <para>Языки, поддерживают DBCS, включают японский, китайский (упрощенный), китайский (традиционный) и корейский. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст, который необходимо повторить.</param>
        <param name="Arg2">Number_times — положительное число, указывающий количество раз для повторения текста.</param>
        <summary>Повторяет текст заданное количество раз. Используйте REPT для заполнения ячейки рядом экземпляров текстовой строки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если number_times 0 (ноль), <b>rept</b> возвращает "" (пустой текст). </para>
          <para>Если number_times не является integer, она усечена. </para>
          <para>Результат функции <b>Rept</b> не может быть длиннее 32 767 символов или <b>rept</b> возвращает #VALUE!. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — арабское число, необходимое для преобразования.</param>
        <param name="Arg2">Form — это число, указывающий тип римской цифры, который вы хотите. Римский численный стиль варьируется от классического до упрощенного, что становится более кратким по мере увеличения значения формы.</param>
        <summary>Преобразует арабское число в римское в виде текста.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>Классический.</description>
            </item>
            <item>
              <term>1</term>
              <description>Более краткий.</description>
            </item>
            <item>
              <term>2</term>
              <description>Более краткий.</description>
            </item>
            <item>
              <term>3</term>
              <description>Более краткий.</description>
            </item>
            <item>
              <term>4 </term>
              <description>Упрощено.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Классический.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Упрощено.</description>
            </item>
          </list>
          <para>Если число отрицательное, #VALUE! возвращается значение ошибки. </para>
          <para>Если число превышает 3999, #VALUE! возвращается значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — номер, который нужно округить.</param>
        <param name="Arg2">Num_digits — указывает количество цифр, к которым нужно округлить число.</param>
        <summary>Округить число до указанного числа цифр.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если num_digits больше 0 (ноль), то число округляется до указанного числа десятичных мест. </para>
          <para>Если num_digits 0, то число округлится до ближайшего числа. </para>
          <para>Если num_digits меньше 0, то число округляется слева от десятичной точки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — любое реальное число, которое нужно округить.</param>
        <param name="Arg2">Num_digits — количество цифр, к которым нужно округлить число.</param>
        <summary>Округляя число вниз, в сторону нуля.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> ведет себя как <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , за исключением того, что он всегда округит номер вниз. </para>
          <para>Если num_digits больше 0 (ноль), то число округляется до указанного числа десятичных мест. </para>
          <para>Если num_digits 0, то число округлится до ближайшего числа. </para>
          <para>Если num_digits меньше 0, номер округляется слева от десятичной точки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — любое реальное число, которое необходимо округить.</param>
        <param name="Arg2">Num_digits — количество цифр, к которым нужно округлить число.</param>
        <summary>Округляет число вверх, от 0 (ноль).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> ведет себя <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> как, за исключением того, что он всегда округит число вверх. </para>
          <para>Если num_digits больше 0 (ноль), то число округляется до указанного числа десятичных мест. </para>
          <para>Если num_digits 0, то номер округлится до ближайшего числа. </para>
          <para>Если num_digits меньше 0, номер округляется слева от десятичной точки. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество периодов для инвестиций.</param>
        <param name="Arg2">Настоящее значение инвестиций.</param>
        <param name="Arg3">Будущая стоимость инвестиций.</param>
        <summary>Возвращает эквивалентную процентную ставку для роста инвестиций.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — массив или диапазон точек данных.</param>
        <param name="Arg2">Known_x — массив или диапазон точек данных.</param>
        <summary>Возвращает квадрат коэффициента корреляции моментов продукта Pearson с помощью точек данных в known_y и known_x в. Дополнительные сведения см. в статье <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. Значение r-squared можно интерпретировать как пропорцию дисперсии в y, обусловленную отклонением в x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если known_y и known_x пусты или имеют другое количество точек данных, <b>RSq</b> возвращает значение #N/ошибки. </para>
          <para>Если known_y и known_x содержат только 1 точку данных, <b>RSq</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Уравнение коэффициента корреляции моментов продукта Pearson r: </para>
          <para>Рис. 1. Коэффициент корреляции моментов продукта Pearson</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются пример означает AVERAGE (known_x) и AVERAGE (known_y's).</para>
          <para>
            <b>RSq</b> возвращает r2, который является квадратом этого коэффициента корреляции.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Строка, представляющая программный идентификатор сервера в режиме реального времени.</param>
        <param name="server">имя сервера, <b>строка Null</b> или <b>константа vbNullString.</b></param>
        <param name="topic1"><paramref name="topic1" /> — <paramref name="topic28" /> <b>Строка,</b> представляющая тему.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Этот метод подключается к источнику для получения данных в режиме реального времени.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text — текст, который вы хотите найти.</param>
        <param name="Arg2">Within_text — текст, в котором необходимо искать find_text.</param>
        <param name="Arg3">Start_num — номер символа в within_text, с которого необходимо начать поиск.</param>
        <summary><b>Поиск</b> и поиск одной строки текста во второй строке текста и возвращение числа исходного положения первой строки текста из первого символа <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> второй строки текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Поиск предназначен для использования с языками, используюми набор символов с одним byte (SBCS), в то время как предназначен для использования с языками, которые используют набор символов с двойным <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> byte (DBCS). Параметр языка по умолчанию на компьютере влияет на возвращаемую величину следующим<b>образом:</b> поиск всегда подсчитываю каждый символ, независимо от параметра языка по умолчанию. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Если вы включили редактирование языка, поддерживаюного DBCS, каждый символ с двойным byte считается 2, а затем установите его в качестве языка по умолчанию. В <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> противном случае каждый символ считается 1.</para>
          <para>Языки, поддерживают DBCS, включают японский, китайский (упрощенный), китайский (традиционный) и корейский. </para>
          <para>Используйте <b>поиск</b> и определите расположение символа или текстовой строки в другой строке текста, чтобы можно было использовать mid и MIDB или функции для <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> изменения <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> текста. </para>
          <para>
            <b>Поиск</b> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> не являются конфиденциальными. Если вы хотите сделать конфиденциальный поиск по делу, вы можете использовать <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>Вы можете использовать символы под диктовки, знак вопросов (?) и звездочки (*), в find_text. Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем. </para>
          <para>Если find_text не найден, #VALUE! возвращается значение ошибки. </para>
          <para>Если start_num опущен, предполагается, что это будет 1. </para>
          <para>Если start_num не превышает 0 (ноль) или превышает длину within_text, #VALUE! возвращается значение ошибки. </para>
          <para>Используйте start_num, чтобы пропустить определенное количество символов. С <b>помощью поиска</b> в качестве примера предположим, что вы работаете с текстовой строкой "AYF0093. YoungMensApparel". Чтобы найти номер первого "Y" в описательной части текстовой строки, start_num равно 8, чтобы не было поиска последовательной части текста. <b>Поиск</b> начинается с символа 8, find_text на следующем символе и возвращает номер 9. <b>Поиск</b> всегда возвращает количество символов с начала within_text, считая символы, которые вы пропускаете, если start_num больше 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text — текст, который вы хотите найти.</param>
        <param name="Arg2">Within_text — текст, в котором необходимо искать find_text.</param>
        <param name="Arg3">Start_num — номер символа в within_text, с которого необходимо начать поиск.</param>
        <summary>ПОИСК и SEARCHB найдите одну текстовую строку во второй строке текста и верните номер исходного положения первой строки текста из первого символа второй строки текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Поиск предназначен для использования с языками, используюми набор символов с одним byte (SBCS), в то время как предназначен для использования с языками, которые используют набор символов с двойным <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> byte (DBCS). Параметр языка по умолчанию на компьютере влияет на возвращаемую величину следующим<b>образом:</b> поиск всегда подсчитываю каждый символ, независимо от параметра языка по умолчанию. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Если вы включили редактирование языка, поддерживаюного DBCS, каждый символ с двойным byte считается 2, а затем установите его в качестве языка по умолчанию. В <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> противном случае каждый символ считается 1.</para>
          <para>Языки, поддерживают DBCS, включают японский, китайский (упрощенный), китайский (традиционный) и корейский. </para>
          <para>Используйте <b>поиск</b> и определите расположение символа или текстовой строки в другой строке текста, чтобы можно было использовать mid и MIDB или функции для <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> изменения <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> текста. </para>
          <para>
            <b>Поиск</b> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> не являются конфиденциальными. Если вы хотите сделать конфиденциальный поиск по делу, вы можете использовать <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>Вы можете использовать символы под диктовки, знак вопросов (?) и звездочки (*), в find_text. Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем. </para>
          <para>Если find_text не найден, #VALUE! возвращается значение ошибки. </para>
          <para>Если start_num опущен, предполагается, что это будет 1. </para>
          <para>Если start_num не превышает 0 (ноль) или превышает длину within_text, #VALUE! возвращается значение ошибки. </para>
          <para>Используйте start_num, чтобы пропустить определенное количество символов. С <b>помощью поиска</b> в качестве примера предположим, что вы работаете с текстовой строкой "AYF0093. YoungMensApparel". Чтобы найти номер первого "Y" в описательной части текстовой строки, start_num равно 8, чтобы не было поиска последовательной части текста. <b>Поиск</b> начинается с символа 8, find_text на следующем символе и возвращает номер 9. <b>Поиск</b> всегда возвращает количество символов с начала within_text, считая символы, которые вы пропускаете, если start_num больше 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которых нужен секант.</param>
        <summary>Возвращает секант угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которых нужен гиперболический секант.</param>
        <summary>Возвращает гиперболический секант угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — входное значение для серии power.</param>
        <param name="Arg2">N — начальная мощность, к которой нужно поднять x.</param>
        <param name="Arg3">M — шаг, с помощью которого необходимо увеличить n для каждого термина в серии.</param>
        <param name="Arg4">Коэффициенты — это набор коэффициентов, с помощью которых умножается каждая сухая сила x. Количество значений в коэффициентах определяет количество терминов в серии power. Например, если в коэффициентах есть три значения, то в серии power будет три термина.</param>
        <summary>Возвращает сумму серии питания по формуле: SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x (n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является ненумерным, <b>SeriesSum</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — это любое реальное число.</param>
        <summary>Возвращает гиперболический сайн номера.</summary>
        <returns>To be added.</returns>
        <remarks><para>Формула гиперболического сина:</para>
          <para>Рис. 1. Формула гиперболического сина</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2 ... — от 1 до 30 аргументов, для которых необходимо рассчитать перекос. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает перекос дистрибутива. Skewness характеризует степень асимметрии распределения вокруг его мрака. Положительная неостыковка указывает на распределение с асимметричным хвостом, простирающийся в сторону более положительных значений. Отрицательная перекосность указывает на распространение с асимметричным хвостом, простирающийся в сторону более отрицательных значений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если имеется меньше трех точек данных, или стандартное отклонение образца нулевое, <b>Skew</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Уравнение для перекоса определяется как: </para>
          <para>Рис. 1. Уравнение для перекоса</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg2">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg3">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg4">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg5">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg6">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg7">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg8">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg9">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg10">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg11">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg12">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg13">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg14">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg15">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg16">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg17">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg18">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg19">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg20">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg21">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg22">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg23">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg24">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg25">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg26">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg27">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg28">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg29">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <param name="Arg30">От 1 до 254 номеров, имен, массивов или ссылок, содержащих номера, для которых необходимо перекос населения.</param>
        <summary>Возвращает неопределенность дистрибутива на основе популяции: характеристика степени асимметрии распределения вокруг его многая.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — это значение в конце амортизации (иногда называемое спасательный значение актива).</param>
        <param name="Arg3">Жизнь — количество периодов, в течение которых актив амортизации (иногда называются полезным сроком службы актива).</param>
        <summary>Возвращает амортизация актива по прямой линии в течение одного периода.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — массив или диапазон ячечек числовых зависимых точек данных.</param>
        <param name="Arg2">Known_x — набор независимых точек данных.</param>
        <summary>Возвращает наклон линии линейной регрессии через точки данных в known_y и known_x в. Наклон — это вертикальное расстояние, разделенное горизонтальным расстоянием между двумя точками линии, что является скоростью изменения вдоль регрессионной линии.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы должны быть числами, именами, массивами или ссылками, содержами цифры. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если known_y и known_x пусты или имеют различное количество точек данных, <b>наклон</b> возвращает значение #N/ошибки. </para>
          <para>Уравнение для наклона регрессионной строки: </para>
          <para>Рис. 1. Уравнение для наклона регрессионной строки</para>
          <para> </para>
          <para> </para>
          <para>Алгоритм, используемый в <b></b> наклоне и функциях, отличается от используемого в функции <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> алгоритма. Разница между этими алгоритмами может привести к различным результатам, когда данные неудались и коллинеар. Например, если точки данных аргумента known_y являются 0, а точки данных аргумента known_x аргумента 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Наклон</b> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> возвращение #DIV/0! ошибка. Наклон <b>и</b> алгоритм предназначены для поиска одного и только одного ответа, и в этом случае может <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> быть несколько ответов. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> возвращает значение 0. Алгоритм предназначен для возврата разумных результатов для данных collinear, и в этом случае можно найти по крайней <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> мере один ответ.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон числовых данных, для которых необходимо определить наименьшее значение k-th.</param>
        <param name="Arg2">K — положение (от самого маленького) в массиве или диапазоне возвращаемой информации.</param>
        <summary>Возвращает наименьшее значение k-th в наборе данных. Используйте эту функцию для возврата значений с определенным относительным положением в наборе данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Small</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k ≤ 0 или если k превышает количество точек данных, <b>Малый</b> возвращает #NUM! значение ошибки. </para>
          <para>Если n — это число точек данных в массиве, small (array,1) равно наименьшему значению, а SMALL (array,n) — самому крупному значению.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — число, на которое умножается pi.</param>
        <summary>Возвращает квадратный корень (номер * pi).</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер &lt; 0, <b>SqrtPi</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, необходимое для нормализации.</param>
        <param name="Arg2">Mean — арифметическое средство распределения.</param>
        <param name="Arg3">Standard_dev — стандартное отклонение дистрибутива.</param>
        <summary>Возвращает нормализующее значение из дистрибутива, характеризуемого значением среднего и standard_dev.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если standard_dev ≤ 0, <b>стандартизация</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для нормализуемого значения: </para>
          <para>Рис. 1. Уравнение для нормализуемого значения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие выборке населения. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценка стандартного отклонения на основе примера. Стандартное отклонение — это показатель того, насколько широко значения расходятся от среднего значения (среднего).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методе.</para>
          <para>
            <b>StDev</b> предполагает, что его аргументы являются образцом населения. Если данные представляют всю группу населения, вычислите стандартное отклонение с <b>помощью StDev.</b> </para>
          <para>Стандартное отклонение вычисляется с помощью метода "непредвзятый" или "n-1". </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>
            <b>StDev использует</b> следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода StDev</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие населению. Вы также можете использовать один массив или ссылку на массив, а не аргументы, разделенные запятой (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет стандартное отклонение на основе всей популяции, предоставленной в качестве аргументов. Стандартное отклонение — это показатель того, насколько широко значения расходятся от среднего значения (среднего).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> предполагает, что его аргументами является все население. Если данные представляют образец населения, вычислить стандартное отклонение с <b>помощью StDev_P.</b> </para>
          <para>Для больших размеров выборки <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>и StDev_P</b> примерно равные значения. </para>
          <para>Стандартное отклонение вычисляется с помощью метода "предвзятый" или "n". </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>
            <b>StDev_P</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода StDev_P</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие выборке населения. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценка стандартного отклонения на основе примера. Стандартное отклонение — это показатель того, насколько широко значения расходятся от среднего значения (среднего).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> предполагает, что его аргументы являются образцом населения. Если данные представляют всю группу населения, вычислите стандартное отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Стандартное отклонение вычисляется с помощью метода "непредвзятый" или "n-1". </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>
            <b>StDev_S</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение StDev_S метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие выборке населения. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет стандартное отклонение на основе всей популяции, предоставленной в качестве аргументов. Стандартное отклонение — это показатель того, насколько широко значения расходятся от среднего значения (среднего).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методе.</para>
          <para>
            <b>StDevP</b> предполагает, что его аргументами является все население. Если данные представляют образец населения, вычислите стандартное отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Для больших размеров выборки <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>и stDevP</b> возвращают примерно равные значения. </para>
          <para>Стандартное отклонение вычисляется с помощью метода "предвзятый" или "n". Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. <b>StDevP</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода StDevP</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — массив или диапазон зависимых точек данных.</param>
        <param name="Arg2">Known_x — массив или диапазон независимых точек данных.</param>
        <summary>Возвращает стандартную ошибку прогнозируемого значения y для каждого x в регрессии. Стандартная ошибка — это показатель количества ошибок в прогнозе y для отдельного x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Если known_y и known_x имеют различное количество точек данных, <b>StEyx</b> возвращает значение #N/ошибки. </para>
          <para>Если known_y и known_x пусты или имеют менее трех точек данных, <b>StEyx</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Уравнение для стандартной ошибки прогнозируемого y: </para>
          <para>Рис. 1. Уравнение для стандартной ошибки прогнозируемого y</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются примером означает AVERAGE (known_x) и AVERAGE (known_y), а n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст или ссылка на ячейку, содержащую текст, для которого необходимо заменить символы.</param>
        <param name="Arg2">Old_text — текст, который необходимо заменить.</param>
        <param name="Arg3">New_text — текст, который необходимо заменить old_text.</param>
        <param name="Arg4">Instance_num — указывает, какое old_text необходимо заменить на new_text. Если указать instance_num, заменяется только old_text экземпляра. В противном случае каждое появление old_text в тексте меняется на new_text.</param>
        <summary>Заменители new_text для old_text в текстовой строке. Используйте SUBSTITUTE, когда необходимо заменить определенный текст в текстовой строке; используйте REPLACE, когда вы хотите заменить любой текст, который происходит в определенном расположении в текстовой строке.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число, указывающее функцию агрегации, которая будет использоваться методом.</param>
        <param name="Arg2">Первый объект, для которого должна быть рассчитана <see cref="T:Microsoft.Office.Interop.Excel.Range" /> подстановка.</param>
        <param name="Arg3"><paramref name="Arg3" /> — Последующие объекты, для которых должна быть рассчитана <paramref name="Arg30" /> <see cref="T:Microsoft.Office.Interop.Excel.Range" /> подтная.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Создает subtotals.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых необходимо общее значение или сумма.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Добавляет все числа в диапазоне ячеек.</summary>
        <returns>To be added.</returns>
        <remarks><para>Учитываются числа, логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения или текст в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон — диапазон ячеек, который необходимо оценить по критериям.</param>
        <param name="Arg2">Критерии — критерии в виде числа, выражения или текста, определяя, какие ячейки будут добавлены. Например, критерии могут быть выражены как 32, "32", &gt; "32" или "яблоки".</param>
        <param name="Arg3">Sum_range — фактические ячейки, которые необходимо добавить, если их соответствующие ячейки в диапазоне соответствуют критериям. Если sum_range опущен, ячейки в диапазоне оцениваются по критериям и добавляются, если они соответствуют критериям.</param>
        <summary>Добавляет ячейки, указанные по заданным критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Sum_range не должен быть того же размера и формы, что и диапазон. Фактические ячейки, которые добавляются, определяются с помощью верхней левой ячейки в sum_range в качестве первой ячейки, а затем в том числе ячеек, которые соответствуют размеру и форме для диапазона. Например:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>В критериях можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sum_range — диапазон суммы.</param>
        <param name="Arg2">Criteria_range1, criteria_range2, ... — один или несколько диапазонов для оценки связанных критериев.</param>
        <param name="Arg3">Criteria1, criteria2, ... - один или несколько критериев в виде числа, выражения, ссылки на ячейки или текста, определяя, какие ячейки будут добавлены. Например, критерии могут быть выражены как 32, "32", &gt; "32", "яблоки" или B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Добавляет ячейки в диапазон, который соответствует нескольким критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Каждая ячейка в sum_range суммируется только в том случае, если все указанные соответствующие критерии соответствуют действительности для этой ячейки. </para>
          <para>Ячейки в sum_range, содержащие <b>настоящую</b> оценку в качестве 1; ячейки в sum_range, содержащие <b>ложную</b> оценку как 0 (ноль). </para>
          <para>В критериях можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем. </para>
          <para>Каждый criteria_range не должен быть того же размера и формы, что и sum_range. Фактические ячейки, которые добавляются, определяются с помощью верхней левой ячейки в этой criteria_range в качестве первой ячейки, а затем в том числе ячеек, которые соответствуют размеру и форме для sum_range. Например:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, array2, array3, ... - от 2 до 30 массивов, компоненты которых необходимо умножить и затем добавить.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Умножает соответствующие компоненты в данных массивах и возвращает сумму этих продуктов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы массива должны иметь те же измерения. Если этого не сделать, <b>SumProduct</b> возвращает #VALUE! значение ошибки. </para>
          <para>
            <b>SumProduct</b> обрабатывает записи массива, которые не числены, как если бы они были нулями.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - от 1 до 30 аргументов, для которых нужна сумма квадратов. Кроме того, вместо аргументов, разделенных запятой, можно использовать один массив или ссылку на массив.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает сумму квадратов аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются числа, логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x — первый массив или диапазон значений.</param>
        <param name="Arg2">Array_y — второй массив или диапазон значений.</param>
        <summary>Возвращает сумму разницы квадратов соответствующих значений в двух массивах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если array_x и array_y имеет другое количество значений, <b>SumX2MY2returns</b> значение #N/A ошибки. </para>
          <para>Уравнение для суммы разницы квадратов: </para>
          <para>Рис. 1. Уравнение для суммы разницы квадратов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x — первый массив или диапазон значений.</param>
        <param name="Arg2">Array_y — второй массив или диапазон значений.</param>
        <summary>Возвращает сумму квадратов соответствующих значений в двух массивах. Сумма квадратов является общим термином во многих статистических расчетах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если array_x и array_y имеет другое количество значений, <b>SumX2PY2</b> возвращает значение #N/ошибки. </para>
          <para>Уравнение для суммы квадратов: </para>
          <para>Рис. 1. Уравнение для суммы квадратов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x — первый массив или диапазон значений.</param>
        <param name="Arg2">Array_y — второй массив или диапазон значений.</param>
        <summary>Возвращает сумму квадратов различий соответствующих значений в двух массивах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Если аргумент массива или ссылки содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако в нее включены ячейки со значением ноль. </para>
          <para>Если array_x и array_y имеет другое количество значений, <b>SumXMY2</b> возвращает значение #N/A ошибки. </para>
          <para>Уравнение для суммы квадратных различий: </para>
          <para>Рис. 1. Уравнение для суммы квадратных различий</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — это значение в конце амортизации (иногда называемое спасательный значение актива).</param>
        <param name="Arg3">Жизнь — количество периодов, в течение которых актив амортизации (иногда называются полезным сроком службы актива).</param>
        <param name="Arg4">Per — период и должны использовать те же единицы, что и жизнь.</param>
        <summary>Возвращает амортизацию актива за указанный период.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd</b> рассчитывается следующим образом:</para>
          <para>Рис. 1. Уравнение для метода Syd</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина для оценки распределения.</param>
        <param name="Arg2">Deg_freedom — это целый ряд, который указывает количество степеней свободы.</param>
        <param name="Arg3">Накопительное значение — логическое значение, определя которое определяет форму функции. Если <b>кумулятивная</b>T_Dist <b>возвращает</b> накопительную функцию рассылки; если <b>ложный,</b>он возвращает функцию плотности вероятности.</param>
        <summary>Возвращает t-distribution Student, в котором числовые значения (x) — это вычисляемое значение t, для которого вычисляются процентные точки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент является <b></b> ненумерным, T_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если deg_freedom &lt; 1, <b>T_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, <b>T_Dist</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина для оценки распределения.</param>
        <param name="Arg2">Deg_freedom — это целый ряд, который указывает количество степеней свободы.</param>
        <summary>Возвращает двуххвостый t-distribution Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> числим, T_Dist_2T возвращает #VALUE! значение ошибки. </para>
          <para>Если deg_freedom &lt; 1, <b>T_Dist_2T</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, <b>T_Dist_2T</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина для оценки распределения.</param>
        <param name="Arg2">Degrees_freedom — это целый ряд, который указывает количество степеней свободы.</param>
        <summary>Возвращает правохвостый t-distribution Student, где числовое значение (x) — это вычисляемое значение t, для которого должны быть вычислены процентные точки. T-distribution используется в тестировании гипотезы небольших наборов данных. Используйте эту функцию на месте таблицы критически важных значений для t-distribution.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> числим, T_Dist_RT возвращает #VALUE! значение ошибки. </para>
          <para>Если degrees_freedom &lt; 1, <b>T_Dist_RT</b> возвращает #NUM! значение ошибки. </para>
          <para>Аргументы degrees_freedom и "хвосты" усечены в несколько этапов. </para>
          <para>Если хвосты — это любое значение, <b></b> помимо 1 или 2, T_Dist_RT возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, <b>T_Dist_RT</b> возвращает #NUM! значение ошибки. </para>
          <para>Если хвосты = 1, <b>T_Dist_RT</b> вычисляется как T_DIST_RT = P (X x), где X — это случайная переменная, которая следует &gt; за t-distribution. Если хвосты = 2, <b>T_Dist_RT</b> рассчитывается как T_DIST_RT = P (| X| &gt; x) = P(X &gt; x или &lt; X-x). </para>
          <para>Так как x 0 не разрешено использовать T_Dist_RT x 0, обратите внимание, что &lt; T_DIST_RT <b></b> &lt; (x,df) = 1 — T_DIST_RT (x,df) = P &gt; (X-x) и T_DIST_2T (-x,df) = T_DIST_2T (x df) = P (| X| &gt;x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с t-distribution Student.</param>
        <param name="Arg2">Deg_freedom — количество степеней свободы, с помощью которых можно охарактеризовать распространение.</param>
        <summary>Возвращает левый хвост в обратном направлении t-distribution Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если любой аргумент не числим, <b></b> T_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или вероятность &lt; &gt; 1, T_Inv возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если deg_freedom не является неинтегрированной, она усечена. </para>
          <para>Если deg_freedom &lt; 1, <b>T_Inv</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с двуххвостым t-распределением student.</param>
        <param name="Arg2">Degrees_freedom — количество степеней свободы, с помощью которых можно охарактеризовать распространение.</param>
        <summary>Возвращает t-value t-distribution student как функцию вероятности и степени свободы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если любой аргумент не числим, <b></b> T_Inv_2T возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или вероятность &lt; &gt; 1, T_Inv_2T возвращает #NUM! <b></b> значение ошибки. Если degrees_freedom не является integer, она усечена. </para>
          <para>Если degrees_freedom &lt; 1, <b>T_Inv_2T</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>T_Inv_2T</b> возвращает значение t, например P(| X| t) = вероятность того, что X — это случайная переменная, которая следует за &gt; t-distribution и P(| X| &gt; t) = &lt; P(X-t или X &gt; t). </para>
          <para>Однохвостый t-value может быть возвращен путем замены вероятности с вероятностью *2. Для вероятности 0,05 и степеней свободы 10, двухвостый значение рассчитывается с T_INV_2T (0.05,10), который возвращает 2.28139.* Однохвостые значения для той же вероятности и степени свободы можно рассчитать с помощью T_INV_2T (2 0.05,10), который возвращает 1.812462. </para>
          <para>
            <b>Примечание.</b>В некоторых таблицах вероятность описывается как (1-p).</para>
          <para>С учетом значения <b>вероятности T_Inv_2T</b> ищет такое значение x, которое T_DIST_RT (x, degrees_freedom, 2) = вероятность. Таким образом, <b>точность T_Inv_2T</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> . <b>T_Inv_2T</b> использует итеративный метод поиска. Если поиск не сошелся после 100 итерации, функция возвращает значение #N/ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый набор данных.</param>
        <param name="Arg2">Array2 — второй набор данных.</param>
        <param name="Arg3">Tails — указывает количество хвостов рассылки. Если хвосты = 1, <b>T_Test</b> использует однохвостый дистрибутив. Если хвосты = 2, <b>T_Test</b> используется двухвостый дистрибутив.</param>
        <param name="Arg4">Тип — тип t-Test для выполнения.</param>
        <summary>Возвращает вероятность, связанную с тестом T-Test student. Используйте T_TEST, чтобы определить, были ли два образца из одного и того же двух групп населения, которые имеют одно и то же количество.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если в array1 и array2 имеется другое количество точек данных <b></b> и введите = 1 (в паре), T_Test возвращает значение #N/ошибка. </para>
          <para>Аргументы "хвосты" и "тип" усечены до "integers". </para>
          <para>Если хвосты или тип не числимы, <b></b> T_Test возвращает #VALUE! значение ошибки. </para>
          <para>Если хвосты — это любое значение, <b></b> помимо 1 или 2, T_Test возвращает #NUM! значение ошибки. </para>
          <para>
            <b>T_Test</b> использует данные в array1 и array2 для вычисления не-отрицательной t-statistic. Если tails=1, <b>T_Test</b> возвращает вероятность более высокого значения t-statistic при предположении, что array1 и array2 являются примерами из популяций с таким же значением. Значение, возвращаемого T_Test, когда tails=2 дважды возвращается при tails=1 и соответствует вероятности более высокого абсолютного значения t-statistic в предположении "то же самое население означает". <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер — любое реальное число.</param>
        <summary>Возвращает гиперболический тангент номера.</summary>
        <returns>To be added.</returns>
        <remarks><para>Формула гиперболического тангента:</para>
          <para>Рис. 1. Формула для гиперболического тангента</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования счета казначейства. Дата урегулирования безопасности — это дата после даты выпуска, когда счет казначейства будет выставлен покупателю.</param>
        <param name="Arg2">Зрелость — дата погашения казначейского счета. Дата погашения — это дата истечения срока действия счета казначейства.</param>
        <param name="Arg3">ImportantDates должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста. Дисконт — учетная ставка по счету казначейства.</param>
        <summary>Возвращает доходность, эквивалентную облигациям, для казначейского счета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Расчеты и сроки погашения усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>TBillEq</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если скидка ≤ 0, <b>TBillEq</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок погашения расчетов превышает один год &gt; после урегулирования, <b>TBillEq</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TBillEq</b> вычисляется как TBILLEQ = (365 x rate)/(360-(rate x DSM)), где DSM — это количество дней между расчетом и сроком погашения, вычисляемого в соответствии с 360 днями в год.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования счета казначейства. Дата урегулирования безопасности — это дата после даты выпуска, когда счет казначейства будет выставлен покупателю.</param>
        <param name="Arg2">Зрелость — дата погашения казначейского счета. Дата погашения — это дата истечения срока действия счета казначейства.</param>
        <param name="Arg3">Дисконт — учетная ставка по счету казначейства.</param>
        <summary>Возвращает цену за $100 номина для казначейского счета.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Расчеты и сроки погашения усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>TBillPrice</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если скидка ≤ 0, <b>TBillPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок погашения расчетов превышает один год &gt; после расчета, <b>TBillPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TBillPrice</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода TBillPrice</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>DSM = количество дней от урегулирования до срока погашения, за исключением любой даты погашения, которая составляет более одного календарного года после даты урегулирования.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования счета казначейства. Дата урегулирования безопасности — это дата после даты выпуска, когда счет казначейства будет выставлен покупателю.</param>
        <param name="Arg2">Зрелость — дата погашения казначейского счета. Дата погашения — это дата истечения срока действия счета казначейства.</param>
        <param name="Arg3">Pr — цена казначейского счета за $100 номина.</param>
        <summary>Возвращает доход для казначейского счета.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Расчеты и сроки погашения усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>TBillYield</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если pr ≤ 0, <b>TBillYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, или если срок погашения превышает один год после урегулирования, <b>TBillYield</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TBillYield</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Уравнение для метода TBillYield</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>DSM = количество дней от урегулирования до срока погашения, за исключением любой даты погашения, которая составляет более одного календарного года после даты урегулирования.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина для оценки распределения.</param>
        <param name="Arg2">Degrees_freedom — это целый ряд, указывающий количество степеней свободы.</param>
        <param name="Arg3">Tails — указывает количество возвращаемого числа хвостов рассылки. Если хвосты = 1, TDIST возвращает однохвостый дистрибутив. Если хвосты = 2, TDIST возвращает двухвостый дистрибутив.</param>
        <summary>Возвращает процентные точки (вероятность) для t-distribution Student, где числовые значения (x) — это вычисляемое значение t, для которого должны быть вычислены процентные точки. T-distribution используется в тестировании гипотезы небольших наборов данных. Используйте эту функцию на месте таблицы критически важных значений для t-distribution.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> сведениях о методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> методах.</para>
          <para>Если какой-либо аргумент является ненумерным, <b>TDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если degrees_freedom &lt; 1, <b>TDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Аргументы degrees_freedom и "хвосты" усечены в несколько этапов. </para>
          <para>Если хвосты — это любое значение, помимо 1 или 2, <b>TDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, <b>то TDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если хвосты = 1, <b>TDist</b> вычисляется как TDIST = P (X x x), где X — это случайная переменная, которая следует &gt; за t-distribution. Если хвосты = 2, <b>TDist</b> вычисляется как TDIST = P (| X| &gt; x) = P(X &gt; x или &lt; X-x). </para>
          <para>Так как x 0 не разрешено использовать &lt; <b>TDist</b> при x 0, обратите внимание, что &lt; TDIST (-x,df,1) = 1 — TDIST &gt; (x,df,1) = P (X-x) и TDIST (-x,df,2) = TDIST (x df,2) = P(| X| &gt; x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Числовое значение, формула, оцениваемая до числовой величины, или ссылка на ячейку, содержащую числовую величину.</param>
        <param name="Arg2">Формат номера в текстовой форме в поле Category на вкладке Номер в диалоговом окне Ячейки формата.</param>
        <summary>Преобразует значение в текст в определенном формате номеров.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с t-распределением студента с двумя хвостами.</param>
        <param name="Arg2">Degrees_freedom — количество степеней свободы, с помощью которых можно охарактеризовать распространение.</param>
        <summary>Возвращает t-value t-distribution студента как функцию вероятности и степени свободы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в дополнительных сведениях о <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> методах.</para>
          <para>Если любой аргумент не является числовым, <b>TInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>TInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom не является integer, она усечена. </para>
          <para>Если degrees_freedom &lt; 1, <b>TInv</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TInv</b> возвращает значение t, например P(| X| t) = вероятность того, что X — это случайная переменная, которая следует за &gt; t-distribution и P(| X| &gt; t) = &lt; P(X-t или X &gt; t). </para>
          <para>Однохвостый t-value может быть возвращен путем замены вероятности с вероятностью *2. Для вероятности 0,05 и степеней свободы 10 двухвостые значения вычисляются с помощью TINV (0.05,10), которое возвращает 2.28139. Однохвостые* значения для той же вероятности и степени свободы можно рассчитать с помощью TINV (2 0.05,10), который возвращает 1.812462. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон ячеек на таблице, которую необходимо перезавести. Переливание массива создается с помощью первого ряда массива в качестве первого столбца нового массива, второго ряда массива в качестве второго столбца нового массива и так далее.</param>
        <summary>Возвращает вертикальный диапазон ячеек в горизонтальном диапазоне или наоборот. TRANSPOSE необходимо ввести в качестве формулы массива в диапазоне, который имеет одинаковое количество строк и столбцов, соответственно, так как массив имеет столбцы и строки. Используйте TRANSPOSE для переноса вертикальной и горизонтальной ориентации массива на таблицу.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y — набор y-значений, которые вы уже знаете в отношениях y = mx + b.</param>
        <param name="Arg2">Known_x — необязательный набор X-значений, которые вы уже знаете в отношениях y = mx + b.</param>
        <param name="Arg3">New_x — новые x-значения, для которых необходимо, чтобы TREND возвращала соответствующие значения y.</param>
        <param name="Arg4">Const — логическое значение, указывав, следует ли принудить констант b к равному 0.</param>
        <summary>Возвращает значения по линейному тренду. Соответствует прямой линии (с использованием метода наименьших квадратов) массивам known_y и known_x в. Возвращает значения y вдоль этой строки для массива new_x, который вы указываете.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив known_y находится в одном столбце, то каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y находится в одной строке, то каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой формы, если они имеют равные размеры. Если используется несколько переменных, known_y должен быть вектором (то есть диапазоном с высотой одного ряда или шириной одного столбца). </para>
          <para>Если known_x опущен, предполагается, что массив {1,2,3,...} размером с known_y. </para>
          <para>New_x должна включать столбец (или строку) для каждой независимой переменной, как known_x это делает. Если known_y находится в одном столбце, known_x и new_x должны иметь одинаковое количество столбцов. Если known_y находится в одной строке, known_x и new_x должны иметь одинаковое количество строк. </para>
          <para>Если вы не new_x, предполагается, что он будет таким же, как known_x в. </para>
          <para>Если опустить known_x и new_x, предполагается, что они будут массивом {1,2,3,...} размером с known_y. </para>
          <para>Если const является <b>верным</b> или пропущенным, b вычисляется нормально. </para>
          <para>Если значение const <b>является</b>ложным, значение b равно 0 (ноль), а значения m корректируются таким образом, что значение y = mx. </para>
          <para>Сведения о том, Microsoft Excel соответствие строке данным <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> см. в . </para>
          <para>Вы можете использовать <b>Trend</b> для установки полиномиальной кривой путем регрессии к той же переменной, поднятой до разных полномочий. Например, предположим, что столбец A содержит значения y, а столбец B — x-значения. Вы можете ввести x^2 в столбце C, x^3 в столбце D и так далее, а затем регрессить столбцы B через D против столбца A. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массивов. </para>
          <para>При вводе константы массива для аргумента known_x, используйте запятые для отдельных значений в одной строке и запятых для отдельных строк.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст, из которого необходимо удалить пробелы.</param>
        <summary>Удаляет все пробелы из текста, за исключением одного пространства между словами. Используйте TRIM в тексте, который вы получили из другого приложения, которое может иметь нерегулярные интервалы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b> <b>Функция Trim</b> была разработана для обрезания 7-битного символа пространства ASCII (значение 32) из текста. В наборе символов Юникод есть дополнительный символ пространства, называемый неразрушающий символ пространства, который имеет десятичной значение 160. Этот символ обычно используется на веб-страницах как объект HTML, <b> &amp; nbsp;</b>. Сама по себе функция <b>Trim</b> не удаляет этот нерушимый символ пространства.</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон значений для обрезки и среднего значения.</param>
        <param name="Arg2">Процент — дробное число точек данных, исключаемого из расчета. Например, если процент = 0,2, 4 очка будут обрезаны из набора данных в 20 баллов (20 x 0.2): 2 из верхней части и 2 из нижней части набора.</param>
        <summary>Возвращает мягок внутренней части набора данных. TRIMMEAN вычисляет сумму, взятую путем исключения процента точек данных из верхнего и нижнего хвостов набора данных. Эту функцию можно использовать, если вы хотите исключить данные из анализа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если процент &lt; 0 или &gt; процент 1, <b>TrimMean</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TrimMean</b> округит число исключенных точек данных до ближайшего числа из 2. Если процент = 0,1, 10 процентов из 30 точек данных равно 3 пунктам. Для симметрии <b>TrimMean</b> исключает одно значение из верхней и нижней части набора данных.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый набор данных.</param>
        <param name="Arg2">Array2 — второй набор данных.</param>
        <param name="Arg3">Tails — указывает количество хвостов рассылки. Если хвосты = 1, TTEST использует однохвостый дистрибутив. Если хвосты = 2, TTEST использует двухвостый дистрибутив.</param>
        <param name="Arg4">Тип — вид t-Test для выполнения.</param>
        <summary>Возвращает вероятность, связанную с t-Test студента. Используйте TTEST, чтобы определить, были ли два примера взяты из тех же двух групп населения, которые имеют одно и то же количество.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> методе.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Paired</description>
            </item>
            <item>
              <term>2</term>
              <description>Равное отклонение с двумя примерами (homoscedastic)</description>
            </item>
            <item>
              <term>3</term>
              <description>Неравная дисперсия с двумя примерами (гетероскедастическая)</description>
            </item>
          </list>
          <para>Если у array1 и array2 другое количество точек данных и тип = 1 (в паре), <b>TTest</b> возвращает значение #N/A ошибки. </para>
          <para>Аргументы "хвосты" и "тип" усечены до "integers". </para>
          <para>Если хвосты или тип не числовое, <b>TTest</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если хвосты любого значения, кроме 1 или 2, <b>TTest</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TTest</b> использует данные в array1 и array2 для вычисления не-отрицательной t-statistic. Если tails=1, <b>TTest</b> возвращает вероятность более высокого значения t-statistic при предположении, что array1 и array2 являются примерами из популяций с таким же значением. Значение, возвращаемого <b>TTest,</b> когда tails=2 является двойным, которое возвращается при tails=1 и соответствует вероятности более высокого абсолютного значения t-statistic в предположении "то же население означает".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер Юникод, представляющий символ.</param>
        <summary>Возвращает символ Юникод, на который ссылается заданное численное значение.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Символ, который необходимо значение Юникод.</param>
        <summary>Возвращает номер (точка кода), соответствующий первому символу текста.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ссылка на ячейку, содержащую номер, или формулу, которая оценивает число.</param>
        <param name="Arg2">Число цифр справа от десятичной точки. Если Arg2 отрицательный, число округляется слева от десятичной точки. Если вы не закроет десятичных знаков, предполагается, что это будет 2.</param>
        <summary>Преобразует номер в текстовый формат и применяет символ валюты. Имя метода (и его символ) зависит от параметров языка.</summary>
        <returns>To be added.</returns>
        <remarks><para>Метод <b>USDollar</b> преобразует номер в текст с помощью валютного формата, а десятичных закругляется в указанное место. Используемый формат — $#,##0.00_);($#,##0.00).</para>
          <para>Главное отличие между форматированием ячейки с номером с командой "Ячейки формата" и форматированием номера непосредственно с помощью метода заключается в преобразовании ее результата <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> в текст. Номер, отформатированный с командой "Ячейки формата", по-прежнему является числом. Вы можете продолжать использовать цифры, отформатированные в формулах, так как Excel в виде текстовых значений в числа при <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> расчете.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие выборке населения.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценка отклонения на основе примера.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> предполагает, что его аргументы являются образцом населения. Если данные представляют всю группу населения, затем вычисляйте отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>
            <b>Var</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода Var</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие населению.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет отклонение в зависимости от всего населения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> предполагает, что его аргументами является все население. Если данные представляют образец населения, затем вычисляйте отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Уравнение для <b>Var_P:</b> </para>
          <para>Рис. 1. Уравнение для Var_P метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие выборке населения.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценка отклонения на основе примера.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> предполагает, что его аргументы являются образцом населения. Если данные представляют всю группу населения, затем вычисляйте отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>
            <b>Var_S</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение Var_S метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - аргументы от 1 до 30 номеров, соответствующие населению.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет отклонение в зависимости от всего населения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методе.</para>
          <para>
            <b>VarP</b> предполагает, что его аргументами является все население. Если данные представляют образец населения, затем вычисляйте отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть номера или имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент — массив или ссылка, учитываются только номера в этом массиве или ссылке. Пустые ячейки, логические значения, значения текста или ошибки в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, вызывают ошибки. </para>
          <para>Уравнение <b>для VarP:</b> </para>
          <para>Рис. 1. Уравнение для метода VarP</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (number1,number2,...) и n — это размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — это значение в конце амортизации (иногда называемое спасательный значение актива). Это значение может быть 0.</param>
        <param name="Arg3">Жизнь — количество периодов, в течение которых актив амортизации (иногда называются полезным сроком службы актива).</param>
        <param name="Arg4">Start_period — начальный период, за который необходимо рассчитать амортизация. Start_period должны использовать те же единицы, что и жизнь.</param>
        <param name="Arg5">End_period — период окончания, за который необходимо рассчитать амортизация. End_period должны использовать те же единицы, что и жизнь.</param>
        <param name="Arg6">Фактор — скорость, с которой снижается баланс. Если фактор опущен, предполагается, что это 2 (метод двойного снижения баланса). Измените фактор, если вы не хотите использовать метод двойного снижения баланса. Описание метода балансирония с двойным снижением см. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> в .</param>
        <param name="Arg7">No_switch — логическое значение, указывающего, следует ли перейти к амортизации прямой линии, если амортизация больше, чем при расчете уменьшающегося баланса.</param>
        <summary>Возвращает амортизация актива за любой определенный период, включая частичные периоды, с помощью метода двойного снижения баланса или другого метода, который вы указываете. VDB означает переменную баланс снижения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если no_switch <b>верно,</b>Microsoft Excel не переключается на амортизация прямой линии, даже если амортизация больше, чем при расчете уменьшающегося баланса. </para>
          <para>Если no_switch является <b></b> ложным или опущенным, Excel переключается на амортизация прямой линии, если амортизация больше, чем при расчете уменьшающегося баланса.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение, необходимое для поиска в первом столбце массива таблицы. Lookup_value может быть значением или ссылкой. Если lookup_value меньше наименьшего значения в первом столбце table_array, VLOOKUP возвращает значение #N/A ошибки.</param>
        <param name="Arg2">Table_array — два или несколько столбцов данных. Используйте ссылку на диапазон или имя диапазона. Значения в первом столбце table_array являются значениями, которые lookup_value. Эти значения могут быть текстовыми, цифрами или логическими значениями. Текст uppercase и lowercase эквивалентны.</param>
        <param name="Arg3">Col_index_num — номер столбца в table_array, из которого должно быть возвращено совпадающие значения. Значение col_index_num из 1 возвращает значение в первом столбце table_array; значение col_index_num 2 возвращает значение во втором столбце table_array и так далее.</param>
        <param name="Arg4">Range_lookup — логическое значение, которое указывает, нужен ли метод для поиска точного совпадения или <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> приблизительного совпадения:</param>
        <summary>Поиск значения в первом столбце массива таблицы и возвращает значение в одной строке из другого столбца в массиве таблицы.</summary>
        <returns>To be added.</returns>
        <remarks><para>V в <b>VLookup означает</b> вертикаль. Используйте метод <b>VLookup</b> вместо метода, когда значения сравнения находятся в столбце слева от данных, которые <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> необходимо найти.</para>
          <para>Если Col_index_num меньше 1, метод <b>VLookup</b> создает ошибку. </para>
          <para>Если Col_index_num больше количества столбцов в table_array, метод <b>VLookup</b> создает ошибку.</para>
          <para>Если Range_lookup является <b>верным</b> или пропущенным, возвращается точное или приблизительное совпадение. Если точное совпадение не найдено, возвращается следующее самое большое значение, lookup_value меньше. </para>
          <para>Значения в первом столбце table_array должны быть помещены в порядке сортировки по возрастанию; в противном случае <b>метод VLookup</b> может не дать правильное значение.</para>
          <para>Если Range_lookup является <b>ложным,</b> <b>метод VLookup</b> найдет только точное совпадение. В этом случае значения в первом столбце table_array не нужно сортировать. Если в первом столбце table_array, которые соответствуют lookup_value, используется lookup_value. Если точное совпадение не найдено, создается ошибка.</para>
          <para>При поиске текстовых значений в первом столбце table_array убедитесь, что данные в первом столбце table_array не имеют ведущих пробелов, окантовочных пространств, несогласованного использования прямых (или" ) и фигурных (или ) кавычках или непечатных знаков. В этих случаях метод <b>VLookup</b> может дать неправильное или неожиданное значение. Сведения о том, как очистить или обрезать значения, см. в этой <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> информации. При поиске числа или значений даты убедитесь, что данные в первом столбце table_array не хранятся в виде текстовых значений. В этом случае метод <b>VLookup</b> может дать неправильное или неожиданное значение. </para>
          <para>Если range_lookup является <b></b> ложным и lookup_value является текстом, то в lookup_value можно использовать символы под диктовки, знак вопросов (?) и звездочки (*). Знак вопроса совпадает с любым одним персонажем; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический знак вопроса или звездочки, введите тильду (~) перед персонажем.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">URL-адрес веб-службы для запроса HTTP GET.</param>
        <summary>Функция, которая асинхронно вызывает веб-службу с помощью запроса HTTP GET, возвращает ответ.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_number — последовательное число, которое представляет дату дня, который вы пытаетесь найти. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</param>
        <param name="Arg2">Return_type — число, определя которое определяет тип возвращаемого значения.</param>
        <summary>Возвращает день недели, соответствующий дате. День предоставляется в виде integer, в диапазоне от 1 (воскресенье) до 7 (суббота), по умолчанию.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 или пропущено</term>
              <description>Номера 1 (воскресенье) - 7 (суббота). Ведет себя как предыдущие версии Microsoft Excel.</description>
            </item>
            <item>
              <term>2</term>
              <description>Номера 1 (с понедельника) по 7 (воскресенье).</description>
            </item>
            <item>
              <term>3</term>
              <description>Номера 0 (с понедельника) по 6 (воскресенье).</description>
            </item>
            <item>
              <term>11</term>
              <description>Номера 1 (с понедельника) по 7 (воскресенье).</description>
            </item>
            <item>
              <term>12 </term>
              <description>Номера 1 (вторник) — 7 (понедельник)</description>
            </item>
            <item>
              <term>13</term>
              <description>Номера 1 (среда) до 7 (вторник)</description>
            </item>
            <item>
              <term>14 </term>
              <description>Номера 1 (четверг) — 7 (среда)</description>
            </item>
            <item>
              <term>15</term>
              <description>Номера 1 (пятница) по 7 (четверг)</description>
            </item>
            <item>
              <term>16 </term>
              <description>Номера с 1 (суббота) по 7 (пятница)</description>
            </item>
            <item>
              <term>17 </term>
              <description>Номера 1 (воскресенье) — 7 (суббота)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_num - дата в течение недели. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</param>
        <param name="Arg2">Return_type — число, определя которое определяет, в какой день начинается неделя. По умолчанию используется значение 1.</param>
        <summary>Возвращает номер, который указывает, где неделя падает числно в течение года.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Функция <b>WeekNum</b> считает неделю, содержащую 1 января, первой неделей года. Однако существует европейский стандарт, который определяет первую неделю как первую неделю, при этом большинство дней (четыре или более) упадет в новом году. Это означает, что в течение нескольких лет в первую неделю января функция <b>WeekNum</b> возвращает некорректные номера в соответствии с европейским стандартом.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Неделя начинается в воскресенье. Будни про номером от 1 до 7.</description>
            </item>
            <item>
              <term>2</term>
              <description>Неделя начинается в понедельник. Будни про номером от 1 до 7.</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — это значение для оценки функции.</param>
        <param name="Arg2">Alpha — параметр дистрибутива.</param>
        <param name="Arg3">Бета-версия — параметр для распространения.</param>
        <param name="Arg4">Накопительный — определяет форму функции.</param>
        <summary>Возвращает распределение Weibull. Используйте этот дистрибутив в анализе надежности, например при вычислении времени сбоя устройства.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x, alpha или бета-версия не числительна, <b>Weibull</b> возвращает #VALUE! значение ошибки. Если x &lt; 0, <b>Weibull</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа≤ 0 или бета≤ 0, <b>Weibull</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение накопительной функции распределения Weibull: </para>
          <para>Рис. 1. Уравнение для кумулятивного распределения Weibull</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для функции плотности вероятности Weibull:</para>
          <para>Рис. 2. Уравнение для плотности вероятности Weibull</para>
          <para> </para>
          <para> </para>
          <para>Когда альфа =1, <b>Weibull</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение для оценки функции.</param>
        <param name="Arg2">Alpha — параметр дистрибутива.</param>
        <param name="Arg3">Бета-версия — параметр для распространения.</param>
        <param name="Arg4">Накопительный — определяет форму функции.</param>
        <summary>Возвращает распределение Weibull. Используйте этот дистрибутив в анализе надежности, например при расчете времени сбоя для устройства.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x, alpha или бета-версия не <b></b> числимы, Weibull_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Weibull_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа≤ 0 или бета≤ 0, <b></b> Weibull_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение накопительной функции распределения Weibull: </para>
          <para>Рис. 1. Уравнение для кумулятивного распределения Weibull</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для функции плотности вероятности Weibull:</para>
          <para>Рис. 2. Уравнение для плотности вероятности Weibull</para>
          <para> </para>
          <para> </para>
          <para>Когда альфа =1, <b>Weibull_Dist</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала.</param>
        <param name="Arg2">Дни — количество невыгодных и неохоядных дней до или после start_date. Положительное значение для дней дает будущую дату; отрицательное значение дает прошлое значение.</param>
        <param name="Arg3">Праздники — необязательный список из одной или более дат, исключаемой из рабочего календаря, таких как государственные и федеральные праздники и плавучие праздники. Список может быть диапазоном ячеек, содержащих даты, или константой массива серийных номеров, которые представляют даты.</param>
        <summary>Возвращает номер, который представляет дату, которая является указанным числом рабочих дней до или после даты (дата начала). Рабочие дни исключают выходные дни и любые даты, которые определены как праздники. Используйте WORKDAY для исключения выходных и праздников при расчете сроков оплаты счетов, ожидаемого времени доставки или количества выполняемой работы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если какой-либо аргумент не является допустимой датой, <b>WorkDay</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если start_date дней дает недействительные даты, <b>WorkDay</b> возвращает #NUM! значение ошибки. </para>
          <para>Если дни не являются неинтегрированной, она усечена.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала, усеченная до integer.</param>
        <param name="Arg2">Дни — количество рабочих дней до или после start_date. Положительное значение дает будущую дату; отрицательное значение дает прошлое значение; значение 0 (ноль) дает start_date. Смещение дня усечено до последовательности.</param>
        <param name="Arg3">Выходные дни . Указывает дни недели, которые являются выходными днями и не считаются рабочими днями. Weekend — это номер или строка выходных, которая указывает время выходных.</param>
        <param name="Arg4">Праздники — необязательный набор из одной или более дат, которые должны быть исключены из календаря рабочего дня. Праздники — это набор ячеек, содержащих даты, или константа массива последовательных значений, которые представляют эти даты. Упорядочение дат или серийных значений в праздники может быть произвольным.</param>
        <summary>Возвращает серийный номер даты до или после указанного числа рабочих дней с настраиваемые параметры выходных. Параметры выходные указывают, какие и сколько дней являются выходными днями. Выходные дни и дни, указанные в качестве праздников, не считаются рабочими днями.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если start_date для текущего базового значения даты <b></b> WorkDay_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если дата в праздники находится вне диапазона для <b></b> текущего базового значения даты, WorkDay_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если start_date плюс день смещения дает недействительные <b>даты,</b> WorkDay_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если строка выходные имеет недействительную длину или содержит недействительные <b>символы,</b> WorkDay_Intl возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значения — это ряд денежных потоков, соответствующий расписанию платежей в датах. Первый платеж необязателен и соответствует затратам или платежам, которые происходят в начале инвестиции. Если первое значение — это стоимость или оплата, оно должно быть отрицательным. Все последующие платежи дисконтируются в зависимости от 365-дневного года. Ряд значений должен содержать по крайней мере одно положительное и одно отрицательное значение.</param>
        <param name="Arg2">Даты — это расписание дат оплаты, соответствующее платежам с денежным потоком. Первая дата оплаты указывает начало расписания платежей. Все остальные даты должны быть позднее этой даты, но они могут возникать в любом порядке. Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</param>
        <param name="Arg3">Угадайте — число, которое, как вы догадаетесь, близко к результату <b>Xirr</b>.</param>
        <summary>Возвращает внутреннюю доходность для расписания денежных потоков, который не обязательно является периодическим. Чтобы рассчитать внутреннюю скорость возврата для ряда периодических денежных потоков, используйте функцию IRR.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Цифры в датах усечены на несколько часов. </para>
          <para>
            <b>Xirr</b> ожидает по крайней мере один положительный денежный поток и один отрицательный денежный поток; в <b>противном случае Xirr</b> возвращает #NUM! значение ошибки. </para>
          <para>Если любое число в датах не является допустимой датой, <b>Xirr</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если любое число в датах предшествует дате начала, <b>Xirr</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значения и даты содержат различное количество значений, <b>Xirr</b> возвращает #NUM! значение ошибки. </para>
          <para>В большинстве случаев не требуется угадать для вычисления <b>Xirr.</b> Если опущено, предполагается, что угадать будет 0,1 (10 процентов). </para>
          <para>
            <b>Xirr</b> тесно связан с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> чистой функцией настоящего значения. Процентная ставка, исчисляемая <b>Сирром,</b> соответствует XNPV = 0. </para>
          <para>Excel использует итеративный метод для вычисления <b>Xirr</b>. Используя изменение скорости (начиная с угадать), <b>Xirr</b> цикличен с помощью вычисления, пока результат не будет точным в пределах 0,000001 процента. Если <b>xirr</b> не может найти результат, который работает после 100 попыток, #NUM! возвращается значение ошибки. Скорость меняется до тех пор, пока: </para>
          <para>Рис. 1. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>di = ith или последняя дата оплаты.</para>
          <para>d1 = дата 0-го платежа.</para>
          <para>Pi = ith или последний платеж.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Серия денежных потоков, соответствующих расписанию платежей в датах. Первый платеж необязателен и соответствует затратам или платежам, которые происходят в начале инвестиции.</param>
        <param name="Arg2">Расписание дат оплаты, соответствующее платежам с денежным потоком. Первая дата оплаты указывает начало расписания платежей. Все остальные даты должны быть позднее этой даты, но они могут возникать в любом порядке.</param>
        <summary>Возвращает чистое настоящее значение для расписания денежных потоков, которое необязательно является периодическим.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Метод <b>Xnpv</b> не предоставляет параметр, соответствующий аргументу скорости, требуемой соответствующей функцией XNPV (=XNPV (скорость, значения, даты)). Чтобы обойти это ограничение в коде VBA, вместо того чтобы использовать метод <b>Xpnv,</b> с помощью метода вызываем функцию XNPV. <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /></para>
          <para>Чтобы рассчитать чистое настоящее значение для ряда периодических денежных потоков, используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> метод.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg2">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg3">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg4">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg5">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg6">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg7">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg8">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg9">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg10">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg11">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg12">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg13">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg14">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg15">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg16">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg17">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg18">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg19">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg20">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg21">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg22">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg23">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg24">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg25">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg26">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg27">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg28">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg29">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg30">Необходимо проверить от 1 до 254 <b></b> условий, которые могут быть true или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <summary>Возвращает логический эксклюзив OR всех аргументов.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала.</param>
        <param name="Arg2">End_date — дата, представляюная даты окончания.</param>
        <param name="Arg3">База — тип базы для подсчета дня.</param>
        <summary>Вычисляет долю года, представленную количеством целых дней между двумя датами (start_date и end_date). Используйте функцию таблицы YEARFRAC для определения пропорции преимуществ или обязательств за весь год для назначения определенного термина.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Все аргументы усечены на несколько этапов. </para>
          <para>Если start_date или end_date не являются допустимыми датами, <b>YearFrac</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>YearFrac</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Pr — это цена безопасности за $100 номина.</param>
        <param name="Arg4">Выкуп — это значение выкупа безопасности за $100.</param>
        <param name="Arg5">База — тип базы для подсчета дня.</param>
        <summary>Возвращает годовой доход для дисконтной безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчет, зрелость и основа усечены на несколько этапов. </para>
          <para>Если расчет или срок погашения не являются допустимой датой, <b>YieldDisc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если pr ≤ 0 или ≤ 0, <b>YieldDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>YieldDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>YieldDisc</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Урегулирование — дата урегулирования безопасности. Дата урегулирования безопасности — это дата после даты выпуска, когда безопасность будет торговаться покупателю.</param>
        <param name="Arg2">Зрелость — дата зрелости безопасности. Дата зрелости — это дата истечения срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата выпуска безопасности, выраженная как серийный номер даты.</param>
        <param name="Arg4">Rate — процентная ставка безопасности на дату выпуска.</param>
        <param name="Arg5">Pr — это цена безопасности за $100 номина.</param>
        <param name="Arg6">База — тип базы для подсчета дня.</param>
        <summary>Возвращает годовую доходность безопасности, которая платит проценты по сроку погашения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>Даты должны вписаться с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE (2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты вписались в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Фактическое/фактическое</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты как последовательные серийные номера, чтобы их можно было использовать в расчетах. По умолчанию 1 января 1900 является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 г. он составляет 39 448 дней. Microsoft Excel Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата урегулирования — это дата покупки покупателя купона, например облигации. Дата погашения — это дата истечения срока действия купона. Например, предположим, что 30-летняя облигация выдана 1 января 2008 г. и приобретена покупателем через шесть месяцев. Дата выпуска — 1 января 2008 г., дата урегулирования — 1 июля 2008 г., а срок погашения — 1 января 2038 г., то есть 30 лет после даты выпуска 1 января 2008 г. </para>
          <para>Расчеты, сроки погашения, выпуск и основа усечены в несколько этапов. </para>
          <para>Если урегулирование, срок погашения или проблема не являются допустимой датой, <b>YieldMat</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка &lt; 0 или если pr ≤ 0, <b>YieldMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если база &lt; 0 или если база &gt; 4, <b>YieldMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>YieldMat</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — это массив или диапазон данных, с которыми можно проверить выдвигаемую гипотезу.</param>
        <param name="Arg2">Значение, необходимое для тестирования.</param>
        <param name="Arg3">Sigma — стандартное отклонение населения. При опущении используется стандартное отклонение образца.</param>
        <summary>Возвращает однохвостые значения вероятности z-test. Для данной гипотезизированной группы Z_TEST возвращает вероятность того, что среднее значение выборки будет больше среднего значения наблюдений в наборе данных (массиве), то есть в наблюдаемом примере.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Z_Test</b> возвращает значение #N/Ошибки. </para>
          <para>
            <b>Z_Test</b> вычисляется следующим образом, если сигма не опущена: </para>
          <para>Рис. 1. Уравнение для Z_Test, когда сигма не опущена</para>
          <para> </para>
          <para> </para>
          <para>или при опущении сигмы:</para>
          <para>Рис. 2. Уравнение для Z_Test при опущении сигмы</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (массив); s — это стандартное отклонение STDEV_S (массив); и n — это число наблюдений в примере COUNT(array).</para>
          <para>
            <b>Z_Test</b> представляет вероятность того, что среднее значение выборки будет больше наблюдаемого значения AVERAGE(array), когда среднее значение для нижего значения населения составляет μ0. Из симметрии нормального распределения, если average (array) μ0, Z_Test возвращает значение больше &lt; 0,5. <b></b></para>
          <para>Следующую формулу Excel можно использовать для вычисления двухвостых вероятностей того, что среднее образца будет дальше от μ0 (в любом направлении), чем AVERAGE (массив), когда среднее значение численности составляет μ0:</para>
          <para>=2 * MIN (Z_TEST(array,μ0,sigma), 1 - Z_TEST (array,μ0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — это массив или диапазон данных, с которыми можно проверить выдвигаемую гипотезу.</param>
        <param name="Arg2">Значение, необходимое для тестирования.</param>
        <param name="Arg3">Sigma — стандартное отклонение населения. При опущении используется стандартное отклонение образца.</param>
        <summary>Возвращает однохвостые значения вероятности z-test. Для данной гипотезизированной средней численности ZTEST возвращает вероятность того, что среднее выборки будет больше среднего значения наблюдений в наборе данных (массиве), то есть в наблюдаемом примере.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно.</b>Эта функция была заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако, если обратная совместимость не требуется, необходимо использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> методе.</para>
          <para>Если массив пустой, <b>ZTest</b> возвращает значение #N/A ошибки. </para>
          <para>
            <b>ZTest</b> вычисляется следующим образом, когда сигма не опущена: </para>
          <para>Рис. 1. Уравнение для ZTest, когда сигма не опущена</para>
          <para> </para>
          <para> </para>
          <para>или при опущении сигмы:</para>
          <para>Рис. 2. Уравнение для ZTest при опущении сигмы</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего значения (массив); s — пример стандартного отклонения STDEV(array); и n — это число наблюдений в примере COUNT(array).</para>
          <para>
            <b>ZTest</b> представляет вероятность того, что среднее по выборке будет больше наблюдаемого значения AVERAGE (массив), когда среднее значение в основном населения составляет μ0. С симметрией нормального распределения, если μ0 AVERAGE (array) ZTEST возвращает значение больше &lt; 0,5.</para>
          <para>Следующую формулу Excel можно использовать для вычисления двухвостых вероятностей того, что среднее образца будет дальше от μ0 (в любом направлении), чем AVERAGE (массив), когда среднее значение численности составляет μ0:=2 * MIN (ZTEST(array,μ0,sigma), 1 - ZTEST (array,μ0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>